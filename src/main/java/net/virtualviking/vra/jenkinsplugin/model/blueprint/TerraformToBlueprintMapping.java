/*
 * VMware Cloud Assembly Blueprint API
 * A multi-cloud Blueprint API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-09-12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.virtualviking.vra.jenkinsplugin.model.blueprint;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import net.virtualviking.vra.jenkinsplugin.model.blueprint.ContentReference;
import net.virtualviking.vra.jenkinsplugin.model.blueprint.OutputValue;
import net.virtualviking.vra.jenkinsplugin.model.blueprint.Provider;
import net.virtualviking.vra.jenkinsplugin.model.blueprint.Variable;

/**
 * Information about a Terraform configuration needed to create a blueprint.
 */
@ApiModel(description = "Information about a Terraform configuration needed to create a blueprint.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-08-31T20:41:57.276-04:00")



public class TerraformToBlueprintMapping {
  @SerializedName("compatibleVersions")
  private List<String> compatibleVersions = null;

  @SerializedName("contentReference")
  private ContentReference contentReference = null;

  @SerializedName("outputValues")
  private List<OutputValue> outputValues = null;

  @SerializedName("providers")
  private List<Provider> providers = null;

  @SerializedName("variables")
  private List<Variable> variables = null;

  @SerializedName("warnings")
  private List<String> warnings = null;

  public TerraformToBlueprintMapping compatibleVersions(List<String> compatibleVersions) {
    this.compatibleVersions = compatibleVersions;
    return this;
  }

  public TerraformToBlueprintMapping addCompatibleVersionsItem(String compatibleVersionsItem) {
    if (this.compatibleVersions == null) {
      this.compatibleVersions = new ArrayList<String>();
    }
    this.compatibleVersions.add(compatibleVersionsItem);
    return this;
  }

   /**
   * Compatible versions of Terraform that can be used to execute this configuration.
   * @return compatibleVersions
  **/
  @ApiModelProperty(value = "Compatible versions of Terraform that can be used to execute this configuration.")
  public List<String> getCompatibleVersions() {
    return compatibleVersions;
  }

  public void setCompatibleVersions(List<String> compatibleVersions) {
    this.compatibleVersions = compatibleVersions;
  }

  public TerraformToBlueprintMapping contentReference(ContentReference contentReference) {
    this.contentReference = contentReference;
    return this;
  }

   /**
   * A reference to the location where the Terraform configuration is being hosted.
   * @return contentReference
  **/
  @ApiModelProperty(value = "A reference to the location where the Terraform configuration is being hosted.")
  public ContentReference getContentReference() {
    return contentReference;
  }

  public void setContentReference(ContentReference contentReference) {
    this.contentReference = contentReference;
  }

  public TerraformToBlueprintMapping outputValues(List<OutputValue> outputValues) {
    this.outputValues = outputValues;
    return this;
  }

  public TerraformToBlueprintMapping addOutputValuesItem(OutputValue outputValuesItem) {
    if (this.outputValues == null) {
      this.outputValues = new ArrayList<OutputValue>();
    }
    this.outputValues.add(outputValuesItem);
    return this;
  }

   /**
   * Information about output values generated by the Terraform configuration.
   * @return outputValues
  **/
  @ApiModelProperty(value = "Information about output values generated by the Terraform configuration.")
  public List<OutputValue> getOutputValues() {
    return outputValues;
  }

  public void setOutputValues(List<OutputValue> outputValues) {
    this.outputValues = outputValues;
  }

  public TerraformToBlueprintMapping providers(List<Provider> providers) {
    this.providers = providers;
    return this;
  }

  public TerraformToBlueprintMapping addProvidersItem(Provider providersItem) {
    if (this.providers == null) {
      this.providers = new ArrayList<Provider>();
    }
    this.providers.add(providersItem);
    return this;
  }

   /**
   * Information about providers used in the Terraform configuration.
   * @return providers
  **/
  @ApiModelProperty(value = "Information about providers used in the Terraform configuration.")
  public List<Provider> getProviders() {
    return providers;
  }

  public void setProviders(List<Provider> providers) {
    this.providers = providers;
  }

  public TerraformToBlueprintMapping variables(List<Variable> variables) {
    this.variables = variables;
    return this;
  }

  public TerraformToBlueprintMapping addVariablesItem(Variable variablesItem) {
    if (this.variables == null) {
      this.variables = new ArrayList<Variable>();
    }
    this.variables.add(variablesItem);
    return this;
  }

   /**
   * Information about variables expected by the Terraform configuration.
   * @return variables
  **/
  @ApiModelProperty(value = "Information about variables expected by the Terraform configuration.")
  public List<Variable> getVariables() {
    return variables;
  }

  public void setVariables(List<Variable> variables) {
    this.variables = variables;
  }

  public TerraformToBlueprintMapping warnings(List<String> warnings) {
    this.warnings = warnings;
    return this;
  }

  public TerraformToBlueprintMapping addWarningsItem(String warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<String>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * A list of warnings related to the Terraform configuration.
   * @return warnings
  **/
  @ApiModelProperty(value = "A list of warnings related to the Terraform configuration.")
  public List<String> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<String> warnings) {
    this.warnings = warnings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerraformToBlueprintMapping terraformToBlueprintMapping = (TerraformToBlueprintMapping) o;
    return Objects.equals(this.compatibleVersions, terraformToBlueprintMapping.compatibleVersions) &&
        Objects.equals(this.contentReference, terraformToBlueprintMapping.contentReference) &&
        Objects.equals(this.outputValues, terraformToBlueprintMapping.outputValues) &&
        Objects.equals(this.providers, terraformToBlueprintMapping.providers) &&
        Objects.equals(this.variables, terraformToBlueprintMapping.variables) &&
        Objects.equals(this.warnings, terraformToBlueprintMapping.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compatibleVersions, contentReference, outputValues, providers, variables, warnings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerraformToBlueprintMapping {\n");
    
    sb.append("    compatibleVersions: ").append(toIndentedString(compatibleVersions)).append("\n");
    sb.append("    contentReference: ").append(toIndentedString(contentReference)).append("\n");
    sb.append("    outputValues: ").append(toIndentedString(outputValues)).append("\n");
    sb.append("    providers: ").append(toIndentedString(providers)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

