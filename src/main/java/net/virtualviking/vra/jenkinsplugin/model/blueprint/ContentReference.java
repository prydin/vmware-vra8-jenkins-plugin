/*
 * VMware Cloud Assembly Blueprint API
 * A multi-cloud Blueprint API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-09-12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.virtualviking.vra.jenkinsplugin.model.blueprint;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

/**
 * ContentReference
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-08-31T20:41:57.276-04:00")



public class ContentReference {
  @SerializedName("commitId")
  private String commitId = null;

  @SerializedName("contentSourceId")
  private UUID contentSourceId = null;

  @SerializedName("path")
  private String path = null;

  public ContentReference commitId(String commitId) {
    this.commitId = commitId;
    return this;
  }

   /**
   * Identifies the commit that corresponds to the desired version of the remote file(s)
   * @return commitId
  **/
  @ApiModelProperty(value = "Identifies the commit that corresponds to the desired version of the remote file(s)")
  public String getCommitId() {
    return commitId;
  }

  public void setCommitId(String commitId) {
    this.commitId = commitId;
  }

  public ContentReference contentSourceId(UUID contentSourceId) {
    this.contentSourceId = contentSourceId;
    return this;
  }

   /**
   * ID of the relevant content source
   * @return contentSourceId
  **/
  @ApiModelProperty(value = "ID of the relevant content source")
  public UUID getContentSourceId() {
    return contentSourceId;
  }

  public void setContentSourceId(UUID contentSourceId) {
    this.contentSourceId = contentSourceId;
  }

  public ContentReference path(String path) {
    this.path = path;
    return this;
  }

   /**
   * path to the desired terraform file or directory
   * @return path
  **/
  @ApiModelProperty(value = "path to the desired terraform file or directory")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentReference contentReference = (ContentReference) o;
    return Objects.equals(this.commitId, contentReference.commitId) &&
        Objects.equals(this.contentSourceId, contentReference.contentSourceId) &&
        Objects.equals(this.path, contentReference.path);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitId, contentSourceId, path);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentReference {\n");
    
    sb.append("    commitId: ").append(toIndentedString(commitId)).append("\n");
    sb.append("    contentSourceId: ").append(toIndentedString(contentSourceId)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

