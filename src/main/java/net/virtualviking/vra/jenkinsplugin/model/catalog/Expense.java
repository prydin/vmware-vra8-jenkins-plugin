/*
 * VMware Service Broker API
 * A multi-cloud API for Cloud Automation Services
 *
 * OpenAPI spec version: 2020-08-25
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.virtualviking.vra.jenkinsplugin.model.catalog;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Date;

/**
 * Expense
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-01T09:23:54.867-04:00")



public class Expense {
  @SerializedName("additionalExpense")
  private BigDecimal additionalExpense = null;

  @SerializedName("code")
  private String code = null;

  @SerializedName("computeExpense")
  private BigDecimal computeExpense = null;

  @SerializedName("lastUpdatedTime")
  private Date lastUpdatedTime = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("networkExpense")
  private BigDecimal networkExpense = null;

  @SerializedName("storageExpense")
  private BigDecimal storageExpense = null;

  @SerializedName("totalExpense")
  private BigDecimal totalExpense = null;

  @SerializedName("unit")
  private String unit = null;

   /**
   * Additional expense incurred for the resource.
   * @return additionalExpense
  **/
  @ApiModelProperty(value = "Additional expense incurred for the resource.")
  public BigDecimal getAdditionalExpense() {
    return additionalExpense;
  }

   /**
   * Expense sync message code if any.
   * @return code
  **/
  @ApiModelProperty(value = "Expense sync message code if any.")
  public String getCode() {
    return code;
  }

   /**
   * Compute expense of the resource.
   * @return computeExpense
  **/
  @ApiModelProperty(value = "Compute expense of the resource.")
  public BigDecimal getComputeExpense() {
    return computeExpense;
  }

   /**
   * Last expense sync time.
   * @return lastUpdatedTime
  **/
  @ApiModelProperty(value = "Last expense sync time.")
  public Date getLastUpdatedTime() {
    return lastUpdatedTime;
  }

   /**
   * Expense sync message if any.
   * @return message
  **/
  @ApiModelProperty(value = "Expense sync message if any.")
  public String getMessage() {
    return message;
  }

   /**
   * Network expense of the resource.
   * @return networkExpense
  **/
  @ApiModelProperty(value = "Network expense of the resource.")
  public BigDecimal getNetworkExpense() {
    return networkExpense;
  }

   /**
   * Storage expense of the resource.
   * @return storageExpense
  **/
  @ApiModelProperty(value = "Storage expense of the resource.")
  public BigDecimal getStorageExpense() {
    return storageExpense;
  }

   /**
   * Total expense of the resource.
   * @return totalExpense
  **/
  @ApiModelProperty(value = "Total expense of the resource.")
  public BigDecimal getTotalExpense() {
    return totalExpense;
  }

   /**
   * Monetary unit.
   * @return unit
  **/
  @ApiModelProperty(value = "Monetary unit.")
  public String getUnit() {
    return unit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Expense expense = (Expense) o;
    return Objects.equals(this.additionalExpense, expense.additionalExpense) &&
        Objects.equals(this.code, expense.code) &&
        Objects.equals(this.computeExpense, expense.computeExpense) &&
        Objects.equals(this.lastUpdatedTime, expense.lastUpdatedTime) &&
        Objects.equals(this.message, expense.message) &&
        Objects.equals(this.networkExpense, expense.networkExpense) &&
        Objects.equals(this.storageExpense, expense.storageExpense) &&
        Objects.equals(this.totalExpense, expense.totalExpense) &&
        Objects.equals(this.unit, expense.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalExpense, code, computeExpense, lastUpdatedTime, message, networkExpense, storageExpense, totalExpense, unit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Expense {\n");
    
    sb.append("    additionalExpense: ").append(toIndentedString(additionalExpense)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    computeExpense: ").append(toIndentedString(computeExpense)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    networkExpense: ").append(toIndentedString(networkExpense)).append("\n");
    sb.append("    storageExpense: ").append(toIndentedString(storageExpense)).append("\n");
    sb.append("    totalExpense: ").append(toIndentedString(totalExpense)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

