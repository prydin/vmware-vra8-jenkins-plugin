/*
 * VMware Cloud Assembly Blueprint API
 * A multi-cloud Blueprint API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-09-12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.virtualviking.vra.jenkinsplugin.model.blueprint;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

/**
 * BlueprintValidationRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-08-31T20:41:57.276-04:00")



public class BlueprintValidationRequest {
  @SerializedName("blueprintId")
  private UUID blueprintId = null;

  @SerializedName("content")
  private String content = null;

  @SerializedName("inputs")
  private Object inputs = null;

  @SerializedName("projectId")
  private String projectId = null;

  public BlueprintValidationRequest blueprintId(UUID blueprintId) {
    this.blueprintId = blueprintId;
    return this;
  }

   /**
   * Blueprint Id
   * @return blueprintId
  **/
  @ApiModelProperty(value = "Blueprint Id")
  public UUID getBlueprintId() {
    return blueprintId;
  }

  public void setBlueprintId(UUID blueprintId) {
    this.blueprintId = blueprintId;
  }

  public BlueprintValidationRequest content(String content) {
    this.content = content;
    return this;
  }

   /**
   * Blueprint YAML content
   * @return content
  **/
  @ApiModelProperty(value = "Blueprint YAML content")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public BlueprintValidationRequest inputs(Object inputs) {
    this.inputs = inputs;
    return this;
  }

   /**
   * Blueprint request inputs
   * @return inputs
  **/
  @ApiModelProperty(value = "Blueprint request inputs")
  public Object getInputs() {
    return inputs;
  }

  public void setInputs(Object inputs) {
    this.inputs = inputs;
  }

  public BlueprintValidationRequest projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Project Id
   * @return projectId
  **/
  @ApiModelProperty(value = "Project Id")
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintValidationRequest blueprintValidationRequest = (BlueprintValidationRequest) o;
    return Objects.equals(this.blueprintId, blueprintValidationRequest.blueprintId) &&
        Objects.equals(this.content, blueprintValidationRequest.content) &&
        Objects.equals(this.inputs, blueprintValidationRequest.inputs) &&
        Objects.equals(this.projectId, blueprintValidationRequest.projectId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blueprintId, content, inputs, projectId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintValidationRequest {\n");
    
    sb.append("    blueprintId: ").append(toIndentedString(blueprintId)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

