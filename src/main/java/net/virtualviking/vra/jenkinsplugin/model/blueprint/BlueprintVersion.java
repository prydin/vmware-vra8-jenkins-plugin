/*
 * VMware Cloud Assembly Blueprint API
 * A multi-cloud Blueprint API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-09-12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.virtualviking.vra.jenkinsplugin.model.blueprint;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Date;

/**
 * BlueprintVersion
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-08-31T20:41:57.276-04:00")



public class BlueprintVersion {
  @SerializedName("blueprintId")
  private String blueprintId = null;

  @SerializedName("content")
  private String content = null;

  @SerializedName("createdAt")
  private Date createdAt = null;

  @SerializedName("createdBy")
  private String createdBy = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("orgId")
  private String orgId = null;

  @SerializedName("projectId")
  private String projectId = null;

  @SerializedName("projectName")
  private String projectName = null;

  @SerializedName("selfLink")
  private String selfLink = null;

  /**
   * Blueprint status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DRAFT("DRAFT"),
    
    VERSIONED("VERSIONED"),
    
    RELEASED("RELEASED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("updatedAt")
  private Date updatedAt = null;

  @SerializedName("updatedBy")
  private String updatedBy = null;

  @SerializedName("valid")
  private Boolean valid = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("versionChangeLog")
  private String versionChangeLog = null;

  @SerializedName("versionDescription")
  private String versionDescription = null;

   /**
   * Draft blueprint ID
   * @return blueprintId
  **/
  @ApiModelProperty(value = "Draft blueprint ID")
  public String getBlueprintId() {
    return blueprintId;
  }

   /**
   * Blueprint YAML content
   * @return content
  **/
  @ApiModelProperty(value = "Blueprint YAML content")
  public String getContent() {
    return content;
  }

   /**
   * Created time
   * @return createdAt
  **/
  @ApiModelProperty(value = "Created time")
  public Date getCreatedAt() {
    return createdAt;
  }

   /**
   * Created by
   * @return createdBy
  **/
  @ApiModelProperty(value = "Created by")
  public String getCreatedBy() {
    return createdBy;
  }

   /**
   * Draft blueprint description
   * @return description
  **/
  @ApiModelProperty(value = "Draft blueprint description")
  public String getDescription() {
    return description;
  }

   /**
   * Object ID
   * @return id
  **/
  @ApiModelProperty(value = "Object ID")
  public String getId() {
    return id;
  }

   /**
   * Blueprint name
   * @return name
  **/
  @ApiModelProperty(value = "Blueprint name")
  public String getName() {
    return name;
  }

   /**
   * Org ID
   * @return orgId
  **/
  @ApiModelProperty(value = "Org ID")
  public String getOrgId() {
    return orgId;
  }

  public BlueprintVersion projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Project ID
   * @return projectId
  **/
  @ApiModelProperty(value = "Project ID")
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }

   /**
   * Project Name
   * @return projectName
  **/
  @ApiModelProperty(value = "Project Name")
  public String getProjectName() {
    return projectName;
  }

   /**
   * Blueprint version self link
   * @return selfLink
  **/
  @ApiModelProperty(value = "Blueprint version self link")
  public String getSelfLink() {
    return selfLink;
  }

   /**
   * Blueprint status
   * @return status
  **/
  @ApiModelProperty(value = "Blueprint status")
  public StatusEnum getStatus() {
    return status;
  }

   /**
   * Updated time
   * @return updatedAt
  **/
  @ApiModelProperty(value = "Updated time")
  public Date getUpdatedAt() {
    return updatedAt;
  }

   /**
   * Updated by
   * @return updatedBy
  **/
  @ApiModelProperty(value = "Updated by")
  public String getUpdatedBy() {
    return updatedBy;
  }

   /**
   * Validation result
   * @return valid
  **/
  @ApiModelProperty(value = "Validation result")
  public Boolean isValid() {
    return valid;
  }

   /**
   * Blueprint version
   * @return version
  **/
  @ApiModelProperty(value = "Blueprint version")
  public String getVersion() {
    return version;
  }

   /**
   * Blueprint version change log
   * @return versionChangeLog
  **/
  @ApiModelProperty(value = "Blueprint version change log")
  public String getVersionChangeLog() {
    return versionChangeLog;
  }

   /**
   * Blueprint version description
   * @return versionDescription
  **/
  @ApiModelProperty(value = "Blueprint version description")
  public String getVersionDescription() {
    return versionDescription;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintVersion blueprintVersion = (BlueprintVersion) o;
    return Objects.equals(this.blueprintId, blueprintVersion.blueprintId) &&
        Objects.equals(this.content, blueprintVersion.content) &&
        Objects.equals(this.createdAt, blueprintVersion.createdAt) &&
        Objects.equals(this.createdBy, blueprintVersion.createdBy) &&
        Objects.equals(this.description, blueprintVersion.description) &&
        Objects.equals(this.id, blueprintVersion.id) &&
        Objects.equals(this.name, blueprintVersion.name) &&
        Objects.equals(this.orgId, blueprintVersion.orgId) &&
        Objects.equals(this.projectId, blueprintVersion.projectId) &&
        Objects.equals(this.projectName, blueprintVersion.projectName) &&
        Objects.equals(this.selfLink, blueprintVersion.selfLink) &&
        Objects.equals(this.status, blueprintVersion.status) &&
        Objects.equals(this.updatedAt, blueprintVersion.updatedAt) &&
        Objects.equals(this.updatedBy, blueprintVersion.updatedBy) &&
        Objects.equals(this.valid, blueprintVersion.valid) &&
        Objects.equals(this.version, blueprintVersion.version) &&
        Objects.equals(this.versionChangeLog, blueprintVersion.versionChangeLog) &&
        Objects.equals(this.versionDescription, blueprintVersion.versionDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blueprintId, content, createdAt, createdBy, description, id, name, orgId, projectId, projectName, selfLink, status, updatedAt, updatedBy, valid, version, versionChangeLog, versionDescription);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintVersion {\n");
    
    sb.append("    blueprintId: ").append(toIndentedString(blueprintId)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    versionChangeLog: ").append(toIndentedString(versionChangeLog)).append("\n");
    sb.append("    versionDescription: ").append(toIndentedString(versionDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

