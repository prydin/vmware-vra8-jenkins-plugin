/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.virtualviking.vra.jenkinsplugin.model.iaas;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import net.virtualviking.vra.jenkinsplugin.model.iaas.ErrorManager;
import net.virtualviking.vra.jenkinsplugin.model.iaas.Filter;
import net.virtualviking.vra.jenkinsplugin.model.iaas.Formatter;
import net.virtualviking.vra.jenkinsplugin.model.iaas.Level;

/**
 * Handler
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-01T10:54:54.585-04:00")



public class Handler {
  @SerializedName("filter")
  private Filter filter = null;

  @SerializedName("formatter")
  private Formatter formatter = null;

  @SerializedName("errorManager")
  private ErrorManager errorManager = null;

  @SerializedName("level")
  private Level level = null;

  @SerializedName("encoding")
  private String encoding = null;

  public Handler filter(Filter filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @ApiModelProperty(value = "")
  public Filter getFilter() {
    return filter;
  }

  public void setFilter(Filter filter) {
    this.filter = filter;
  }

  public Handler formatter(Formatter formatter) {
    this.formatter = formatter;
    return this;
  }

   /**
   * Get formatter
   * @return formatter
  **/
  @ApiModelProperty(value = "")
  public Formatter getFormatter() {
    return formatter;
  }

  public void setFormatter(Formatter formatter) {
    this.formatter = formatter;
  }

  public Handler errorManager(ErrorManager errorManager) {
    this.errorManager = errorManager;
    return this;
  }

   /**
   * Get errorManager
   * @return errorManager
  **/
  @ApiModelProperty(value = "")
  public ErrorManager getErrorManager() {
    return errorManager;
  }

  public void setErrorManager(ErrorManager errorManager) {
    this.errorManager = errorManager;
  }

  public Handler level(Level level) {
    this.level = level;
    return this;
  }

   /**
   * Get level
   * @return level
  **/
  @ApiModelProperty(value = "")
  public Level getLevel() {
    return level;
  }

  public void setLevel(Level level) {
    this.level = level;
  }

  public Handler encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

   /**
   * Get encoding
   * @return encoding
  **/
  @ApiModelProperty(value = "")
  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Handler handler = (Handler) o;
    return Objects.equals(this.filter, handler.filter) &&
        Objects.equals(this.formatter, handler.formatter) &&
        Objects.equals(this.errorManager, handler.errorManager) &&
        Objects.equals(this.level, handler.level) &&
        Objects.equals(this.encoding, handler.encoding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, formatter, errorManager, level, encoding);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Handler {\n");
    
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    formatter: ").append(toIndentedString(formatter)).append("\n");
    sb.append("    errorManager: ").append(toIndentedString(errorManager)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

