/*
 * VMware Service Broker API
 * A multi-cloud API for Cloud Automation Services
 *
 * OpenAPI spec version: 2020-08-25
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.virtualviking.vra.jenkinsplugin.model.catalog;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

/**
 * Element of a decision.
 */
@ApiModel(description = "Element of a decision.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-01T09:23:54.867-04:00")



public class PolicyDecisionPolicy {
  /**
   * Gets or Sets enforcementType
   */
  @JsonAdapter(EnforcementTypeEnum.Adapter.class)
  public enum EnforcementTypeEnum {
    SOFT("SOFT"),
    
    HARD("HARD");

    private String value;

    EnforcementTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnforcementTypeEnum fromValue(String text) {
      for (EnforcementTypeEnum b : EnforcementTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EnforcementTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnforcementTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnforcementTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EnforcementTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("enforcementType")
  private EnforcementTypeEnum enforcementType = null;

  @SerializedName("id")
  private UUID id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("projectId")
  private String projectId = null;

  @SerializedName("rank")
  private Integer rank = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NOT_ENFORCED("NOT_ENFORCED"),
    
    ENFORCED("ENFORCED"),
    
    CONFLICT("CONFLICT");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  public PolicyDecisionPolicy enforcementType(EnforcementTypeEnum enforcementType) {
    this.enforcementType = enforcementType;
    return this;
  }

   /**
   * Get enforcementType
   * @return enforcementType
  **/
  @ApiModelProperty(value = "")
  public EnforcementTypeEnum getEnforcementType() {
    return enforcementType;
  }

  public void setEnforcementType(EnforcementTypeEnum enforcementType) {
    this.enforcementType = enforcementType;
  }

  public PolicyDecisionPolicy id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public PolicyDecisionPolicy name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PolicyDecisionPolicy projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @ApiModelProperty(value = "")
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }

  public PolicyDecisionPolicy rank(Integer rank) {
    this.rank = rank;
    return this;
  }

   /**
   * Get rank
   * @return rank
  **/
  @ApiModelProperty(value = "")
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }

  public PolicyDecisionPolicy status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyDecisionPolicy policyDecisionPolicy = (PolicyDecisionPolicy) o;
    return Objects.equals(this.enforcementType, policyDecisionPolicy.enforcementType) &&
        Objects.equals(this.id, policyDecisionPolicy.id) &&
        Objects.equals(this.name, policyDecisionPolicy.name) &&
        Objects.equals(this.projectId, policyDecisionPolicy.projectId) &&
        Objects.equals(this.rank, policyDecisionPolicy.rank) &&
        Objects.equals(this.status, policyDecisionPolicy.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enforcementType, id, name, projectId, rank, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyDecisionPolicy {\n");
    
    sb.append("    enforcementType: ").append(toIndentedString(enforcementType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

