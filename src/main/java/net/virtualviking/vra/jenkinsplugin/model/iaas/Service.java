/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.virtualviking.vra.jenkinsplugin.model.iaas;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import net.virtualviking.vra.jenkinsplugin.model.iaas.AuthorizationContext;
import net.virtualviking.vra.jenkinsplugin.model.iaas.OperationProcessingChain;
import net.virtualviking.vra.jenkinsplugin.model.iaas.ServiceDocument;
import net.virtualviking.vra.jenkinsplugin.model.iaas.ServiceHost;

/**
 * Service
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-01T10:54:54.585-04:00")



public class Service {
  @SerializedName("maintenanceIntervalMicros")
  private Long maintenanceIntervalMicros = null;

  /**
   * Gets or Sets processingStage
   */
  @JsonAdapter(ProcessingStageEnum.Adapter.class)
  public enum ProcessingStageEnum {
    CREATED("CREATED"),
    
    INITIALIZING("INITIALIZING"),
    
    LOADING_INITIAL_STATE("LOADING_INITIAL_STATE"),
    
    EXECUTING_CREATE_HANDLER("EXECUTING_CREATE_HANDLER"),
    
    EXECUTING_START_HANDLER("EXECUTING_START_HANDLER"),
    
    INDEXING_INITIAL_STATE("INDEXING_INITIAL_STATE"),
    
    REPLICATE_STATE("REPLICATE_STATE"),
    
    AVAILABLE("AVAILABLE"),
    
    STOPPED("STOPPED");

    private String value;

    ProcessingStageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProcessingStageEnum fromValue(String text) {
      for (ProcessingStageEnum b : ProcessingStageEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ProcessingStageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProcessingStageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProcessingStageEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProcessingStageEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("processingStage")
  private ProcessingStageEnum processingStage = null;

  @SerializedName("systemAuthorizationContext")
  private AuthorizationContext systemAuthorizationContext = null;

  @SerializedName("host")
  private ServiceHost host = null;

  /**
   * Gets or Sets options
   */
  @JsonAdapter(OptionsEnum.Adapter.class)
  public enum OptionsEnum {
    INSTRUMENTATION("INSTRUMENTATION"),
    
    PERIODIC_MAINTENANCE("PERIODIC_MAINTENANCE"),
    
    PERSISTENCE("PERSISTENCE"),
    
    REPLICATION("REPLICATION"),
    
    OWNER_SELECTION("OWNER_SELECTION"),
    
    STRICT_UPDATE_CHECKING("STRICT_UPDATE_CHECKING"),
    
    HTML_USER_INTERFACE("HTML_USER_INTERFACE"),
    
    CONCURRENT_UPDATE_HANDLING("CONCURRENT_UPDATE_HANDLING"),
    
    CONCURRENT_GET_HANDLING("CONCURRENT_GET_HANDLING"),
    
    IDEMPOTENT_POST("IDEMPOTENT_POST"),
    
    ON_DEMAND_LOAD("ON_DEMAND_LOAD"),
    
    IMMUTABLE("IMMUTABLE"),
    
    WRAP_ERROR_RESPONSE("WRAP_ERROR_RESPONSE"),
    
    LIFO_QUEUE("LIFO_QUEUE"),
    
    URI_NAMESPACE_OWNER("URI_NAMESPACE_OWNER"),
    
    CORE("CORE"),
    
    UTILITY("UTILITY"),
    
    FACTORY("FACTORY"),
    
    FACTORY_ITEM("FACTORY_ITEM"),
    
    STATELESS("STATELESS"),
    
    NONE("NONE");

    private String value;

    OptionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptionsEnum fromValue(String text) {
      for (OptionsEnum b : OptionsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OptionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptionsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OptionsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("options")
  private List<OptionsEnum> options = null;

  @SerializedName("cacheClearDelayMicros")
  private Long cacheClearDelayMicros = null;

  @SerializedName("operationProcessingChain")
  private OperationProcessingChain operationProcessingChain = null;

  @SerializedName("uri")
  private String uri = null;

  @SerializedName("documentTemplate")
  private ServiceDocument documentTemplate = null;

  @SerializedName("selfLink")
  private String selfLink = null;

  public Service maintenanceIntervalMicros(Long maintenanceIntervalMicros) {
    this.maintenanceIntervalMicros = maintenanceIntervalMicros;
    return this;
  }

   /**
   * Get maintenanceIntervalMicros
   * @return maintenanceIntervalMicros
  **/
  @ApiModelProperty(value = "")
  public Long getMaintenanceIntervalMicros() {
    return maintenanceIntervalMicros;
  }

  public void setMaintenanceIntervalMicros(Long maintenanceIntervalMicros) {
    this.maintenanceIntervalMicros = maintenanceIntervalMicros;
  }

  public Service processingStage(ProcessingStageEnum processingStage) {
    this.processingStage = processingStage;
    return this;
  }

   /**
   * Get processingStage
   * @return processingStage
  **/
  @ApiModelProperty(value = "")
  public ProcessingStageEnum getProcessingStage() {
    return processingStage;
  }

  public void setProcessingStage(ProcessingStageEnum processingStage) {
    this.processingStage = processingStage;
  }

  public Service systemAuthorizationContext(AuthorizationContext systemAuthorizationContext) {
    this.systemAuthorizationContext = systemAuthorizationContext;
    return this;
  }

   /**
   * Get systemAuthorizationContext
   * @return systemAuthorizationContext
  **/
  @ApiModelProperty(value = "")
  public AuthorizationContext getSystemAuthorizationContext() {
    return systemAuthorizationContext;
  }

  public void setSystemAuthorizationContext(AuthorizationContext systemAuthorizationContext) {
    this.systemAuthorizationContext = systemAuthorizationContext;
  }

  public Service host(ServiceHost host) {
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @ApiModelProperty(value = "")
  public ServiceHost getHost() {
    return host;
  }

  public void setHost(ServiceHost host) {
    this.host = host;
  }

  public Service options(List<OptionsEnum> options) {
    this.options = options;
    return this;
  }

  public Service addOptionsItem(OptionsEnum optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<OptionsEnum>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @ApiModelProperty(value = "")
  public List<OptionsEnum> getOptions() {
    return options;
  }

  public void setOptions(List<OptionsEnum> options) {
    this.options = options;
  }

  public Service cacheClearDelayMicros(Long cacheClearDelayMicros) {
    this.cacheClearDelayMicros = cacheClearDelayMicros;
    return this;
  }

   /**
   * Get cacheClearDelayMicros
   * @return cacheClearDelayMicros
  **/
  @ApiModelProperty(value = "")
  public Long getCacheClearDelayMicros() {
    return cacheClearDelayMicros;
  }

  public void setCacheClearDelayMicros(Long cacheClearDelayMicros) {
    this.cacheClearDelayMicros = cacheClearDelayMicros;
  }

  public Service operationProcessingChain(OperationProcessingChain operationProcessingChain) {
    this.operationProcessingChain = operationProcessingChain;
    return this;
  }

   /**
   * Get operationProcessingChain
   * @return operationProcessingChain
  **/
  @ApiModelProperty(value = "")
  public OperationProcessingChain getOperationProcessingChain() {
    return operationProcessingChain;
  }

  public void setOperationProcessingChain(OperationProcessingChain operationProcessingChain) {
    this.operationProcessingChain = operationProcessingChain;
  }

  public Service uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * Get uri
   * @return uri
  **/
  @ApiModelProperty(value = "")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public Service documentTemplate(ServiceDocument documentTemplate) {
    this.documentTemplate = documentTemplate;
    return this;
  }

   /**
   * Get documentTemplate
   * @return documentTemplate
  **/
  @ApiModelProperty(value = "")
  public ServiceDocument getDocumentTemplate() {
    return documentTemplate;
  }

  public void setDocumentTemplate(ServiceDocument documentTemplate) {
    this.documentTemplate = documentTemplate;
  }

  public Service selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

   /**
   * Get selfLink
   * @return selfLink
  **/
  @ApiModelProperty(value = "")
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Service service = (Service) o;
    return Objects.equals(this.maintenanceIntervalMicros, service.maintenanceIntervalMicros) &&
        Objects.equals(this.processingStage, service.processingStage) &&
        Objects.equals(this.systemAuthorizationContext, service.systemAuthorizationContext) &&
        Objects.equals(this.host, service.host) &&
        Objects.equals(this.options, service.options) &&
        Objects.equals(this.cacheClearDelayMicros, service.cacheClearDelayMicros) &&
        Objects.equals(this.operationProcessingChain, service.operationProcessingChain) &&
        Objects.equals(this.uri, service.uri) &&
        Objects.equals(this.documentTemplate, service.documentTemplate) &&
        Objects.equals(this.selfLink, service.selfLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maintenanceIntervalMicros, processingStage, systemAuthorizationContext, host, options, cacheClearDelayMicros, operationProcessingChain, uri, documentTemplate, selfLink);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Service {\n");
    
    sb.append("    maintenanceIntervalMicros: ").append(toIndentedString(maintenanceIntervalMicros)).append("\n");
    sb.append("    processingStage: ").append(toIndentedString(processingStage)).append("\n");
    sb.append("    systemAuthorizationContext: ").append(toIndentedString(systemAuthorizationContext)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    cacheClearDelayMicros: ").append(toIndentedString(cacheClearDelayMicros)).append("\n");
    sb.append("    operationProcessingChain: ").append(toIndentedString(operationProcessingChain)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    documentTemplate: ").append(toIndentedString(documentTemplate)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

