/*
 * VMware Cloud Assembly Blueprint API
 * A multi-cloud Blueprint API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-09-12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.virtualviking.vra.jenkinsplugin.model.blueprint;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * BlueprintPlanTask
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-08-31T20:41:57.276-04:00")



public class BlueprintPlanTask {
  @SerializedName("dependsOnTasks")
  private List<String> dependsOnTasks = null;

  @SerializedName("inputProperties")
  private Object inputProperties = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("resourceName")
  private String resourceName = null;

  /**
   * Resource reason
   */
  @JsonAdapter(ResourceReasonEnum.Adapter.class)
  public enum ResourceReasonEnum {
    CREATE("CREATE"),
    
    RECREATE("RECREATE"),
    
    UPDATE("UPDATE"),
    
    DELETE("DELETE"),
    
    ACTION("ACTION"),
    
    READ("READ");

    private String value;

    ResourceReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceReasonEnum fromValue(String text) {
      for (ResourceReasonEnum b : ResourceReasonEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ResourceReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ResourceReasonEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("resourceReason")
  private ResourceReasonEnum resourceReason = null;

  @SerializedName("resourceType")
  private String resourceType = null;

   /**
   * Tasks depends on other tasks
   * @return dependsOnTasks
  **/
  @ApiModelProperty(value = "Tasks depends on other tasks")
  public List<String> getDependsOnTasks() {
    return dependsOnTasks;
  }

   /**
   * Task input properties
   * @return inputProperties
  **/
  @ApiModelProperty(value = "Task input properties")
  public Object getInputProperties() {
    return inputProperties;
  }

   /**
   * Task name
   * @return name
  **/
  @ApiModelProperty(value = "Task name")
  public String getName() {
    return name;
  }

   /**
   * Resource name
   * @return resourceName
  **/
  @ApiModelProperty(value = "Resource name")
  public String getResourceName() {
    return resourceName;
  }

   /**
   * Resource reason
   * @return resourceReason
  **/
  @ApiModelProperty(value = "Resource reason")
  public ResourceReasonEnum getResourceReason() {
    return resourceReason;
  }

   /**
   * Resource type
   * @return resourceType
  **/
  @ApiModelProperty(value = "Resource type")
  public String getResourceType() {
    return resourceType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintPlanTask blueprintPlanTask = (BlueprintPlanTask) o;
    return Objects.equals(this.dependsOnTasks, blueprintPlanTask.dependsOnTasks) &&
        Objects.equals(this.inputProperties, blueprintPlanTask.inputProperties) &&
        Objects.equals(this.name, blueprintPlanTask.name) &&
        Objects.equals(this.resourceName, blueprintPlanTask.resourceName) &&
        Objects.equals(this.resourceReason, blueprintPlanTask.resourceReason) &&
        Objects.equals(this.resourceType, blueprintPlanTask.resourceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dependsOnTasks, inputProperties, name, resourceName, resourceReason, resourceType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintPlanTask {\n");
    
    sb.append("    dependsOnTasks: ").append(toIndentedString(dependsOnTasks)).append("\n");
    sb.append("    inputProperties: ").append(toIndentedString(inputProperties)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    resourceReason: ").append(toIndentedString(resourceReason)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

