/*
 * VMware Service Broker API
 * A multi-cloud API for Cloud Automation Services
 *
 * OpenAPI spec version: 2020-08-25
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.virtualviking.vra.jenkinsplugin.model.catalog;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

/**
 * Represents a source of templates from which Catalog Items can be created
 */
@ApiModel(description = "Represents a source of templates from which Catalog Items can be created")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-01T09:23:54.867-04:00")



public class CatalogSource {
  @SerializedName("config")
  private Object config = null;

  @SerializedName("createdAt")
  private Date createdAt = null;

  @SerializedName("createdBy")
  private String createdBy = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("global")
  private Boolean global = null;

  @SerializedName("iconId")
  private UUID iconId = null;

  @SerializedName("id")
  private UUID id = null;

  @SerializedName("itemsFound")
  private Integer itemsFound = null;

  @SerializedName("itemsImported")
  private Integer itemsImported = null;

  @SerializedName("lastImportCompletedAt")
  private Date lastImportCompletedAt = null;

  @SerializedName("lastImportErrors")
  private List<String> lastImportErrors = null;

  @SerializedName("lastImportStartedAt")
  private Date lastImportStartedAt = null;

  @SerializedName("lastUpdatedAt")
  private Date lastUpdatedAt = null;

  @SerializedName("lastUpdatedBy")
  private String lastUpdatedBy = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("projectId")
  private String projectId = null;

  @SerializedName("typeId")
  private String typeId = null;

  public CatalogSource config(Object config) {
    this.config = config;
    return this;
  }

   /**
   * Source custom configuration
   * @return config
  **/
  @ApiModelProperty(required = true, value = "Source custom configuration")
  public Object getConfig() {
    return config;
  }

  public void setConfig(Object config) {
    this.config = config;
  }

  public CatalogSource createdAt(Date createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Creation time
   * @return createdAt
  **/
  @ApiModelProperty(value = "Creation time")
  public Date getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  public CatalogSource createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Created By
   * @return createdBy
  **/
  @ApiModelProperty(value = "Created By")
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }

  public CatalogSource description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Catalog Source description
   * @return description
  **/
  @ApiModelProperty(value = "Catalog Source description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CatalogSource global(Boolean global) {
    this.global = global;
    return this;
  }

   /**
   * Global flag indicating that all the items can be requested across all projects.
   * @return global
  **/
  @ApiModelProperty(value = "Global flag indicating that all the items can be requested across all projects.")
  public Boolean isGlobal() {
    return global;
  }

  public void setGlobal(Boolean global) {
    this.global = global;
  }

  public CatalogSource iconId(UUID iconId) {
    this.iconId = iconId;
    return this;
  }

   /**
   * Default Icon Id
   * @return iconId
  **/
  @ApiModelProperty(value = "Default Icon Id")
  public UUID getIconId() {
    return iconId;
  }

  public void setIconId(UUID iconId) {
    this.iconId = iconId;
  }

  public CatalogSource id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Catalog Source id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Catalog Source id")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public CatalogSource itemsFound(Integer itemsFound) {
    this.itemsFound = itemsFound;
    return this;
  }

   /**
   * Number of items found
   * @return itemsFound
  **/
  @ApiModelProperty(value = "Number of items found")
  public Integer getItemsFound() {
    return itemsFound;
  }

  public void setItemsFound(Integer itemsFound) {
    this.itemsFound = itemsFound;
  }

  public CatalogSource itemsImported(Integer itemsImported) {
    this.itemsImported = itemsImported;
    return this;
  }

   /**
   * Number of items imported.
   * @return itemsImported
  **/
  @ApiModelProperty(value = "Number of items imported.")
  public Integer getItemsImported() {
    return itemsImported;
  }

  public void setItemsImported(Integer itemsImported) {
    this.itemsImported = itemsImported;
  }

  public CatalogSource lastImportCompletedAt(Date lastImportCompletedAt) {
    this.lastImportCompletedAt = lastImportCompletedAt;
    return this;
  }

   /**
   * Last import completion time
   * @return lastImportCompletedAt
  **/
  @ApiModelProperty(value = "Last import completion time")
  public Date getLastImportCompletedAt() {
    return lastImportCompletedAt;
  }

  public void setLastImportCompletedAt(Date lastImportCompletedAt) {
    this.lastImportCompletedAt = lastImportCompletedAt;
  }

  public CatalogSource lastImportErrors(List<String> lastImportErrors) {
    this.lastImportErrors = lastImportErrors;
    return this;
  }

  public CatalogSource addLastImportErrorsItem(String lastImportErrorsItem) {
    if (this.lastImportErrors == null) {
      this.lastImportErrors = new ArrayList<String>();
    }
    this.lastImportErrors.add(lastImportErrorsItem);
    return this;
  }

   /**
   * Last import error(s)
   * @return lastImportErrors
  **/
  @ApiModelProperty(value = "Last import error(s)")
  public List<String> getLastImportErrors() {
    return lastImportErrors;
  }

  public void setLastImportErrors(List<String> lastImportErrors) {
    this.lastImportErrors = lastImportErrors;
  }

  public CatalogSource lastImportStartedAt(Date lastImportStartedAt) {
    this.lastImportStartedAt = lastImportStartedAt;
    return this;
  }

   /**
   * Last import start time
   * @return lastImportStartedAt
  **/
  @ApiModelProperty(value = "Last import start time")
  public Date getLastImportStartedAt() {
    return lastImportStartedAt;
  }

  public void setLastImportStartedAt(Date lastImportStartedAt) {
    this.lastImportStartedAt = lastImportStartedAt;
  }

  public CatalogSource lastUpdatedAt(Date lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

   /**
   * Update time
   * @return lastUpdatedAt
  **/
  @ApiModelProperty(value = "Update time")
  public Date getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(Date lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }

  public CatalogSource lastUpdatedBy(String lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
    return this;
  }

   /**
   * Updated By
   * @return lastUpdatedBy
  **/
  @ApiModelProperty(value = "Updated By")
  public String getLastUpdatedBy() {
    return lastUpdatedBy;
  }

  public void setLastUpdatedBy(String lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
  }

  public CatalogSource name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Catalog Source name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Catalog Source name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CatalogSource projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Project id where the source belongs
   * @return projectId
  **/
  @ApiModelProperty(value = "Project id where the source belongs")
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }

  public CatalogSource typeId(String typeId) {
    this.typeId = typeId;
    return this;
  }

   /**
   * Type of source, e.g. blueprint, CFT... etc
   * @return typeId
  **/
  @ApiModelProperty(required = true, value = "Type of source, e.g. blueprint, CFT... etc")
  public String getTypeId() {
    return typeId;
  }

  public void setTypeId(String typeId) {
    this.typeId = typeId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogSource catalogSource = (CatalogSource) o;
    return Objects.equals(this.config, catalogSource.config) &&
        Objects.equals(this.createdAt, catalogSource.createdAt) &&
        Objects.equals(this.createdBy, catalogSource.createdBy) &&
        Objects.equals(this.description, catalogSource.description) &&
        Objects.equals(this.global, catalogSource.global) &&
        Objects.equals(this.iconId, catalogSource.iconId) &&
        Objects.equals(this.id, catalogSource.id) &&
        Objects.equals(this.itemsFound, catalogSource.itemsFound) &&
        Objects.equals(this.itemsImported, catalogSource.itemsImported) &&
        Objects.equals(this.lastImportCompletedAt, catalogSource.lastImportCompletedAt) &&
        Objects.equals(this.lastImportErrors, catalogSource.lastImportErrors) &&
        Objects.equals(this.lastImportStartedAt, catalogSource.lastImportStartedAt) &&
        Objects.equals(this.lastUpdatedAt, catalogSource.lastUpdatedAt) &&
        Objects.equals(this.lastUpdatedBy, catalogSource.lastUpdatedBy) &&
        Objects.equals(this.name, catalogSource.name) &&
        Objects.equals(this.projectId, catalogSource.projectId) &&
        Objects.equals(this.typeId, catalogSource.typeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, createdAt, createdBy, description, global, iconId, id, itemsFound, itemsImported, lastImportCompletedAt, lastImportErrors, lastImportStartedAt, lastUpdatedAt, lastUpdatedBy, name, projectId, typeId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogSource {\n");
    
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    global: ").append(toIndentedString(global)).append("\n");
    sb.append("    iconId: ").append(toIndentedString(iconId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    itemsFound: ").append(toIndentedString(itemsFound)).append("\n");
    sb.append("    itemsImported: ").append(toIndentedString(itemsImported)).append("\n");
    sb.append("    lastImportCompletedAt: ").append(toIndentedString(lastImportCompletedAt)).append("\n");
    sb.append("    lastImportErrors: ").append(toIndentedString(lastImportErrors)).append("\n");
    sb.append("    lastImportStartedAt: ").append(toIndentedString(lastImportStartedAt)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    lastUpdatedBy: ").append(toIndentedString(lastUpdatedBy)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

