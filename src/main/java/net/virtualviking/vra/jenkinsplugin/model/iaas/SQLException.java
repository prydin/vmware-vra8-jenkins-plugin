/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.virtualviking.vra.jenkinsplugin.model.iaas;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import net.virtualviking.vra.jenkinsplugin.model.iaas.SQLException;
import net.virtualviking.vra.jenkinsplugin.model.iaas.StackTraceElement;
import net.virtualviking.vra.jenkinsplugin.model.iaas.Throwable;

/**
 * SQLException
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-01T10:54:54.585-04:00")



public class SQLException {
  @SerializedName("localizedMessage")
  private String localizedMessage = null;

  @SerializedName("cause")
  private Throwable cause = null;

  @SerializedName("errorCode")
  private Integer errorCode = null;

  @SerializedName("stackTrace")
  private List<StackTraceElement> stackTrace = null;

  @SerializedName("suppressed")
  private List<Throwable> suppressed = null;

  @SerializedName("nextException")
  private SQLException nextException = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("sqlstate")
  private String sqlstate = null;

  public SQLException localizedMessage(String localizedMessage) {
    this.localizedMessage = localizedMessage;
    return this;
  }

   /**
   * Get localizedMessage
   * @return localizedMessage
  **/
  @ApiModelProperty(value = "")
  public String getLocalizedMessage() {
    return localizedMessage;
  }

  public void setLocalizedMessage(String localizedMessage) {
    this.localizedMessage = localizedMessage;
  }

  public SQLException cause(Throwable cause) {
    this.cause = cause;
    return this;
  }

   /**
   * Get cause
   * @return cause
  **/
  @ApiModelProperty(value = "")
  public Throwable getCause() {
    return cause;
  }

  public void setCause(Throwable cause) {
    this.cause = cause;
  }

  public SQLException errorCode(Integer errorCode) {
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Get errorCode
   * @return errorCode
  **/
  @ApiModelProperty(value = "")
  public Integer getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(Integer errorCode) {
    this.errorCode = errorCode;
  }

  public SQLException stackTrace(List<StackTraceElement> stackTrace) {
    this.stackTrace = stackTrace;
    return this;
  }

  public SQLException addStackTraceItem(StackTraceElement stackTraceItem) {
    if (this.stackTrace == null) {
      this.stackTrace = new ArrayList<StackTraceElement>();
    }
    this.stackTrace.add(stackTraceItem);
    return this;
  }

   /**
   * Get stackTrace
   * @return stackTrace
  **/
  @ApiModelProperty(value = "")
  public List<StackTraceElement> getStackTrace() {
    return stackTrace;
  }

  public void setStackTrace(List<StackTraceElement> stackTrace) {
    this.stackTrace = stackTrace;
  }

  public SQLException suppressed(List<Throwable> suppressed) {
    this.suppressed = suppressed;
    return this;
  }

  public SQLException addSuppressedItem(Throwable suppressedItem) {
    if (this.suppressed == null) {
      this.suppressed = new ArrayList<Throwable>();
    }
    this.suppressed.add(suppressedItem);
    return this;
  }

   /**
   * Get suppressed
   * @return suppressed
  **/
  @ApiModelProperty(value = "")
  public List<Throwable> getSuppressed() {
    return suppressed;
  }

  public void setSuppressed(List<Throwable> suppressed) {
    this.suppressed = suppressed;
  }

  public SQLException nextException(SQLException nextException) {
    this.nextException = nextException;
    return this;
  }

   /**
   * Get nextException
   * @return nextException
  **/
  @ApiModelProperty(value = "")
  public SQLException getNextException() {
    return nextException;
  }

  public void setNextException(SQLException nextException) {
    this.nextException = nextException;
  }

  public SQLException message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @ApiModelProperty(value = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public SQLException sqlstate(String sqlstate) {
    this.sqlstate = sqlstate;
    return this;
  }

   /**
   * Get sqlstate
   * @return sqlstate
  **/
  @ApiModelProperty(value = "")
  public String getSqlstate() {
    return sqlstate;
  }

  public void setSqlstate(String sqlstate) {
    this.sqlstate = sqlstate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SQLException sqLException = (SQLException) o;
    return Objects.equals(this.localizedMessage, sqLException.localizedMessage) &&
        Objects.equals(this.cause, sqLException.cause) &&
        Objects.equals(this.errorCode, sqLException.errorCode) &&
        Objects.equals(this.stackTrace, sqLException.stackTrace) &&
        Objects.equals(this.suppressed, sqLException.suppressed) &&
        Objects.equals(this.nextException, sqLException.nextException) &&
        Objects.equals(this.message, sqLException.message) &&
        Objects.equals(this.sqlstate, sqLException.sqlstate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localizedMessage, cause, errorCode, stackTrace, suppressed, nextException, message, sqlstate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SQLException {\n");
    
    sb.append("    localizedMessage: ").append(toIndentedString(localizedMessage)).append("\n");
    sb.append("    cause: ").append(toIndentedString(cause)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    stackTrace: ").append(toIndentedString(stackTrace)).append("\n");
    sb.append("    suppressed: ").append(toIndentedString(suppressed)).append("\n");
    sb.append("    nextException: ").append(toIndentedString(nextException)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    sqlstate: ").append(toIndentedString(sqlstate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

