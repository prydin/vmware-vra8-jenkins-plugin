/*
 * VMware Cloud Assembly Blueprint API
 * A multi-cloud Blueprint API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-09-12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.virtualviking.vra.jenkinsplugin.model.blueprint;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import net.virtualviking.vra.jenkinsplugin.model.blueprint.BlueprintValidationMessage;

/**
 * Blueprint
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-08-31T20:41:57.276-04:00")



public class Blueprint {
  @SerializedName("content")
  private String content = null;

  @SerializedName("contentSourceId")
  private String contentSourceId = null;

  @SerializedName("contentSourcePath")
  private String contentSourcePath = null;

  @SerializedName("contentSourceSyncAt")
  private Date contentSourceSyncAt = null;

  @SerializedName("contentSourceSyncMessages")
  private List<String> contentSourceSyncMessages = null;

  /**
   * Content source last sync status
   */
  @JsonAdapter(ContentSourceSyncStatusEnum.Adapter.class)
  public enum ContentSourceSyncStatusEnum {
    SUCCESSFUL("SUCCESSFUL"),
    
    FAILED("FAILED");

    private String value;

    ContentSourceSyncStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentSourceSyncStatusEnum fromValue(String text) {
      for (ContentSourceSyncStatusEnum b : ContentSourceSyncStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ContentSourceSyncStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentSourceSyncStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentSourceSyncStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ContentSourceSyncStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("contentSourceSyncStatus")
  private ContentSourceSyncStatusEnum contentSourceSyncStatus = null;

  @SerializedName("contentSourceType")
  private String contentSourceType = null;

  @SerializedName("createdAt")
  private Date createdAt = null;

  @SerializedName("createdBy")
  private String createdBy = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("orgId")
  private String orgId = null;

  @SerializedName("projectId")
  private String projectId = null;

  @SerializedName("projectName")
  private String projectName = null;

  @SerializedName("requestScopeOrg")
  private Boolean requestScopeOrg = null;

  @SerializedName("selfLink")
  private String selfLink = null;

  /**
   * Blueprint status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DRAFT("DRAFT"),
    
    VERSIONED("VERSIONED"),
    
    RELEASED("RELEASED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("totalReleasedVersions")
  private Integer totalReleasedVersions = null;

  @SerializedName("totalVersions")
  private Integer totalVersions = null;

  @SerializedName("updatedAt")
  private Date updatedAt = null;

  @SerializedName("updatedBy")
  private String updatedBy = null;

  @SerializedName("valid")
  private Boolean valid = null;

  @SerializedName("validationMessages")
  private List<BlueprintValidationMessage> validationMessages = null;

  public Blueprint content(String content) {
    this.content = content;
    return this;
  }

   /**
   * Blueprint YAML content
   * @return content
  **/
  @ApiModelProperty(value = "Blueprint YAML content")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

   /**
   * Content source id
   * @return contentSourceId
  **/
  @ApiModelProperty(value = "Content source id")
  public String getContentSourceId() {
    return contentSourceId;
  }

   /**
   * Content source path
   * @return contentSourcePath
  **/
  @ApiModelProperty(value = "Content source path")
  public String getContentSourcePath() {
    return contentSourcePath;
  }

   /**
   * Content source last sync time
   * @return contentSourceSyncAt
  **/
  @ApiModelProperty(value = "Content source last sync time")
  public Date getContentSourceSyncAt() {
    return contentSourceSyncAt;
  }

   /**
   * Content source last sync messages
   * @return contentSourceSyncMessages
  **/
  @ApiModelProperty(value = "Content source last sync messages")
  public List<String> getContentSourceSyncMessages() {
    return contentSourceSyncMessages;
  }

   /**
   * Content source last sync status
   * @return contentSourceSyncStatus
  **/
  @ApiModelProperty(value = "Content source last sync status")
  public ContentSourceSyncStatusEnum getContentSourceSyncStatus() {
    return contentSourceSyncStatus;
  }

   /**
   * Content source type
   * @return contentSourceType
  **/
  @ApiModelProperty(value = "Content source type")
  public String getContentSourceType() {
    return contentSourceType;
  }

   /**
   * Created time
   * @return createdAt
  **/
  @ApiModelProperty(value = "Created time")
  public Date getCreatedAt() {
    return createdAt;
  }

   /**
   * Created by
   * @return createdBy
  **/
  @ApiModelProperty(value = "Created by")
  public String getCreatedBy() {
    return createdBy;
  }

  public Blueprint description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Blueprint description
   * @return description
  **/
  @ApiModelProperty(value = "Blueprint description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

   /**
   * Object ID
   * @return id
  **/
  @ApiModelProperty(value = "Object ID")
  public String getId() {
    return id;
  }

  public Blueprint name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Blueprint name
   * @return name
  **/
  @ApiModelProperty(value = "Blueprint name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

   /**
   * Org ID
   * @return orgId
  **/
  @ApiModelProperty(value = "Org ID")
  public String getOrgId() {
    return orgId;
  }

  public Blueprint projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Project ID
   * @return projectId
  **/
  @ApiModelProperty(value = "Project ID")
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }

   /**
   * Project Name
   * @return projectName
  **/
  @ApiModelProperty(value = "Project Name")
  public String getProjectName() {
    return projectName;
  }

  public Blueprint requestScopeOrg(Boolean requestScopeOrg) {
    this.requestScopeOrg = requestScopeOrg;
    return this;
  }

   /**
   * Flag to indicate blueprint can be requested from any project in org
   * @return requestScopeOrg
  **/
  @ApiModelProperty(value = "Flag to indicate blueprint can be requested from any project in org")
  public Boolean isRequestScopeOrg() {
    return requestScopeOrg;
  }

  public void setRequestScopeOrg(Boolean requestScopeOrg) {
    this.requestScopeOrg = requestScopeOrg;
  }

   /**
   * Blueprint self link
   * @return selfLink
  **/
  @ApiModelProperty(value = "Blueprint self link")
  public String getSelfLink() {
    return selfLink;
  }

   /**
   * Blueprint status
   * @return status
  **/
  @ApiModelProperty(value = "Blueprint status")
  public StatusEnum getStatus() {
    return status;
  }

   /**
   * Total released versions
   * @return totalReleasedVersions
  **/
  @ApiModelProperty(value = "Total released versions")
  public Integer getTotalReleasedVersions() {
    return totalReleasedVersions;
  }

   /**
   * Total versions
   * @return totalVersions
  **/
  @ApiModelProperty(value = "Total versions")
  public Integer getTotalVersions() {
    return totalVersions;
  }

   /**
   * Updated time
   * @return updatedAt
  **/
  @ApiModelProperty(value = "Updated time")
  public Date getUpdatedAt() {
    return updatedAt;
  }

   /**
   * Updated by
   * @return updatedBy
  **/
  @ApiModelProperty(value = "Updated by")
  public String getUpdatedBy() {
    return updatedBy;
  }

   /**
   * Validation result on update
   * @return valid
  **/
  @ApiModelProperty(value = "Validation result on update")
  public Boolean isValid() {
    return valid;
  }

   /**
   * Validation messages
   * @return validationMessages
  **/
  @ApiModelProperty(value = "Validation messages")
  public List<BlueprintValidationMessage> getValidationMessages() {
    return validationMessages;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Blueprint blueprint = (Blueprint) o;
    return Objects.equals(this.content, blueprint.content) &&
        Objects.equals(this.contentSourceId, blueprint.contentSourceId) &&
        Objects.equals(this.contentSourcePath, blueprint.contentSourcePath) &&
        Objects.equals(this.contentSourceSyncAt, blueprint.contentSourceSyncAt) &&
        Objects.equals(this.contentSourceSyncMessages, blueprint.contentSourceSyncMessages) &&
        Objects.equals(this.contentSourceSyncStatus, blueprint.contentSourceSyncStatus) &&
        Objects.equals(this.contentSourceType, blueprint.contentSourceType) &&
        Objects.equals(this.createdAt, blueprint.createdAt) &&
        Objects.equals(this.createdBy, blueprint.createdBy) &&
        Objects.equals(this.description, blueprint.description) &&
        Objects.equals(this.id, blueprint.id) &&
        Objects.equals(this.name, blueprint.name) &&
        Objects.equals(this.orgId, blueprint.orgId) &&
        Objects.equals(this.projectId, blueprint.projectId) &&
        Objects.equals(this.projectName, blueprint.projectName) &&
        Objects.equals(this.requestScopeOrg, blueprint.requestScopeOrg) &&
        Objects.equals(this.selfLink, blueprint.selfLink) &&
        Objects.equals(this.status, blueprint.status) &&
        Objects.equals(this.totalReleasedVersions, blueprint.totalReleasedVersions) &&
        Objects.equals(this.totalVersions, blueprint.totalVersions) &&
        Objects.equals(this.updatedAt, blueprint.updatedAt) &&
        Objects.equals(this.updatedBy, blueprint.updatedBy) &&
        Objects.equals(this.valid, blueprint.valid) &&
        Objects.equals(this.validationMessages, blueprint.validationMessages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, contentSourceId, contentSourcePath, contentSourceSyncAt, contentSourceSyncMessages, contentSourceSyncStatus, contentSourceType, createdAt, createdBy, description, id, name, orgId, projectId, projectName, requestScopeOrg, selfLink, status, totalReleasedVersions, totalVersions, updatedAt, updatedBy, valid, validationMessages);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Blueprint {\n");
    
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentSourceId: ").append(toIndentedString(contentSourceId)).append("\n");
    sb.append("    contentSourcePath: ").append(toIndentedString(contentSourcePath)).append("\n");
    sb.append("    contentSourceSyncAt: ").append(toIndentedString(contentSourceSyncAt)).append("\n");
    sb.append("    contentSourceSyncMessages: ").append(toIndentedString(contentSourceSyncMessages)).append("\n");
    sb.append("    contentSourceSyncStatus: ").append(toIndentedString(contentSourceSyncStatus)).append("\n");
    sb.append("    contentSourceType: ").append(toIndentedString(contentSourceType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    requestScopeOrg: ").append(toIndentedString(requestScopeOrg)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totalReleasedVersions: ").append(toIndentedString(totalReleasedVersions)).append("\n");
    sb.append("    totalVersions: ").append(toIndentedString(totalVersions)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("    validationMessages: ").append(toIndentedString(validationMessages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

