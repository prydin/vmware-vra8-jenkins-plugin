/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.virtualviking.vra.jenkinsplugin.model.iaas;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Load balancer health check configuration.
 */
@ApiModel(description = "Load balancer health check configuration.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-01T10:54:54.585-04:00")



public class HealthCheckConfiguration {
  @SerializedName("protocol")
  private String protocol = null;

  @SerializedName("port")
  private String port = null;

  @SerializedName("timeoutSeconds")
  private Integer timeoutSeconds = null;

  @SerializedName("unhealthyThreshold")
  private Integer unhealthyThreshold = null;

  @SerializedName("healthyThreshold")
  private Integer healthyThreshold = null;

  @SerializedName("urlPath")
  private String urlPath = null;

  @SerializedName("intervalSeconds")
  private Integer intervalSeconds = null;

  public HealthCheckConfiguration protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * The protocol used for the health check.
   * @return protocol
  **/
  @ApiModelProperty(example = "HTTP, HTTPS", required = true, value = "The protocol used for the health check.")
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }

  public HealthCheckConfiguration port(String port) {
    this.port = port;
    return this;
  }

   /**
   * Port on the back-end instance machine to use for the health check.
   * @return port
  **/
  @ApiModelProperty(example = "80", required = true, value = "Port on the back-end instance machine to use for the health check.")
  public String getPort() {
    return port;
  }

  public void setPort(String port) {
    this.port = port;
  }

  public HealthCheckConfiguration timeoutSeconds(Integer timeoutSeconds) {
    this.timeoutSeconds = timeoutSeconds;
    return this;
  }

   /**
   * Timeout (in seconds) to wait for a response from the back-end instance.
   * @return timeoutSeconds
  **/
  @ApiModelProperty(example = "5", value = "Timeout (in seconds) to wait for a response from the back-end instance.")
  public Integer getTimeoutSeconds() {
    return timeoutSeconds;
  }

  public void setTimeoutSeconds(Integer timeoutSeconds) {
    this.timeoutSeconds = timeoutSeconds;
  }

  public HealthCheckConfiguration unhealthyThreshold(Integer unhealthyThreshold) {
    this.unhealthyThreshold = unhealthyThreshold;
    return this;
  }

   /**
   * Number of consecutive check failures before considering a particular back-end instance as unhealthy.
   * @return unhealthyThreshold
  **/
  @ApiModelProperty(example = "5", value = "Number of consecutive check failures before considering a particular back-end instance as unhealthy.")
  public Integer getUnhealthyThreshold() {
    return unhealthyThreshold;
  }

  public void setUnhealthyThreshold(Integer unhealthyThreshold) {
    this.unhealthyThreshold = unhealthyThreshold;
  }

  public HealthCheckConfiguration healthyThreshold(Integer healthyThreshold) {
    this.healthyThreshold = healthyThreshold;
    return this;
  }

   /**
   * Number of consecutive successful checks before considering a particular back-end instance as healthy.
   * @return healthyThreshold
  **/
  @ApiModelProperty(example = "2", value = "Number of consecutive successful checks before considering a particular back-end instance as healthy.")
  public Integer getHealthyThreshold() {
    return healthyThreshold;
  }

  public void setHealthyThreshold(Integer healthyThreshold) {
    this.healthyThreshold = healthyThreshold;
  }

  public HealthCheckConfiguration urlPath(String urlPath) {
    this.urlPath = urlPath;
    return this;
  }

   /**
   * URL path on the back-end instance against which a request will be performed for the health check. Useful when the health check protocol is HTTP/HTTPS.
   * @return urlPath
  **/
  @ApiModelProperty(example = "/index.html", value = "URL path on the back-end instance against which a request will be performed for the health check. Useful when the health check protocol is HTTP/HTTPS.")
  public String getUrlPath() {
    return urlPath;
  }

  public void setUrlPath(String urlPath) {
    this.urlPath = urlPath;
  }

  public HealthCheckConfiguration intervalSeconds(Integer intervalSeconds) {
    this.intervalSeconds = intervalSeconds;
    return this;
  }

   /**
   * Interval (in seconds) at which the health checks will be performed.
   * @return intervalSeconds
  **/
  @ApiModelProperty(example = "60", value = "Interval (in seconds) at which the health checks will be performed.")
  public Integer getIntervalSeconds() {
    return intervalSeconds;
  }

  public void setIntervalSeconds(Integer intervalSeconds) {
    this.intervalSeconds = intervalSeconds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthCheckConfiguration healthCheckConfiguration = (HealthCheckConfiguration) o;
    return Objects.equals(this.protocol, healthCheckConfiguration.protocol) &&
        Objects.equals(this.port, healthCheckConfiguration.port) &&
        Objects.equals(this.timeoutSeconds, healthCheckConfiguration.timeoutSeconds) &&
        Objects.equals(this.unhealthyThreshold, healthCheckConfiguration.unhealthyThreshold) &&
        Objects.equals(this.healthyThreshold, healthCheckConfiguration.healthyThreshold) &&
        Objects.equals(this.urlPath, healthCheckConfiguration.urlPath) &&
        Objects.equals(this.intervalSeconds, healthCheckConfiguration.intervalSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(protocol, port, timeoutSeconds, unhealthyThreshold, healthyThreshold, urlPath, intervalSeconds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthCheckConfiguration {\n");
    
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    timeoutSeconds: ").append(toIndentedString(timeoutSeconds)).append("\n");
    sb.append("    unhealthyThreshold: ").append(toIndentedString(unhealthyThreshold)).append("\n");
    sb.append("    healthyThreshold: ").append(toIndentedString(healthyThreshold)).append("\n");
    sb.append("    urlPath: ").append(toIndentedString(urlPath)).append("\n");
    sb.append("    intervalSeconds: ").append(toIndentedString(intervalSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

