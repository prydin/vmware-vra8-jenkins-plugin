/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.virtualviking.vra.jenkinsplugin.model.iaas;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Represents a specification for machine&#39;s remote access settings.
 */
@ApiModel(description = "Represents a specification for machine's remote access settings.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-01T10:54:54.585-04:00")



public class RemoteAccessSpecification {
  @SerializedName("password")
  private String password = null;

  @SerializedName("sshKey")
  private String sshKey = null;

  @SerializedName("keyPair")
  private String keyPair = null;

  @SerializedName("authentication")
  private String authentication = null;

  @SerializedName("username")
  private String username = null;

  public RemoteAccessSpecification password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Remote access password for the Azure machine.
   * @return password
  **/
  @ApiModelProperty(value = "Remote access password for the Azure machine.")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public RemoteAccessSpecification sshKey(String sshKey) {
    this.sshKey = sshKey;
    return this;
  }

   /**
   * In key pair authentication, the public key on the provisioned machine. Users are expected to log in with their private key and a default username from the cloud provider. An AWS Ubuntu image comes with default user ubuntu, and Azure comes with default user azureuser. To log in by SSH: &#x60;ssh -i &lt;private-key-path&gt; ubuntu@52.90.80.153&#x60; &#x60;ssh -i &lt;private-key-path&gt; azureuser@40.76.14.255&#x60;
   * @return sshKey
  **/
  @ApiModelProperty(example = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCu74dLkAGGYIgNuszEAM0HaS2Y6boTPw+HqsFmtPSOpxPQoosws/OWGZlW1uue6Y4lIvdRqZOaLK+2di5512etY67ZwFHc5h1kx4az433DsnoZhIzXEKKI+EXfH/w72CIyG/uVhIzmA4FvRVQKXinE1vaVen6v1CBQEZibx9RXrVRP1VRibsKFRXYxywNEl1VtPK7KaxCEYO9IXi4SKVulSAhOVequwjlo5E8bKNT61/g/YyMvwCbaTTPPeCpS/7i+JHYY3QZ8fQY/Syn+bOFpKCCHl+7VpsL8gjWe6fI4bUp6KUiW7ZkQpL/47rxawKnRMKKEU9P0ICp3RRB39lXT", value = "In key pair authentication, the public key on the provisioned machine. Users are expected to log in with their private key and a default username from the cloud provider. An AWS Ubuntu image comes with default user ubuntu, and Azure comes with default user azureuser. To log in by SSH: `ssh -i <private-key-path> ubuntu@52.90.80.153` `ssh -i <private-key-path> azureuser@40.76.14.255`")
  public String getSshKey() {
    return sshKey;
  }

  public void setSshKey(String sshKey) {
    this.sshKey = sshKey;
  }

  public RemoteAccessSpecification keyPair(String keyPair) {
    this.keyPair = keyPair;
    return this;
  }

   /**
   * Key Pair Name.
   * @return keyPair
  **/
  @ApiModelProperty(value = "Key Pair Name.")
  public String getKeyPair() {
    return keyPair;
  }

  public void setKeyPair(String keyPair) {
    this.keyPair = keyPair;
  }

  public RemoteAccessSpecification authentication(String authentication) {
    this.authentication = authentication;
    return this;
  }

   /**
   * One of four authentication types. &#x60;generatedPublicPrivateKey&#x60;: The provisioned machine generates the public/private key pair and enables SSH to use them without user input. &#x60;publicPrivateKey&#x60;: The user enters the private key in the SSH command. See remoteAccess.sshKey. &#x60;usernamePassword&#x60;: The user enters a username and password for remote access. &#x60;keyPairName&#x60;: The user enters an already existing keyPair name. See remoteAccess.keyPair
   * @return authentication
  **/
  @ApiModelProperty(example = "publicPrivateKey", required = true, value = "One of four authentication types. `generatedPublicPrivateKey`: The provisioned machine generates the public/private key pair and enables SSH to use them without user input. `publicPrivateKey`: The user enters the private key in the SSH command. See remoteAccess.sshKey. `usernamePassword`: The user enters a username and password for remote access. `keyPairName`: The user enters an already existing keyPair name. See remoteAccess.keyPair")
  public String getAuthentication() {
    return authentication;
  }

  public void setAuthentication(String authentication) {
    this.authentication = authentication;
  }

  public RemoteAccessSpecification username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Remote access username for the Azure machine.
   * @return username
  **/
  @ApiModelProperty(value = "Remote access username for the Azure machine.")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteAccessSpecification remoteAccessSpecification = (RemoteAccessSpecification) o;
    return Objects.equals(this.password, remoteAccessSpecification.password) &&
        Objects.equals(this.sshKey, remoteAccessSpecification.sshKey) &&
        Objects.equals(this.keyPair, remoteAccessSpecification.keyPair) &&
        Objects.equals(this.authentication, remoteAccessSpecification.authentication) &&
        Objects.equals(this.username, remoteAccessSpecification.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(password, sshKey, keyPair, authentication, username);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteAccessSpecification {\n");
    
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    sshKey: ").append(toIndentedString(sshKey)).append("\n");
    sb.append("    keyPair: ").append(toIndentedString(keyPair)).append("\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

