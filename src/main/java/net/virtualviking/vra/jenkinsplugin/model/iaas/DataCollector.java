/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.virtualviking.vra.jenkinsplugin.model.iaas;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * State object representing a data collector.&lt;br&gt;The data collector is an OVA tool that contains the credentials and protocols needed to create a connection between a data collector appliance on a host vCenter and a vCenter-based cloud account.&lt;br&gt;&lt;br&gt;Filtering is currently possible for some of the data collector fields via $filter.&lt;br&gt;Supported fields:&lt;br&gt;services&lt;br&gt;proxyId&lt;br&gt;creationTimeMicros&lt;br&gt;customProperties&lt;br&gt;&lt;br&gt;Supported operators: eq, ne, lt, gt, and, or.&lt;br&gt;&lt;br&gt;By default, the obtained list contains the enabled data collectors. A query parameter \&quot;disabled&#x3D;true\&quot; can be added to obtain disabled data collectors.&lt;br&gt;&lt;br&gt;Special case: If the user specifies $filter&#x3D;((services.item ne &#39;cloud_assembly_extensibility&#39;) and (services.item ne &#39;cloud_assembly&#39;)), which is equivalent to disabled&#x3D;true, and does not specify the \&quot;disabled\&quot; parameter, the resulting query will be equivalent to ((disabled&#x3D;true) and (disabled&#x3D;false)). This call will return an empty list.
 */
@ApiModel(description = "State object representing a data collector.<br>The data collector is an OVA tool that contains the credentials and protocols needed to create a connection between a data collector appliance on a host vCenter and a vCenter-based cloud account.<br><br>Filtering is currently possible for some of the data collector fields via $filter.<br>Supported fields:<br>services<br>proxyId<br>creationTimeMicros<br>customProperties<br><br>Supported operators: eq, ne, lt, gt, and, or.<br><br>By default, the obtained list contains the enabled data collectors. A query parameter \"disabled=true\" can be added to obtain disabled data collectors.<br><br>Special case: If the user specifies $filter=((services.item ne 'cloud_assembly_extensibility') and (services.item ne 'cloud_assembly')), which is equivalent to disabled=true, and does not specify the \"disabled\" parameter, the resulting query will be equivalent to ((disabled=true) and (disabled=false)). This call will return an empty list.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-01T10:54:54.585-04:00")



public class DataCollector {
  @SerializedName("hostName")
  private String hostName = null;

  @SerializedName("dcId")
  private String dcId = null;

  @SerializedName("ipAddress")
  private String ipAddress = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("status")
  private String status = null;

  public DataCollector hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

   /**
   * Data collector host name
   * @return hostName
  **/
  @ApiModelProperty(example = "dc1-lnd.mycompany.com", required = true, value = "Data collector host name")
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }

  public DataCollector dcId(String dcId) {
    this.dcId = dcId;
    return this;
  }

   /**
   * Data collector identifier
   * @return dcId
  **/
  @ApiModelProperty(example = "d5316b00-f3b8-4895-9e9a-c4b98649c2ca", required = true, value = "Data collector identifier")
  public String getDcId() {
    return dcId;
  }

  public void setDcId(String dcId) {
    this.dcId = dcId;
  }

  public DataCollector ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * Ip Address of the data collector VM
   * @return ipAddress
  **/
  @ApiModelProperty(example = "10.0.0.1", required = true, value = "Ip Address of the data collector VM")
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }

  public DataCollector name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Data collector name
   * @return name
  **/
  @ApiModelProperty(example = "Datacollector1", required = true, value = "Data collector name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DataCollector status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Current status of the data collector
   * @return status
  **/
  @ApiModelProperty(example = "ACTIVE, INACTIVE", required = true, value = "Current status of the data collector")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataCollector dataCollector = (DataCollector) o;
    return Objects.equals(this.hostName, dataCollector.hostName) &&
        Objects.equals(this.dcId, dataCollector.dcId) &&
        Objects.equals(this.ipAddress, dataCollector.ipAddress) &&
        Objects.equals(this.name, dataCollector.name) &&
        Objects.equals(this.status, dataCollector.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostName, dcId, ipAddress, name, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataCollector {\n");
    
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    dcId: ").append(toIndentedString(dcId)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

