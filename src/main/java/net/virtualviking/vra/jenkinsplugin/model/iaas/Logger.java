/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.virtualviking.vra.jenkinsplugin.model.iaas;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import net.virtualviking.vra.jenkinsplugin.model.iaas.Filter;
import net.virtualviking.vra.jenkinsplugin.model.iaas.Handler;
import net.virtualviking.vra.jenkinsplugin.model.iaas.Level;
import net.virtualviking.vra.jenkinsplugin.model.iaas.Logger;
import net.virtualviking.vra.jenkinsplugin.model.iaas.ResourceBundle;

/**
 * Logger
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-01T10:54:54.585-04:00")



public class Logger {
  @SerializedName("filter")
  private Filter filter = null;

  @SerializedName("parent")
  private Logger parent = null;

  @SerializedName("resourceBundle")
  private ResourceBundle resourceBundle = null;

  @SerializedName("resourceBundleName")
  private String resourceBundleName = null;

  @SerializedName("level")
  private Level level = null;

  @SerializedName("useParentHandlers")
  private Boolean useParentHandlers = null;

  @SerializedName("handlers")
  private List<Handler> handlers = null;

  @SerializedName("name")
  private String name = null;

  public Logger filter(Filter filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @ApiModelProperty(value = "")
  public Filter getFilter() {
    return filter;
  }

  public void setFilter(Filter filter) {
    this.filter = filter;
  }

  public Logger parent(Logger parent) {
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @ApiModelProperty(value = "")
  public Logger getParent() {
    return parent;
  }

  public void setParent(Logger parent) {
    this.parent = parent;
  }

  public Logger resourceBundle(ResourceBundle resourceBundle) {
    this.resourceBundle = resourceBundle;
    return this;
  }

   /**
   * Get resourceBundle
   * @return resourceBundle
  **/
  @ApiModelProperty(value = "")
  public ResourceBundle getResourceBundle() {
    return resourceBundle;
  }

  public void setResourceBundle(ResourceBundle resourceBundle) {
    this.resourceBundle = resourceBundle;
  }

  public Logger resourceBundleName(String resourceBundleName) {
    this.resourceBundleName = resourceBundleName;
    return this;
  }

   /**
   * Get resourceBundleName
   * @return resourceBundleName
  **/
  @ApiModelProperty(value = "")
  public String getResourceBundleName() {
    return resourceBundleName;
  }

  public void setResourceBundleName(String resourceBundleName) {
    this.resourceBundleName = resourceBundleName;
  }

  public Logger level(Level level) {
    this.level = level;
    return this;
  }

   /**
   * Get level
   * @return level
  **/
  @ApiModelProperty(value = "")
  public Level getLevel() {
    return level;
  }

  public void setLevel(Level level) {
    this.level = level;
  }

  public Logger useParentHandlers(Boolean useParentHandlers) {
    this.useParentHandlers = useParentHandlers;
    return this;
  }

   /**
   * Get useParentHandlers
   * @return useParentHandlers
  **/
  @ApiModelProperty(value = "")
  public Boolean isUseParentHandlers() {
    return useParentHandlers;
  }

  public void setUseParentHandlers(Boolean useParentHandlers) {
    this.useParentHandlers = useParentHandlers;
  }

  public Logger handlers(List<Handler> handlers) {
    this.handlers = handlers;
    return this;
  }

  public Logger addHandlersItem(Handler handlersItem) {
    if (this.handlers == null) {
      this.handlers = new ArrayList<Handler>();
    }
    this.handlers.add(handlersItem);
    return this;
  }

   /**
   * Get handlers
   * @return handlers
  **/
  @ApiModelProperty(value = "")
  public List<Handler> getHandlers() {
    return handlers;
  }

  public void setHandlers(List<Handler> handlers) {
    this.handlers = handlers;
  }

  public Logger name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Logger logger = (Logger) o;
    return Objects.equals(this.filter, logger.filter) &&
        Objects.equals(this.parent, logger.parent) &&
        Objects.equals(this.resourceBundle, logger.resourceBundle) &&
        Objects.equals(this.resourceBundleName, logger.resourceBundleName) &&
        Objects.equals(this.level, logger.level) &&
        Objects.equals(this.useParentHandlers, logger.useParentHandlers) &&
        Objects.equals(this.handlers, logger.handlers) &&
        Objects.equals(this.name, logger.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, parent, resourceBundle, resourceBundleName, level, useParentHandlers, handlers, name);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Logger {\n");
    
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    resourceBundle: ").append(toIndentedString(resourceBundle)).append("\n");
    sb.append("    resourceBundleName: ").append(toIndentedString(resourceBundleName)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    useParentHandlers: ").append(toIndentedString(useParentHandlers)).append("\n");
    sb.append("    handlers: ").append(toIndentedString(handlers)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

