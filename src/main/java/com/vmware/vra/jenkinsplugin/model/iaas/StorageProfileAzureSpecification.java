/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.iaas;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.vmware.vra.jenkinsplugin.model.iaas.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Represents a specification of Azure storage profile.
 */
@Schema(description = "Represents a specification of Azure storage profile.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-09T18:26:35.661905-04:00[America/New_York]")
public class StorageProfileAzureSpecification {
  @SerializedName("storageAccountId")
  private String storageAccountId = null;

  @SerializedName("supportsEncryption")
  private Boolean supportsEncryption = null;

  @SerializedName("regionId")
  private String regionId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("defaultItem")
  private Boolean defaultItem = null;

  @SerializedName("diskType")
  private String diskType = null;

  @SerializedName("dataDiskCaching")
  private String dataDiskCaching = null;

  @SerializedName("osDiskCaching")
  private String osDiskCaching = null;

  @SerializedName("tags")
  private List<Tag> tags = null;

  public StorageProfileAzureSpecification storageAccountId(String storageAccountId) {
    this.storageAccountId = storageAccountId;
    return this;
  }

   /**
   * Id of a storage account where in the disk is placed.
   * @return storageAccountId
  **/
  @Schema(example = "aaa82", description = "Id of a storage account where in the disk is placed.")
  public String getStorageAccountId() {
    return storageAccountId;
  }

  public void setStorageAccountId(String storageAccountId) {
    this.storageAccountId = storageAccountId;
  }

  public StorageProfileAzureSpecification supportsEncryption(Boolean supportsEncryption) {
    this.supportsEncryption = supportsEncryption;
    return this;
  }

   /**
   * Indicates whether this storage policy should support encryption or not.
   * @return supportsEncryption
  **/
  @Schema(example = "false", description = "Indicates whether this storage policy should support encryption or not.")
  public Boolean isSupportsEncryption() {
    return supportsEncryption;
  }

  public void setSupportsEncryption(Boolean supportsEncryption) {
    this.supportsEncryption = supportsEncryption;
  }

  public StorageProfileAzureSpecification regionId(String regionId) {
    this.regionId = regionId;
    return this;
  }

   /**
   * The If of the region that is associated with the storage profile.
   * @return regionId
  **/
  @Schema(example = "31186", required = true, description = "The If of the region that is associated with the storage profile.")
  public String getRegionId() {
    return regionId;
  }

  public void setRegionId(String regionId) {
    this.regionId = regionId;
  }

  public StorageProfileAzureSpecification name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A human-friendly name used as an identifier in APIs that support this option.
   * @return name
  **/
  @Schema(required = true, description = "A human-friendly name used as an identifier in APIs that support this option.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public StorageProfileAzureSpecification description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A human-friendly description.
   * @return description
  **/
  @Schema(description = "A human-friendly description.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public StorageProfileAzureSpecification defaultItem(Boolean defaultItem) {
    this.defaultItem = defaultItem;
    return this;
  }

   /**
   * Indicates if a storage policy contains default storage properties.
   * @return defaultItem
  **/
  @Schema(example = "true", description = "Indicates if a storage policy contains default storage properties.")
  public Boolean isDefaultItem() {
    return defaultItem;
  }

  public void setDefaultItem(Boolean defaultItem) {
    this.defaultItem = defaultItem;
  }

  public StorageProfileAzureSpecification diskType(String diskType) {
    this.diskType = diskType;
    return this;
  }

   /**
   * Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
   * @return diskType
  **/
  @Schema(example = "Standard_LRS / Premium_LRS", description = "Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.")
  public String getDiskType() {
    return diskType;
  }

  public void setDiskType(String diskType) {
    this.diskType = diskType;
  }

  public StorageProfileAzureSpecification dataDiskCaching(String dataDiskCaching) {
    this.dataDiskCaching = dataDiskCaching;
    return this;
  }

   /**
   * Indicates the caching mechanism for additional disk. 
   * @return dataDiskCaching
  **/
  @Schema(example = "None / ReadOnly / ReadWrite", description = "Indicates the caching mechanism for additional disk. ")
  public String getDataDiskCaching() {
    return dataDiskCaching;
  }

  public void setDataDiskCaching(String dataDiskCaching) {
    this.dataDiskCaching = dataDiskCaching;
  }

  public StorageProfileAzureSpecification osDiskCaching(String osDiskCaching) {
    this.osDiskCaching = osDiskCaching;
    return this;
  }

   /**
   * Indicates the caching mechanism for OS disk. Default policy for OS disks is Read/Write.
   * @return osDiskCaching
  **/
  @Schema(example = "None / ReadOnly / ReadWrite", description = "Indicates the caching mechanism for OS disk. Default policy for OS disks is Read/Write.")
  public String getOsDiskCaching() {
    return osDiskCaching;
  }

  public void setOsDiskCaching(String osDiskCaching) {
    this.osDiskCaching = osDiskCaching;
  }

  public StorageProfileAzureSpecification tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public StorageProfileAzureSpecification addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<Tag>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * A set of tag keys and optional values for a storage policy which define set of specifications for creating a disk.
   * @return tags
  **/
  @Schema(example = "[ { \"key\" : \"tier\", \"value\": \"silver\" } ]", description = "A set of tag keys and optional values for a storage policy which define set of specifications for creating a disk.")
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageProfileAzureSpecification storageProfileAzureSpecification = (StorageProfileAzureSpecification) o;
    return Objects.equals(this.storageAccountId, storageProfileAzureSpecification.storageAccountId) &&
        Objects.equals(this.supportsEncryption, storageProfileAzureSpecification.supportsEncryption) &&
        Objects.equals(this.regionId, storageProfileAzureSpecification.regionId) &&
        Objects.equals(this.name, storageProfileAzureSpecification.name) &&
        Objects.equals(this.description, storageProfileAzureSpecification.description) &&
        Objects.equals(this.defaultItem, storageProfileAzureSpecification.defaultItem) &&
        Objects.equals(this.diskType, storageProfileAzureSpecification.diskType) &&
        Objects.equals(this.dataDiskCaching, storageProfileAzureSpecification.dataDiskCaching) &&
        Objects.equals(this.osDiskCaching, storageProfileAzureSpecification.osDiskCaching) &&
        Objects.equals(this.tags, storageProfileAzureSpecification.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storageAccountId, supportsEncryption, regionId, name, description, defaultItem, diskType, dataDiskCaching, osDiskCaching, tags);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageProfileAzureSpecification {\n");
    
    sb.append("    storageAccountId: ").append(toIndentedString(storageAccountId)).append("\n");
    sb.append("    supportsEncryption: ").append(toIndentedString(supportsEncryption)).append("\n");
    sb.append("    regionId: ").append(toIndentedString(regionId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    defaultItem: ").append(toIndentedString(defaultItem)).append("\n");
    sb.append("    diskType: ").append(toIndentedString(diskType)).append("\n");
    sb.append("    dataDiskCaching: ").append(toIndentedString(dataDiskCaching)).append("\n");
    sb.append("    osDiskCaching: ").append(toIndentedString(osDiskCaching)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
