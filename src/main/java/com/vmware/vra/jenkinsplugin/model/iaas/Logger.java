/*
 * Copyright (c) 2020 VMware, Inc
 *
 *  SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.iaas;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Logger */
@javax.annotation.Generated(
    value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
    date = "2020-09-09T18:26:35.661905-04:00[America/New_York]")
public class Logger {
  @SerializedName("filter")
  private Filter filter = null;

  @SerializedName("parent")
  private Logger parent = null;

  @SerializedName("resourceBundle")
  private ResourceBundle resourceBundle = null;

  @SerializedName("resourceBundleName")
  private String resourceBundleName = null;

  @SerializedName("level")
  private Level level = null;

  @SerializedName("useParentHandlers")
  private Boolean useParentHandlers = null;

  @SerializedName("handlers")
  private List<Handler> handlers = null;

  @SerializedName("name")
  private String name = null;

  public Logger filter(Filter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   *
   * @return filter
   */
  @Schema(description = "")
  public Filter getFilter() {
    return filter;
  }

  public void setFilter(Filter filter) {
    this.filter = filter;
  }

  public Logger parent(Logger parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   *
   * @return parent
   */
  @Schema(description = "")
  public Logger getParent() {
    return parent;
  }

  public void setParent(Logger parent) {
    this.parent = parent;
  }

  public Logger resourceBundle(ResourceBundle resourceBundle) {
    this.resourceBundle = resourceBundle;
    return this;
  }

  /**
   * Get resourceBundle
   *
   * @return resourceBundle
   */
  @Schema(description = "")
  public ResourceBundle getResourceBundle() {
    return resourceBundle;
  }

  public void setResourceBundle(ResourceBundle resourceBundle) {
    this.resourceBundle = resourceBundle;
  }

  public Logger resourceBundleName(String resourceBundleName) {
    this.resourceBundleName = resourceBundleName;
    return this;
  }

  /**
   * Get resourceBundleName
   *
   * @return resourceBundleName
   */
  @Schema(description = "")
  public String getResourceBundleName() {
    return resourceBundleName;
  }

  public void setResourceBundleName(String resourceBundleName) {
    this.resourceBundleName = resourceBundleName;
  }

  public Logger level(Level level) {
    this.level = level;
    return this;
  }

  /**
   * Get level
   *
   * @return level
   */
  @Schema(description = "")
  public Level getLevel() {
    return level;
  }

  public void setLevel(Level level) {
    this.level = level;
  }

  public Logger useParentHandlers(Boolean useParentHandlers) {
    this.useParentHandlers = useParentHandlers;
    return this;
  }

  /**
   * Get useParentHandlers
   *
   * @return useParentHandlers
   */
  @Schema(description = "")
  public Boolean isUseParentHandlers() {
    return useParentHandlers;
  }

  public void setUseParentHandlers(Boolean useParentHandlers) {
    this.useParentHandlers = useParentHandlers;
  }

  public Logger handlers(List<Handler> handlers) {
    this.handlers = handlers;
    return this;
  }

  public Logger addHandlersItem(Handler handlersItem) {
    if (this.handlers == null) {
      this.handlers = new ArrayList<Handler>();
    }
    this.handlers.add(handlersItem);
    return this;
  }

  /**
   * Get handlers
   *
   * @return handlers
   */
  @Schema(description = "")
  public List<Handler> getHandlers() {
    return handlers;
  }

  public void setHandlers(List<Handler> handlers) {
    this.handlers = handlers;
  }

  public Logger name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   *
   * @return name
   */
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Logger logger = (Logger) o;
    return Objects.equals(this.filter, logger.filter)
        && Objects.equals(this.parent, logger.parent)
        && Objects.equals(this.resourceBundle, logger.resourceBundle)
        && Objects.equals(this.resourceBundleName, logger.resourceBundleName)
        && Objects.equals(this.level, logger.level)
        && Objects.equals(this.useParentHandlers, logger.useParentHandlers)
        && Objects.equals(this.handlers, logger.handlers)
        && Objects.equals(this.name, logger.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        filter,
        parent,
        resourceBundle,
        resourceBundleName,
        level,
        useParentHandlers,
        handlers,
        name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Logger {\n");

    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    resourceBundle: ").append(toIndentedString(resourceBundle)).append("\n");
    sb.append("    resourceBundleName: ").append(toIndentedString(resourceBundleName)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    useParentHandlers: ").append(toIndentedString(useParentHandlers)).append("\n");
    sb.append("    handlers: ").append(toIndentedString(handlers)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
