/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.iaas;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.vmware.vra.jenkinsplugin.model.iaas.Connection;
import com.vmware.vra.jenkinsplugin.model.iaas.ResultSet;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * DatabaseMetaData
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-09T18:26:35.661905-04:00[America/New_York]")
public class DatabaseMetaData {
  @SerializedName("databaseMinorVersion")
  private Integer databaseMinorVersion = null;

  /**
   * Gets or Sets rowIdLifetime
   */
  @JsonAdapter(RowIdLifetimeEnum.Adapter.class)
  public enum RowIdLifetimeEnum {
    UNSUPPORTED("ROWID_UNSUPPORTED"),
    VALID_OTHER("ROWID_VALID_OTHER"),
    VALID_SESSION("ROWID_VALID_SESSION"),
    VALID_TRANSACTION("ROWID_VALID_TRANSACTION"),
    VALID_FOREVER("ROWID_VALID_FOREVER");

    private String value;

    RowIdLifetimeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RowIdLifetimeEnum fromValue(String text) {
      for (RowIdLifetimeEnum b : RowIdLifetimeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RowIdLifetimeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RowIdLifetimeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RowIdLifetimeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RowIdLifetimeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("rowIdLifetime")
  private RowIdLifetimeEnum rowIdLifetime = null;

  @SerializedName("maxCharLiteralLength")
  private Integer maxCharLiteralLength = null;

  @SerializedName("searchStringEscape")
  private String searchStringEscape = null;

  @SerializedName("maxTablesInSelect")
  private Integer maxTablesInSelect = null;

  @SerializedName("jdbcminorVersion")
  private Integer jdbcminorVersion = null;

  @SerializedName("databaseProductName")
  private String databaseProductName = null;

  @SerializedName("maxTableNameLength")
  private Integer maxTableNameLength = null;

  @SerializedName("catalogAtStart")
  private Boolean catalogAtStart = null;

  @SerializedName("maxCursorNameLength")
  private Integer maxCursorNameLength = null;

  @SerializedName("maxCatalogNameLength")
  private Integer maxCatalogNameLength = null;

  @SerializedName("maxStatementLength")
  private Integer maxStatementLength = null;

  @SerializedName("connection")
  private Connection connection = null;

  @SerializedName("maxLogicalLobSize")
  private Long maxLogicalLobSize = null;

  @SerializedName("maxColumnsInOrderBy")
  private Integer maxColumnsInOrderBy = null;

  @SerializedName("stringFunctions")
  private String stringFunctions = null;

  @SerializedName("typeInfo")
  private ResultSet typeInfo = null;

  @SerializedName("maxStatements")
  private Integer maxStatements = null;

  @SerializedName("readOnly")
  private Boolean readOnly = null;

  @SerializedName("clientInfoProperties")
  private ResultSet clientInfoProperties = null;

  @SerializedName("resultSetHoldability")
  private Integer resultSetHoldability = null;

  @SerializedName("procedureTerm")
  private String procedureTerm = null;

  @SerializedName("sqlstateType")
  private Integer sqlstateType = null;

  @SerializedName("catalogs")
  private ResultSet catalogs = null;

  @SerializedName("driverMajorVersion")
  private Integer driverMajorVersion = null;

  @SerializedName("schemas")
  private ResultSet schemas = null;

  @SerializedName("maxColumnsInIndex")
  private Integer maxColumnsInIndex = null;

  @SerializedName("driverName")
  private String driverName = null;

  @SerializedName("timeDateFunctions")
  private String timeDateFunctions = null;

  @SerializedName("maxIndexLength")
  private Integer maxIndexLength = null;

  @SerializedName("extraNameCharacters")
  private String extraNameCharacters = null;

  @SerializedName("sqlkeywords")
  private String sqlkeywords = null;

  @SerializedName("identifierQuoteString")
  private String identifierQuoteString = null;

  @SerializedName("databaseMajorVersion")
  private Integer databaseMajorVersion = null;

  @SerializedName("catalogTerm")
  private String catalogTerm = null;

  @SerializedName("maxColumnsInTable")
  private Integer maxColumnsInTable = null;

  @SerializedName("maxUserNameLength")
  private Integer maxUserNameLength = null;

  @SerializedName("jdbcmajorVersion")
  private Integer jdbcmajorVersion = null;

  @SerializedName("catalogSeparator")
  private String catalogSeparator = null;

  @SerializedName("maxColumnNameLength")
  private Integer maxColumnNameLength = null;

  @SerializedName("maxConnections")
  private Integer maxConnections = null;

  @SerializedName("databaseProductVersion")
  private String databaseProductVersion = null;

  @SerializedName("maxColumnsInSelect")
  private Integer maxColumnsInSelect = null;

  @SerializedName("maxProcedureNameLength")
  private Integer maxProcedureNameLength = null;

  @SerializedName("maxRowSize")
  private Integer maxRowSize = null;

  @SerializedName("defaultTransactionIsolation")
  private Integer defaultTransactionIsolation = null;

  @SerializedName("userName")
  private String userName = null;

  @SerializedName("schemaTerm")
  private String schemaTerm = null;

  @SerializedName("maxColumnsInGroupBy")
  private Integer maxColumnsInGroupBy = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("tableTypes")
  private ResultSet tableTypes = null;

  @SerializedName("maxSchemaNameLength")
  private Integer maxSchemaNameLength = null;

  @SerializedName("driverVersion")
  private String driverVersion = null;

  @SerializedName("driverMinorVersion")
  private Integer driverMinorVersion = null;

  @SerializedName("numericFunctions")
  private String numericFunctions = null;

  @SerializedName("systemFunctions")
  private String systemFunctions = null;

  @SerializedName("maxBinaryLiteralLength")
  private Integer maxBinaryLiteralLength = null;

  public DatabaseMetaData databaseMinorVersion(Integer databaseMinorVersion) {
    this.databaseMinorVersion = databaseMinorVersion;
    return this;
  }

   /**
   * Get databaseMinorVersion
   * @return databaseMinorVersion
  **/
  @Schema(description = "")
  public Integer getDatabaseMinorVersion() {
    return databaseMinorVersion;
  }

  public void setDatabaseMinorVersion(Integer databaseMinorVersion) {
    this.databaseMinorVersion = databaseMinorVersion;
  }

  public DatabaseMetaData rowIdLifetime(RowIdLifetimeEnum rowIdLifetime) {
    this.rowIdLifetime = rowIdLifetime;
    return this;
  }

   /**
   * Get rowIdLifetime
   * @return rowIdLifetime
  **/
  @Schema(description = "")
  public RowIdLifetimeEnum getRowIdLifetime() {
    return rowIdLifetime;
  }

  public void setRowIdLifetime(RowIdLifetimeEnum rowIdLifetime) {
    this.rowIdLifetime = rowIdLifetime;
  }

  public DatabaseMetaData maxCharLiteralLength(Integer maxCharLiteralLength) {
    this.maxCharLiteralLength = maxCharLiteralLength;
    return this;
  }

   /**
   * Get maxCharLiteralLength
   * @return maxCharLiteralLength
  **/
  @Schema(description = "")
  public Integer getMaxCharLiteralLength() {
    return maxCharLiteralLength;
  }

  public void setMaxCharLiteralLength(Integer maxCharLiteralLength) {
    this.maxCharLiteralLength = maxCharLiteralLength;
  }

  public DatabaseMetaData searchStringEscape(String searchStringEscape) {
    this.searchStringEscape = searchStringEscape;
    return this;
  }

   /**
   * Get searchStringEscape
   * @return searchStringEscape
  **/
  @Schema(description = "")
  public String getSearchStringEscape() {
    return searchStringEscape;
  }

  public void setSearchStringEscape(String searchStringEscape) {
    this.searchStringEscape = searchStringEscape;
  }

  public DatabaseMetaData maxTablesInSelect(Integer maxTablesInSelect) {
    this.maxTablesInSelect = maxTablesInSelect;
    return this;
  }

   /**
   * Get maxTablesInSelect
   * @return maxTablesInSelect
  **/
  @Schema(description = "")
  public Integer getMaxTablesInSelect() {
    return maxTablesInSelect;
  }

  public void setMaxTablesInSelect(Integer maxTablesInSelect) {
    this.maxTablesInSelect = maxTablesInSelect;
  }

  public DatabaseMetaData jdbcminorVersion(Integer jdbcminorVersion) {
    this.jdbcminorVersion = jdbcminorVersion;
    return this;
  }

   /**
   * Get jdbcminorVersion
   * @return jdbcminorVersion
  **/
  @Schema(description = "")
  public Integer getJdbcminorVersion() {
    return jdbcminorVersion;
  }

  public void setJdbcminorVersion(Integer jdbcminorVersion) {
    this.jdbcminorVersion = jdbcminorVersion;
  }

  public DatabaseMetaData databaseProductName(String databaseProductName) {
    this.databaseProductName = databaseProductName;
    return this;
  }

   /**
   * Get databaseProductName
   * @return databaseProductName
  **/
  @Schema(description = "")
  public String getDatabaseProductName() {
    return databaseProductName;
  }

  public void setDatabaseProductName(String databaseProductName) {
    this.databaseProductName = databaseProductName;
  }

  public DatabaseMetaData maxTableNameLength(Integer maxTableNameLength) {
    this.maxTableNameLength = maxTableNameLength;
    return this;
  }

   /**
   * Get maxTableNameLength
   * @return maxTableNameLength
  **/
  @Schema(description = "")
  public Integer getMaxTableNameLength() {
    return maxTableNameLength;
  }

  public void setMaxTableNameLength(Integer maxTableNameLength) {
    this.maxTableNameLength = maxTableNameLength;
  }

  public DatabaseMetaData catalogAtStart(Boolean catalogAtStart) {
    this.catalogAtStart = catalogAtStart;
    return this;
  }

   /**
   * Get catalogAtStart
   * @return catalogAtStart
  **/
  @Schema(description = "")
  public Boolean isCatalogAtStart() {
    return catalogAtStart;
  }

  public void setCatalogAtStart(Boolean catalogAtStart) {
    this.catalogAtStart = catalogAtStart;
  }

  public DatabaseMetaData maxCursorNameLength(Integer maxCursorNameLength) {
    this.maxCursorNameLength = maxCursorNameLength;
    return this;
  }

   /**
   * Get maxCursorNameLength
   * @return maxCursorNameLength
  **/
  @Schema(description = "")
  public Integer getMaxCursorNameLength() {
    return maxCursorNameLength;
  }

  public void setMaxCursorNameLength(Integer maxCursorNameLength) {
    this.maxCursorNameLength = maxCursorNameLength;
  }

  public DatabaseMetaData maxCatalogNameLength(Integer maxCatalogNameLength) {
    this.maxCatalogNameLength = maxCatalogNameLength;
    return this;
  }

   /**
   * Get maxCatalogNameLength
   * @return maxCatalogNameLength
  **/
  @Schema(description = "")
  public Integer getMaxCatalogNameLength() {
    return maxCatalogNameLength;
  }

  public void setMaxCatalogNameLength(Integer maxCatalogNameLength) {
    this.maxCatalogNameLength = maxCatalogNameLength;
  }

  public DatabaseMetaData maxStatementLength(Integer maxStatementLength) {
    this.maxStatementLength = maxStatementLength;
    return this;
  }

   /**
   * Get maxStatementLength
   * @return maxStatementLength
  **/
  @Schema(description = "")
  public Integer getMaxStatementLength() {
    return maxStatementLength;
  }

  public void setMaxStatementLength(Integer maxStatementLength) {
    this.maxStatementLength = maxStatementLength;
  }

  public DatabaseMetaData connection(Connection connection) {
    this.connection = connection;
    return this;
  }

   /**
   * Get connection
   * @return connection
  **/
  @Schema(description = "")
  public Connection getConnection() {
    return connection;
  }

  public void setConnection(Connection connection) {
    this.connection = connection;
  }

  public DatabaseMetaData maxLogicalLobSize(Long maxLogicalLobSize) {
    this.maxLogicalLobSize = maxLogicalLobSize;
    return this;
  }

   /**
   * Get maxLogicalLobSize
   * @return maxLogicalLobSize
  **/
  @Schema(description = "")
  public Long getMaxLogicalLobSize() {
    return maxLogicalLobSize;
  }

  public void setMaxLogicalLobSize(Long maxLogicalLobSize) {
    this.maxLogicalLobSize = maxLogicalLobSize;
  }

  public DatabaseMetaData maxColumnsInOrderBy(Integer maxColumnsInOrderBy) {
    this.maxColumnsInOrderBy = maxColumnsInOrderBy;
    return this;
  }

   /**
   * Get maxColumnsInOrderBy
   * @return maxColumnsInOrderBy
  **/
  @Schema(description = "")
  public Integer getMaxColumnsInOrderBy() {
    return maxColumnsInOrderBy;
  }

  public void setMaxColumnsInOrderBy(Integer maxColumnsInOrderBy) {
    this.maxColumnsInOrderBy = maxColumnsInOrderBy;
  }

  public DatabaseMetaData stringFunctions(String stringFunctions) {
    this.stringFunctions = stringFunctions;
    return this;
  }

   /**
   * Get stringFunctions
   * @return stringFunctions
  **/
  @Schema(description = "")
  public String getStringFunctions() {
    return stringFunctions;
  }

  public void setStringFunctions(String stringFunctions) {
    this.stringFunctions = stringFunctions;
  }

  public DatabaseMetaData typeInfo(ResultSet typeInfo) {
    this.typeInfo = typeInfo;
    return this;
  }

   /**
   * Get typeInfo
   * @return typeInfo
  **/
  @Schema(description = "")
  public ResultSet getTypeInfo() {
    return typeInfo;
  }

  public void setTypeInfo(ResultSet typeInfo) {
    this.typeInfo = typeInfo;
  }

  public DatabaseMetaData maxStatements(Integer maxStatements) {
    this.maxStatements = maxStatements;
    return this;
  }

   /**
   * Get maxStatements
   * @return maxStatements
  **/
  @Schema(description = "")
  public Integer getMaxStatements() {
    return maxStatements;
  }

  public void setMaxStatements(Integer maxStatements) {
    this.maxStatements = maxStatements;
  }

  public DatabaseMetaData readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

   /**
   * Get readOnly
   * @return readOnly
  **/
  @Schema(description = "")
  public Boolean isReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }

  public DatabaseMetaData clientInfoProperties(ResultSet clientInfoProperties) {
    this.clientInfoProperties = clientInfoProperties;
    return this;
  }

   /**
   * Get clientInfoProperties
   * @return clientInfoProperties
  **/
  @Schema(description = "")
  public ResultSet getClientInfoProperties() {
    return clientInfoProperties;
  }

  public void setClientInfoProperties(ResultSet clientInfoProperties) {
    this.clientInfoProperties = clientInfoProperties;
  }

  public DatabaseMetaData resultSetHoldability(Integer resultSetHoldability) {
    this.resultSetHoldability = resultSetHoldability;
    return this;
  }

   /**
   * Get resultSetHoldability
   * @return resultSetHoldability
  **/
  @Schema(description = "")
  public Integer getResultSetHoldability() {
    return resultSetHoldability;
  }

  public void setResultSetHoldability(Integer resultSetHoldability) {
    this.resultSetHoldability = resultSetHoldability;
  }

  public DatabaseMetaData procedureTerm(String procedureTerm) {
    this.procedureTerm = procedureTerm;
    return this;
  }

   /**
   * Get procedureTerm
   * @return procedureTerm
  **/
  @Schema(description = "")
  public String getProcedureTerm() {
    return procedureTerm;
  }

  public void setProcedureTerm(String procedureTerm) {
    this.procedureTerm = procedureTerm;
  }

  public DatabaseMetaData sqlstateType(Integer sqlstateType) {
    this.sqlstateType = sqlstateType;
    return this;
  }

   /**
   * Get sqlstateType
   * @return sqlstateType
  **/
  @Schema(description = "")
  public Integer getSqlstateType() {
    return sqlstateType;
  }

  public void setSqlstateType(Integer sqlstateType) {
    this.sqlstateType = sqlstateType;
  }

  public DatabaseMetaData catalogs(ResultSet catalogs) {
    this.catalogs = catalogs;
    return this;
  }

   /**
   * Get catalogs
   * @return catalogs
  **/
  @Schema(description = "")
  public ResultSet getCatalogs() {
    return catalogs;
  }

  public void setCatalogs(ResultSet catalogs) {
    this.catalogs = catalogs;
  }

  public DatabaseMetaData driverMajorVersion(Integer driverMajorVersion) {
    this.driverMajorVersion = driverMajorVersion;
    return this;
  }

   /**
   * Get driverMajorVersion
   * @return driverMajorVersion
  **/
  @Schema(description = "")
  public Integer getDriverMajorVersion() {
    return driverMajorVersion;
  }

  public void setDriverMajorVersion(Integer driverMajorVersion) {
    this.driverMajorVersion = driverMajorVersion;
  }

  public DatabaseMetaData schemas(ResultSet schemas) {
    this.schemas = schemas;
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @Schema(description = "")
  public ResultSet getSchemas() {
    return schemas;
  }

  public void setSchemas(ResultSet schemas) {
    this.schemas = schemas;
  }

  public DatabaseMetaData maxColumnsInIndex(Integer maxColumnsInIndex) {
    this.maxColumnsInIndex = maxColumnsInIndex;
    return this;
  }

   /**
   * Get maxColumnsInIndex
   * @return maxColumnsInIndex
  **/
  @Schema(description = "")
  public Integer getMaxColumnsInIndex() {
    return maxColumnsInIndex;
  }

  public void setMaxColumnsInIndex(Integer maxColumnsInIndex) {
    this.maxColumnsInIndex = maxColumnsInIndex;
  }

  public DatabaseMetaData driverName(String driverName) {
    this.driverName = driverName;
    return this;
  }

   /**
   * Get driverName
   * @return driverName
  **/
  @Schema(description = "")
  public String getDriverName() {
    return driverName;
  }

  public void setDriverName(String driverName) {
    this.driverName = driverName;
  }

  public DatabaseMetaData timeDateFunctions(String timeDateFunctions) {
    this.timeDateFunctions = timeDateFunctions;
    return this;
  }

   /**
   * Get timeDateFunctions
   * @return timeDateFunctions
  **/
  @Schema(description = "")
  public String getTimeDateFunctions() {
    return timeDateFunctions;
  }

  public void setTimeDateFunctions(String timeDateFunctions) {
    this.timeDateFunctions = timeDateFunctions;
  }

  public DatabaseMetaData maxIndexLength(Integer maxIndexLength) {
    this.maxIndexLength = maxIndexLength;
    return this;
  }

   /**
   * Get maxIndexLength
   * @return maxIndexLength
  **/
  @Schema(description = "")
  public Integer getMaxIndexLength() {
    return maxIndexLength;
  }

  public void setMaxIndexLength(Integer maxIndexLength) {
    this.maxIndexLength = maxIndexLength;
  }

  public DatabaseMetaData extraNameCharacters(String extraNameCharacters) {
    this.extraNameCharacters = extraNameCharacters;
    return this;
  }

   /**
   * Get extraNameCharacters
   * @return extraNameCharacters
  **/
  @Schema(description = "")
  public String getExtraNameCharacters() {
    return extraNameCharacters;
  }

  public void setExtraNameCharacters(String extraNameCharacters) {
    this.extraNameCharacters = extraNameCharacters;
  }

  public DatabaseMetaData sqlkeywords(String sqlkeywords) {
    this.sqlkeywords = sqlkeywords;
    return this;
  }

   /**
   * Get sqlkeywords
   * @return sqlkeywords
  **/
  @Schema(description = "")
  public String getSqlkeywords() {
    return sqlkeywords;
  }

  public void setSqlkeywords(String sqlkeywords) {
    this.sqlkeywords = sqlkeywords;
  }

  public DatabaseMetaData identifierQuoteString(String identifierQuoteString) {
    this.identifierQuoteString = identifierQuoteString;
    return this;
  }

   /**
   * Get identifierQuoteString
   * @return identifierQuoteString
  **/
  @Schema(description = "")
  public String getIdentifierQuoteString() {
    return identifierQuoteString;
  }

  public void setIdentifierQuoteString(String identifierQuoteString) {
    this.identifierQuoteString = identifierQuoteString;
  }

  public DatabaseMetaData databaseMajorVersion(Integer databaseMajorVersion) {
    this.databaseMajorVersion = databaseMajorVersion;
    return this;
  }

   /**
   * Get databaseMajorVersion
   * @return databaseMajorVersion
  **/
  @Schema(description = "")
  public Integer getDatabaseMajorVersion() {
    return databaseMajorVersion;
  }

  public void setDatabaseMajorVersion(Integer databaseMajorVersion) {
    this.databaseMajorVersion = databaseMajorVersion;
  }

  public DatabaseMetaData catalogTerm(String catalogTerm) {
    this.catalogTerm = catalogTerm;
    return this;
  }

   /**
   * Get catalogTerm
   * @return catalogTerm
  **/
  @Schema(description = "")
  public String getCatalogTerm() {
    return catalogTerm;
  }

  public void setCatalogTerm(String catalogTerm) {
    this.catalogTerm = catalogTerm;
  }

  public DatabaseMetaData maxColumnsInTable(Integer maxColumnsInTable) {
    this.maxColumnsInTable = maxColumnsInTable;
    return this;
  }

   /**
   * Get maxColumnsInTable
   * @return maxColumnsInTable
  **/
  @Schema(description = "")
  public Integer getMaxColumnsInTable() {
    return maxColumnsInTable;
  }

  public void setMaxColumnsInTable(Integer maxColumnsInTable) {
    this.maxColumnsInTable = maxColumnsInTable;
  }

  public DatabaseMetaData maxUserNameLength(Integer maxUserNameLength) {
    this.maxUserNameLength = maxUserNameLength;
    return this;
  }

   /**
   * Get maxUserNameLength
   * @return maxUserNameLength
  **/
  @Schema(description = "")
  public Integer getMaxUserNameLength() {
    return maxUserNameLength;
  }

  public void setMaxUserNameLength(Integer maxUserNameLength) {
    this.maxUserNameLength = maxUserNameLength;
  }

  public DatabaseMetaData jdbcmajorVersion(Integer jdbcmajorVersion) {
    this.jdbcmajorVersion = jdbcmajorVersion;
    return this;
  }

   /**
   * Get jdbcmajorVersion
   * @return jdbcmajorVersion
  **/
  @Schema(description = "")
  public Integer getJdbcmajorVersion() {
    return jdbcmajorVersion;
  }

  public void setJdbcmajorVersion(Integer jdbcmajorVersion) {
    this.jdbcmajorVersion = jdbcmajorVersion;
  }

  public DatabaseMetaData catalogSeparator(String catalogSeparator) {
    this.catalogSeparator = catalogSeparator;
    return this;
  }

   /**
   * Get catalogSeparator
   * @return catalogSeparator
  **/
  @Schema(description = "")
  public String getCatalogSeparator() {
    return catalogSeparator;
  }

  public void setCatalogSeparator(String catalogSeparator) {
    this.catalogSeparator = catalogSeparator;
  }

  public DatabaseMetaData maxColumnNameLength(Integer maxColumnNameLength) {
    this.maxColumnNameLength = maxColumnNameLength;
    return this;
  }

   /**
   * Get maxColumnNameLength
   * @return maxColumnNameLength
  **/
  @Schema(description = "")
  public Integer getMaxColumnNameLength() {
    return maxColumnNameLength;
  }

  public void setMaxColumnNameLength(Integer maxColumnNameLength) {
    this.maxColumnNameLength = maxColumnNameLength;
  }

  public DatabaseMetaData maxConnections(Integer maxConnections) {
    this.maxConnections = maxConnections;
    return this;
  }

   /**
   * Get maxConnections
   * @return maxConnections
  **/
  @Schema(description = "")
  public Integer getMaxConnections() {
    return maxConnections;
  }

  public void setMaxConnections(Integer maxConnections) {
    this.maxConnections = maxConnections;
  }

  public DatabaseMetaData databaseProductVersion(String databaseProductVersion) {
    this.databaseProductVersion = databaseProductVersion;
    return this;
  }

   /**
   * Get databaseProductVersion
   * @return databaseProductVersion
  **/
  @Schema(description = "")
  public String getDatabaseProductVersion() {
    return databaseProductVersion;
  }

  public void setDatabaseProductVersion(String databaseProductVersion) {
    this.databaseProductVersion = databaseProductVersion;
  }

  public DatabaseMetaData maxColumnsInSelect(Integer maxColumnsInSelect) {
    this.maxColumnsInSelect = maxColumnsInSelect;
    return this;
  }

   /**
   * Get maxColumnsInSelect
   * @return maxColumnsInSelect
  **/
  @Schema(description = "")
  public Integer getMaxColumnsInSelect() {
    return maxColumnsInSelect;
  }

  public void setMaxColumnsInSelect(Integer maxColumnsInSelect) {
    this.maxColumnsInSelect = maxColumnsInSelect;
  }

  public DatabaseMetaData maxProcedureNameLength(Integer maxProcedureNameLength) {
    this.maxProcedureNameLength = maxProcedureNameLength;
    return this;
  }

   /**
   * Get maxProcedureNameLength
   * @return maxProcedureNameLength
  **/
  @Schema(description = "")
  public Integer getMaxProcedureNameLength() {
    return maxProcedureNameLength;
  }

  public void setMaxProcedureNameLength(Integer maxProcedureNameLength) {
    this.maxProcedureNameLength = maxProcedureNameLength;
  }

  public DatabaseMetaData maxRowSize(Integer maxRowSize) {
    this.maxRowSize = maxRowSize;
    return this;
  }

   /**
   * Get maxRowSize
   * @return maxRowSize
  **/
  @Schema(description = "")
  public Integer getMaxRowSize() {
    return maxRowSize;
  }

  public void setMaxRowSize(Integer maxRowSize) {
    this.maxRowSize = maxRowSize;
  }

  public DatabaseMetaData defaultTransactionIsolation(Integer defaultTransactionIsolation) {
    this.defaultTransactionIsolation = defaultTransactionIsolation;
    return this;
  }

   /**
   * Get defaultTransactionIsolation
   * @return defaultTransactionIsolation
  **/
  @Schema(description = "")
  public Integer getDefaultTransactionIsolation() {
    return defaultTransactionIsolation;
  }

  public void setDefaultTransactionIsolation(Integer defaultTransactionIsolation) {
    this.defaultTransactionIsolation = defaultTransactionIsolation;
  }

  public DatabaseMetaData userName(String userName) {
    this.userName = userName;
    return this;
  }

   /**
   * Get userName
   * @return userName
  **/
  @Schema(description = "")
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }

  public DatabaseMetaData schemaTerm(String schemaTerm) {
    this.schemaTerm = schemaTerm;
    return this;
  }

   /**
   * Get schemaTerm
   * @return schemaTerm
  **/
  @Schema(description = "")
  public String getSchemaTerm() {
    return schemaTerm;
  }

  public void setSchemaTerm(String schemaTerm) {
    this.schemaTerm = schemaTerm;
  }

  public DatabaseMetaData maxColumnsInGroupBy(Integer maxColumnsInGroupBy) {
    this.maxColumnsInGroupBy = maxColumnsInGroupBy;
    return this;
  }

   /**
   * Get maxColumnsInGroupBy
   * @return maxColumnsInGroupBy
  **/
  @Schema(description = "")
  public Integer getMaxColumnsInGroupBy() {
    return maxColumnsInGroupBy;
  }

  public void setMaxColumnsInGroupBy(Integer maxColumnsInGroupBy) {
    this.maxColumnsInGroupBy = maxColumnsInGroupBy;
  }

  public DatabaseMetaData url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public DatabaseMetaData tableTypes(ResultSet tableTypes) {
    this.tableTypes = tableTypes;
    return this;
  }

   /**
   * Get tableTypes
   * @return tableTypes
  **/
  @Schema(description = "")
  public ResultSet getTableTypes() {
    return tableTypes;
  }

  public void setTableTypes(ResultSet tableTypes) {
    this.tableTypes = tableTypes;
  }

  public DatabaseMetaData maxSchemaNameLength(Integer maxSchemaNameLength) {
    this.maxSchemaNameLength = maxSchemaNameLength;
    return this;
  }

   /**
   * Get maxSchemaNameLength
   * @return maxSchemaNameLength
  **/
  @Schema(description = "")
  public Integer getMaxSchemaNameLength() {
    return maxSchemaNameLength;
  }

  public void setMaxSchemaNameLength(Integer maxSchemaNameLength) {
    this.maxSchemaNameLength = maxSchemaNameLength;
  }

  public DatabaseMetaData driverVersion(String driverVersion) {
    this.driverVersion = driverVersion;
    return this;
  }

   /**
   * Get driverVersion
   * @return driverVersion
  **/
  @Schema(description = "")
  public String getDriverVersion() {
    return driverVersion;
  }

  public void setDriverVersion(String driverVersion) {
    this.driverVersion = driverVersion;
  }

  public DatabaseMetaData driverMinorVersion(Integer driverMinorVersion) {
    this.driverMinorVersion = driverMinorVersion;
    return this;
  }

   /**
   * Get driverMinorVersion
   * @return driverMinorVersion
  **/
  @Schema(description = "")
  public Integer getDriverMinorVersion() {
    return driverMinorVersion;
  }

  public void setDriverMinorVersion(Integer driverMinorVersion) {
    this.driverMinorVersion = driverMinorVersion;
  }

  public DatabaseMetaData numericFunctions(String numericFunctions) {
    this.numericFunctions = numericFunctions;
    return this;
  }

   /**
   * Get numericFunctions
   * @return numericFunctions
  **/
  @Schema(description = "")
  public String getNumericFunctions() {
    return numericFunctions;
  }

  public void setNumericFunctions(String numericFunctions) {
    this.numericFunctions = numericFunctions;
  }

  public DatabaseMetaData systemFunctions(String systemFunctions) {
    this.systemFunctions = systemFunctions;
    return this;
  }

   /**
   * Get systemFunctions
   * @return systemFunctions
  **/
  @Schema(description = "")
  public String getSystemFunctions() {
    return systemFunctions;
  }

  public void setSystemFunctions(String systemFunctions) {
    this.systemFunctions = systemFunctions;
  }

  public DatabaseMetaData maxBinaryLiteralLength(Integer maxBinaryLiteralLength) {
    this.maxBinaryLiteralLength = maxBinaryLiteralLength;
    return this;
  }

   /**
   * Get maxBinaryLiteralLength
   * @return maxBinaryLiteralLength
  **/
  @Schema(description = "")
  public Integer getMaxBinaryLiteralLength() {
    return maxBinaryLiteralLength;
  }

  public void setMaxBinaryLiteralLength(Integer maxBinaryLiteralLength) {
    this.maxBinaryLiteralLength = maxBinaryLiteralLength;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseMetaData databaseMetaData = (DatabaseMetaData) o;
    return Objects.equals(this.databaseMinorVersion, databaseMetaData.databaseMinorVersion) &&
        Objects.equals(this.rowIdLifetime, databaseMetaData.rowIdLifetime) &&
        Objects.equals(this.maxCharLiteralLength, databaseMetaData.maxCharLiteralLength) &&
        Objects.equals(this.searchStringEscape, databaseMetaData.searchStringEscape) &&
        Objects.equals(this.maxTablesInSelect, databaseMetaData.maxTablesInSelect) &&
        Objects.equals(this.jdbcminorVersion, databaseMetaData.jdbcminorVersion) &&
        Objects.equals(this.databaseProductName, databaseMetaData.databaseProductName) &&
        Objects.equals(this.maxTableNameLength, databaseMetaData.maxTableNameLength) &&
        Objects.equals(this.catalogAtStart, databaseMetaData.catalogAtStart) &&
        Objects.equals(this.maxCursorNameLength, databaseMetaData.maxCursorNameLength) &&
        Objects.equals(this.maxCatalogNameLength, databaseMetaData.maxCatalogNameLength) &&
        Objects.equals(this.maxStatementLength, databaseMetaData.maxStatementLength) &&
        Objects.equals(this.connection, databaseMetaData.connection) &&
        Objects.equals(this.maxLogicalLobSize, databaseMetaData.maxLogicalLobSize) &&
        Objects.equals(this.maxColumnsInOrderBy, databaseMetaData.maxColumnsInOrderBy) &&
        Objects.equals(this.stringFunctions, databaseMetaData.stringFunctions) &&
        Objects.equals(this.typeInfo, databaseMetaData.typeInfo) &&
        Objects.equals(this.maxStatements, databaseMetaData.maxStatements) &&
        Objects.equals(this.readOnly, databaseMetaData.readOnly) &&
        Objects.equals(this.clientInfoProperties, databaseMetaData.clientInfoProperties) &&
        Objects.equals(this.resultSetHoldability, databaseMetaData.resultSetHoldability) &&
        Objects.equals(this.procedureTerm, databaseMetaData.procedureTerm) &&
        Objects.equals(this.sqlstateType, databaseMetaData.sqlstateType) &&
        Objects.equals(this.catalogs, databaseMetaData.catalogs) &&
        Objects.equals(this.driverMajorVersion, databaseMetaData.driverMajorVersion) &&
        Objects.equals(this.schemas, databaseMetaData.schemas) &&
        Objects.equals(this.maxColumnsInIndex, databaseMetaData.maxColumnsInIndex) &&
        Objects.equals(this.driverName, databaseMetaData.driverName) &&
        Objects.equals(this.timeDateFunctions, databaseMetaData.timeDateFunctions) &&
        Objects.equals(this.maxIndexLength, databaseMetaData.maxIndexLength) &&
        Objects.equals(this.extraNameCharacters, databaseMetaData.extraNameCharacters) &&
        Objects.equals(this.sqlkeywords, databaseMetaData.sqlkeywords) &&
        Objects.equals(this.identifierQuoteString, databaseMetaData.identifierQuoteString) &&
        Objects.equals(this.databaseMajorVersion, databaseMetaData.databaseMajorVersion) &&
        Objects.equals(this.catalogTerm, databaseMetaData.catalogTerm) &&
        Objects.equals(this.maxColumnsInTable, databaseMetaData.maxColumnsInTable) &&
        Objects.equals(this.maxUserNameLength, databaseMetaData.maxUserNameLength) &&
        Objects.equals(this.jdbcmajorVersion, databaseMetaData.jdbcmajorVersion) &&
        Objects.equals(this.catalogSeparator, databaseMetaData.catalogSeparator) &&
        Objects.equals(this.maxColumnNameLength, databaseMetaData.maxColumnNameLength) &&
        Objects.equals(this.maxConnections, databaseMetaData.maxConnections) &&
        Objects.equals(this.databaseProductVersion, databaseMetaData.databaseProductVersion) &&
        Objects.equals(this.maxColumnsInSelect, databaseMetaData.maxColumnsInSelect) &&
        Objects.equals(this.maxProcedureNameLength, databaseMetaData.maxProcedureNameLength) &&
        Objects.equals(this.maxRowSize, databaseMetaData.maxRowSize) &&
        Objects.equals(this.defaultTransactionIsolation, databaseMetaData.defaultTransactionIsolation) &&
        Objects.equals(this.userName, databaseMetaData.userName) &&
        Objects.equals(this.schemaTerm, databaseMetaData.schemaTerm) &&
        Objects.equals(this.maxColumnsInGroupBy, databaseMetaData.maxColumnsInGroupBy) &&
        Objects.equals(this.url, databaseMetaData.url) &&
        Objects.equals(this.tableTypes, databaseMetaData.tableTypes) &&
        Objects.equals(this.maxSchemaNameLength, databaseMetaData.maxSchemaNameLength) &&
        Objects.equals(this.driverVersion, databaseMetaData.driverVersion) &&
        Objects.equals(this.driverMinorVersion, databaseMetaData.driverMinorVersion) &&
        Objects.equals(this.numericFunctions, databaseMetaData.numericFunctions) &&
        Objects.equals(this.systemFunctions, databaseMetaData.systemFunctions) &&
        Objects.equals(this.maxBinaryLiteralLength, databaseMetaData.maxBinaryLiteralLength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseMinorVersion, rowIdLifetime, maxCharLiteralLength, searchStringEscape, maxTablesInSelect, jdbcminorVersion, databaseProductName, maxTableNameLength, catalogAtStart, maxCursorNameLength, maxCatalogNameLength, maxStatementLength, connection, maxLogicalLobSize, maxColumnsInOrderBy, stringFunctions, typeInfo, maxStatements, readOnly, clientInfoProperties, resultSetHoldability, procedureTerm, sqlstateType, catalogs, driverMajorVersion, schemas, maxColumnsInIndex, driverName, timeDateFunctions, maxIndexLength, extraNameCharacters, sqlkeywords, identifierQuoteString, databaseMajorVersion, catalogTerm, maxColumnsInTable, maxUserNameLength, jdbcmajorVersion, catalogSeparator, maxColumnNameLength, maxConnections, databaseProductVersion, maxColumnsInSelect, maxProcedureNameLength, maxRowSize, defaultTransactionIsolation, userName, schemaTerm, maxColumnsInGroupBy, url, tableTypes, maxSchemaNameLength, driverVersion, driverMinorVersion, numericFunctions, systemFunctions, maxBinaryLiteralLength);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseMetaData {\n");
    
    sb.append("    databaseMinorVersion: ").append(toIndentedString(databaseMinorVersion)).append("\n");
    sb.append("    rowIdLifetime: ").append(toIndentedString(rowIdLifetime)).append("\n");
    sb.append("    maxCharLiteralLength: ").append(toIndentedString(maxCharLiteralLength)).append("\n");
    sb.append("    searchStringEscape: ").append(toIndentedString(searchStringEscape)).append("\n");
    sb.append("    maxTablesInSelect: ").append(toIndentedString(maxTablesInSelect)).append("\n");
    sb.append("    jdbcminorVersion: ").append(toIndentedString(jdbcminorVersion)).append("\n");
    sb.append("    databaseProductName: ").append(toIndentedString(databaseProductName)).append("\n");
    sb.append("    maxTableNameLength: ").append(toIndentedString(maxTableNameLength)).append("\n");
    sb.append("    catalogAtStart: ").append(toIndentedString(catalogAtStart)).append("\n");
    sb.append("    maxCursorNameLength: ").append(toIndentedString(maxCursorNameLength)).append("\n");
    sb.append("    maxCatalogNameLength: ").append(toIndentedString(maxCatalogNameLength)).append("\n");
    sb.append("    maxStatementLength: ").append(toIndentedString(maxStatementLength)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    maxLogicalLobSize: ").append(toIndentedString(maxLogicalLobSize)).append("\n");
    sb.append("    maxColumnsInOrderBy: ").append(toIndentedString(maxColumnsInOrderBy)).append("\n");
    sb.append("    stringFunctions: ").append(toIndentedString(stringFunctions)).append("\n");
    sb.append("    typeInfo: ").append(toIndentedString(typeInfo)).append("\n");
    sb.append("    maxStatements: ").append(toIndentedString(maxStatements)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    clientInfoProperties: ").append(toIndentedString(clientInfoProperties)).append("\n");
    sb.append("    resultSetHoldability: ").append(toIndentedString(resultSetHoldability)).append("\n");
    sb.append("    procedureTerm: ").append(toIndentedString(procedureTerm)).append("\n");
    sb.append("    sqlstateType: ").append(toIndentedString(sqlstateType)).append("\n");
    sb.append("    catalogs: ").append(toIndentedString(catalogs)).append("\n");
    sb.append("    driverMajorVersion: ").append(toIndentedString(driverMajorVersion)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    maxColumnsInIndex: ").append(toIndentedString(maxColumnsInIndex)).append("\n");
    sb.append("    driverName: ").append(toIndentedString(driverName)).append("\n");
    sb.append("    timeDateFunctions: ").append(toIndentedString(timeDateFunctions)).append("\n");
    sb.append("    maxIndexLength: ").append(toIndentedString(maxIndexLength)).append("\n");
    sb.append("    extraNameCharacters: ").append(toIndentedString(extraNameCharacters)).append("\n");
    sb.append("    sqlkeywords: ").append(toIndentedString(sqlkeywords)).append("\n");
    sb.append("    identifierQuoteString: ").append(toIndentedString(identifierQuoteString)).append("\n");
    sb.append("    databaseMajorVersion: ").append(toIndentedString(databaseMajorVersion)).append("\n");
    sb.append("    catalogTerm: ").append(toIndentedString(catalogTerm)).append("\n");
    sb.append("    maxColumnsInTable: ").append(toIndentedString(maxColumnsInTable)).append("\n");
    sb.append("    maxUserNameLength: ").append(toIndentedString(maxUserNameLength)).append("\n");
    sb.append("    jdbcmajorVersion: ").append(toIndentedString(jdbcmajorVersion)).append("\n");
    sb.append("    catalogSeparator: ").append(toIndentedString(catalogSeparator)).append("\n");
    sb.append("    maxColumnNameLength: ").append(toIndentedString(maxColumnNameLength)).append("\n");
    sb.append("    maxConnections: ").append(toIndentedString(maxConnections)).append("\n");
    sb.append("    databaseProductVersion: ").append(toIndentedString(databaseProductVersion)).append("\n");
    sb.append("    maxColumnsInSelect: ").append(toIndentedString(maxColumnsInSelect)).append("\n");
    sb.append("    maxProcedureNameLength: ").append(toIndentedString(maxProcedureNameLength)).append("\n");
    sb.append("    maxRowSize: ").append(toIndentedString(maxRowSize)).append("\n");
    sb.append("    defaultTransactionIsolation: ").append(toIndentedString(defaultTransactionIsolation)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    schemaTerm: ").append(toIndentedString(schemaTerm)).append("\n");
    sb.append("    maxColumnsInGroupBy: ").append(toIndentedString(maxColumnsInGroupBy)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    tableTypes: ").append(toIndentedString(tableTypes)).append("\n");
    sb.append("    maxSchemaNameLength: ").append(toIndentedString(maxSchemaNameLength)).append("\n");
    sb.append("    driverVersion: ").append(toIndentedString(driverVersion)).append("\n");
    sb.append("    driverMinorVersion: ").append(toIndentedString(driverMinorVersion)).append("\n");
    sb.append("    numericFunctions: ").append(toIndentedString(numericFunctions)).append("\n");
    sb.append("    systemFunctions: ").append(toIndentedString(systemFunctions)).append("\n");
    sb.append("    maxBinaryLiteralLength: ").append(toIndentedString(maxBinaryLiteralLength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
