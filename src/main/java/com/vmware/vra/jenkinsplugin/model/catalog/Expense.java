/*
 * Copyright (c) 2020 VMware, Inc
 *
 *  SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * VMware Service Broker API
 * A multi-cloud API for Cloud Automation Services
 *
 * OpenAPI spec version: 2020-08-25
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.catalog;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
import java.util.Date;
import java.util.Objects;

/** Expense */
@javax.annotation.Generated(
    value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
    date = "2020-09-09T18:27:41.063635-04:00[America/New_York]")
public class Expense {
  @SerializedName("additionalExpense")
  private BigDecimal additionalExpense = null;

  @SerializedName("code")
  private String code = null;

  @SerializedName("computeExpense")
  private BigDecimal computeExpense = null;

  @SerializedName("lastUpdatedTime")
  private Date lastUpdatedTime = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("networkExpense")
  private BigDecimal networkExpense = null;

  @SerializedName("storageExpense")
  private BigDecimal storageExpense = null;

  @SerializedName("totalExpense")
  private BigDecimal totalExpense = null;

  @SerializedName("unit")
  private String unit = null;

  /**
   * Additional expense incurred for the resource.
   *
   * @return additionalExpense
   */
  @Schema(description = "Additional expense incurred for the resource.")
  public BigDecimal getAdditionalExpense() {
    return additionalExpense;
  }

  /**
   * Expense sync message code if any.
   *
   * @return code
   */
  @Schema(description = "Expense sync message code if any.")
  public String getCode() {
    return code;
  }

  /**
   * Compute expense of the resource.
   *
   * @return computeExpense
   */
  @Schema(description = "Compute expense of the resource.")
  public BigDecimal getComputeExpense() {
    return computeExpense;
  }

  /**
   * Last expense sync time.
   *
   * @return lastUpdatedTime
   */
  @Schema(description = "Last expense sync time.")
  public Date getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  /**
   * Expense sync message if any.
   *
   * @return message
   */
  @Schema(description = "Expense sync message if any.")
  public String getMessage() {
    return message;
  }

  /**
   * Network expense of the resource.
   *
   * @return networkExpense
   */
  @Schema(description = "Network expense of the resource.")
  public BigDecimal getNetworkExpense() {
    return networkExpense;
  }

  /**
   * Storage expense of the resource.
   *
   * @return storageExpense
   */
  @Schema(description = "Storage expense of the resource.")
  public BigDecimal getStorageExpense() {
    return storageExpense;
  }

  /**
   * Total expense of the resource.
   *
   * @return totalExpense
   */
  @Schema(description = "Total expense of the resource.")
  public BigDecimal getTotalExpense() {
    return totalExpense;
  }

  /**
   * Monetary unit.
   *
   * @return unit
   */
  @Schema(description = "Monetary unit.")
  public String getUnit() {
    return unit;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Expense expense = (Expense) o;
    return Objects.equals(this.additionalExpense, expense.additionalExpense)
        && Objects.equals(this.code, expense.code)
        && Objects.equals(this.computeExpense, expense.computeExpense)
        && Objects.equals(this.lastUpdatedTime, expense.lastUpdatedTime)
        && Objects.equals(this.message, expense.message)
        && Objects.equals(this.networkExpense, expense.networkExpense)
        && Objects.equals(this.storageExpense, expense.storageExpense)
        && Objects.equals(this.totalExpense, expense.totalExpense)
        && Objects.equals(this.unit, expense.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        additionalExpense,
        code,
        computeExpense,
        lastUpdatedTime,
        message,
        networkExpense,
        storageExpense,
        totalExpense,
        unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Expense {\n");

    sb.append("    additionalExpense: ").append(toIndentedString(additionalExpense)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    computeExpense: ").append(toIndentedString(computeExpense)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    networkExpense: ").append(toIndentedString(networkExpense)).append("\n");
    sb.append("    storageExpense: ").append(toIndentedString(storageExpense)).append("\n");
    sb.append("    totalExpense: ").append(toIndentedString(totalExpense)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
