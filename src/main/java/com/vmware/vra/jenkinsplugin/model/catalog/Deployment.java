/*
 * VMware Service Broker API
 * A multi-cloud API for Cloud Automation Services
 *
 * OpenAPI spec version: 2020-08-25
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.catalog;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.vmware.vra.jenkinsplugin.model.catalog.Expense;
import com.vmware.vra.jenkinsplugin.model.catalog.Request;
import com.vmware.vra.jenkinsplugin.model.catalog.Resource;
import com.vmware.vra.jenkinsplugin.model.catalog.ResourceReference;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
/**
 * A group of resources such as machines, network, software, etc... typically provisioned together to deliver a complete/workable application.
 */
@Schema(description = "A group of resources such as machines, network, software, etc... typically provisioned together to deliver a complete/workable application.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-09T18:27:41.063635-04:00[America/New_York]")
public class Deployment {
  @SerializedName("blueprint")
  private ResourceReference blueprint = null;

  @SerializedName("blueprintId")
  private String blueprintId = null;

  @SerializedName("blueprintVersion")
  private String blueprintVersion = null;

  @SerializedName("catalog")
  private ResourceReference catalog = null;

  @SerializedName("catalogItemId")
  private String catalogItemId = null;

  @SerializedName("catalogItemVersion")
  private String catalogItemVersion = null;

  @SerializedName("createdAt")
  private Date createdAt = null;

  @SerializedName("createdBy")
  private String createdBy = null;

  @SerializedName("deleted")
  private Boolean deleted = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("expense")
  private Expense expense = null;

  @SerializedName("iconId")
  private String iconId = null;

  @SerializedName("id")
  private UUID id = null;

  @SerializedName("inputs")
  private Object inputs = null;

  @SerializedName("lastRequest")
  private Request lastRequest = null;

  @SerializedName("lastUpdatedAt")
  private Date lastUpdatedAt = null;

  @SerializedName("lastUpdatedBy")
  private String lastUpdatedBy = null;

  @SerializedName("leaseExpireAt")
  private Date leaseExpireAt = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("orgId")
  private String orgId = null;

  @SerializedName("project")
  private ResourceReference project = null;

  @SerializedName("projectId")
  private String projectId = null;

  @SerializedName("resources")
  private List<Resource> resources = null;

  /**
   * Deployment status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CREATE_SUCCESSFUL("CREATE_SUCCESSFUL"),
    CREATE_INPROGRESS("CREATE_INPROGRESS"),
    CREATE_FAILED("CREATE_FAILED"),
    UPDATE_SUCCESSFUL("UPDATE_SUCCESSFUL"),
    UPDATE_INPROGRESS("UPDATE_INPROGRESS"),
    UPDATE_FAILED("UPDATE_FAILED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  public Deployment blueprint(ResourceReference blueprint) {
    this.blueprint = blueprint;
    return this;
  }

   /**
   * Get blueprint
   * @return blueprint
  **/
  @Schema(description = "")
  public ResourceReference getBlueprint() {
    return blueprint;
  }

  public void setBlueprint(ResourceReference blueprint) {
    this.blueprint = blueprint;
  }

  public Deployment blueprintId(String blueprintId) {
    this.blueprintId = blueprintId;
    return this;
  }

   /**
   * Deployment blueprint id
   * @return blueprintId
  **/
  @Schema(description = "Deployment blueprint id")
  public String getBlueprintId() {
    return blueprintId;
  }

  public void setBlueprintId(String blueprintId) {
    this.blueprintId = blueprintId;
  }

  public Deployment blueprintVersion(String blueprintVersion) {
    this.blueprintVersion = blueprintVersion;
    return this;
  }

   /**
   * Deployment blueprint version
   * @return blueprintVersion
  **/
  @Schema(description = "Deployment blueprint version")
  public String getBlueprintVersion() {
    return blueprintVersion;
  }

  public void setBlueprintVersion(String blueprintVersion) {
    this.blueprintVersion = blueprintVersion;
  }

  public Deployment catalog(ResourceReference catalog) {
    this.catalog = catalog;
    return this;
  }

   /**
   * Get catalog
   * @return catalog
  **/
  @Schema(description = "")
  public ResourceReference getCatalog() {
    return catalog;
  }

  public void setCatalog(ResourceReference catalog) {
    this.catalog = catalog;
  }

  public Deployment catalogItemId(String catalogItemId) {
    this.catalogItemId = catalogItemId;
    return this;
  }

   /**
   * Deployment catalog item id
   * @return catalogItemId
  **/
  @Schema(description = "Deployment catalog item id")
  public String getCatalogItemId() {
    return catalogItemId;
  }

  public void setCatalogItemId(String catalogItemId) {
    this.catalogItemId = catalogItemId;
  }

  public Deployment catalogItemVersion(String catalogItemVersion) {
    this.catalogItemVersion = catalogItemVersion;
    return this;
  }

   /**
   * Deployment catalog version
   * @return catalogItemVersion
  **/
  @Schema(description = "Deployment catalog version")
  public String getCatalogItemVersion() {
    return catalogItemVersion;
  }

  public void setCatalogItemVersion(String catalogItemVersion) {
    this.catalogItemVersion = catalogItemVersion;
  }

  public Deployment createdAt(Date createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Creation time
   * @return createdAt
  **/
  @Schema(description = "Creation time")
  public Date getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  public Deployment createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Created by
   * @return createdBy
  **/
  @Schema(description = "Created by")
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }

  public Deployment deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

   /**
   * Indicates whether the deployment is deleted or not.
   * @return deleted
  **/
  @Schema(description = "Indicates whether the deployment is deleted or not.")
  public Boolean isDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }

  public Deployment description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the deployment
   * @return description
  **/
  @Schema(description = "Description of the deployment")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Deployment expense(Expense expense) {
    this.expense = expense;
    return this;
  }

   /**
   * Get expense
   * @return expense
  **/
  @Schema(description = "")
  public Expense getExpense() {
    return expense;
  }

  public void setExpense(Expense expense) {
    this.expense = expense;
  }

  public Deployment iconId(String iconId) {
    this.iconId = iconId;
    return this;
  }

   /**
   * Deployment icon id
   * @return iconId
  **/
  @Schema(description = "Deployment icon id")
  public String getIconId() {
    return iconId;
  }

  public void setIconId(String iconId) {
    this.iconId = iconId;
  }

  public Deployment id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Id of the deployment
   * @return id
  **/
  @Schema(description = "Id of the deployment")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public Deployment inputs(Object inputs) {
    this.inputs = inputs;
    return this;
  }

   /**
   * The inputs that were used to request this deployment
   * @return inputs
  **/
  @Schema(description = "The inputs that were used to request this deployment")
  public Object getInputs() {
    return inputs;
  }

  public void setInputs(Object inputs) {
    this.inputs = inputs;
  }

  public Deployment lastRequest(Request lastRequest) {
    this.lastRequest = lastRequest;
    return this;
  }

   /**
   * Get lastRequest
   * @return lastRequest
  **/
  @Schema(description = "")
  public Request getLastRequest() {
    return lastRequest;
  }

  public void setLastRequest(Request lastRequest) {
    this.lastRequest = lastRequest;
  }

  public Deployment lastUpdatedAt(Date lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

   /**
   * Update time
   * @return lastUpdatedAt
  **/
  @Schema(description = "Update time")
  public Date getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(Date lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }

  public Deployment lastUpdatedBy(String lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
    return this;
  }

   /**
   * Updated by
   * @return lastUpdatedBy
  **/
  @Schema(description = "Updated by")
  public String getLastUpdatedBy() {
    return lastUpdatedBy;
  }

  public void setLastUpdatedBy(String lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
  }

  public Deployment leaseExpireAt(Date leaseExpireAt) {
    this.leaseExpireAt = leaseExpireAt;
    return this;
  }

   /**
   * Lease expiration time
   * @return leaseExpireAt
  **/
  @Schema(description = "Lease expiration time")
  public Date getLeaseExpireAt() {
    return leaseExpireAt;
  }

  public void setLeaseExpireAt(Date leaseExpireAt) {
    this.leaseExpireAt = leaseExpireAt;
  }

  public Deployment name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the deployment
   * @return name
  **/
  @Schema(required = true, description = "Name of the deployment")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Deployment orgId(String orgId) {
    this.orgId = orgId;
    return this;
  }

   /**
   * Get orgId
   * @return orgId
  **/
  @Schema(description = "")
  public String getOrgId() {
    return orgId;
  }

  public void setOrgId(String orgId) {
    this.orgId = orgId;
  }

  public Deployment project(ResourceReference project) {
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @Schema(description = "")
  public ResourceReference getProject() {
    return project;
  }

  public void setProject(ResourceReference project) {
    this.project = project;
  }

  public Deployment projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Deployment project id
   * @return projectId
  **/
  @Schema(description = "Deployment project id")
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }

  public Deployment resources(List<Resource> resources) {
    this.resources = resources;
    return this;
  }

  public Deployment addResourcesItem(Resource resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<Resource>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

   /**
   * Expanded resources for the deployment. Content of this property will not be maintained backward compatible
   * @return resources
  **/
  @Schema(description = "Expanded resources for the deployment. Content of this property will not be maintained backward compatible")
  public List<Resource> getResources() {
    return resources;
  }

  public void setResources(List<Resource> resources) {
    this.resources = resources;
  }

  public Deployment status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Deployment status.
   * @return status
  **/
  @Schema(description = "Deployment status.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Deployment deployment = (Deployment) o;
    return Objects.equals(this.blueprint, deployment.blueprint) &&
        Objects.equals(this.blueprintId, deployment.blueprintId) &&
        Objects.equals(this.blueprintVersion, deployment.blueprintVersion) &&
        Objects.equals(this.catalog, deployment.catalog) &&
        Objects.equals(this.catalogItemId, deployment.catalogItemId) &&
        Objects.equals(this.catalogItemVersion, deployment.catalogItemVersion) &&
        Objects.equals(this.createdAt, deployment.createdAt) &&
        Objects.equals(this.createdBy, deployment.createdBy) &&
        Objects.equals(this.deleted, deployment.deleted) &&
        Objects.equals(this.description, deployment.description) &&
        Objects.equals(this.expense, deployment.expense) &&
        Objects.equals(this.iconId, deployment.iconId) &&
        Objects.equals(this.id, deployment.id) &&
        Objects.equals(this.inputs, deployment.inputs) &&
        Objects.equals(this.lastRequest, deployment.lastRequest) &&
        Objects.equals(this.lastUpdatedAt, deployment.lastUpdatedAt) &&
        Objects.equals(this.lastUpdatedBy, deployment.lastUpdatedBy) &&
        Objects.equals(this.leaseExpireAt, deployment.leaseExpireAt) &&
        Objects.equals(this.name, deployment.name) &&
        Objects.equals(this.orgId, deployment.orgId) &&
        Objects.equals(this.project, deployment.project) &&
        Objects.equals(this.projectId, deployment.projectId) &&
        Objects.equals(this.resources, deployment.resources) &&
        Objects.equals(this.status, deployment.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blueprint, blueprintId, blueprintVersion, catalog, catalogItemId, catalogItemVersion, createdAt, createdBy, deleted, description, expense, iconId, id, inputs, lastRequest, lastUpdatedAt, lastUpdatedBy, leaseExpireAt, name, orgId, project, projectId, resources, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Deployment {\n");
    
    sb.append("    blueprint: ").append(toIndentedString(blueprint)).append("\n");
    sb.append("    blueprintId: ").append(toIndentedString(blueprintId)).append("\n");
    sb.append("    blueprintVersion: ").append(toIndentedString(blueprintVersion)).append("\n");
    sb.append("    catalog: ").append(toIndentedString(catalog)).append("\n");
    sb.append("    catalogItemId: ").append(toIndentedString(catalogItemId)).append("\n");
    sb.append("    catalogItemVersion: ").append(toIndentedString(catalogItemVersion)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expense: ").append(toIndentedString(expense)).append("\n");
    sb.append("    iconId: ").append(toIndentedString(iconId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    lastRequest: ").append(toIndentedString(lastRequest)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    lastUpdatedBy: ").append(toIndentedString(lastUpdatedBy)).append("\n");
    sb.append("    leaseExpireAt: ").append(toIndentedString(leaseExpireAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
