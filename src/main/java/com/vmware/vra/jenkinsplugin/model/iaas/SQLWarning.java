/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.iaas;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** SQLWarning */
@javax.annotation.Generated(
    value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
    date = "2020-09-09T18:26:35.661905-04:00[America/New_York]")
public class SQLWarning {
  @SerializedName("nextWarning")
  private SQLWarning nextWarning = null;

  @SerializedName("localizedMessage")
  private String localizedMessage = null;

  @SerializedName("cause")
  private Throwable cause = null;

  @SerializedName("errorCode")
  private Integer errorCode = null;

  @SerializedName("stackTrace")
  private List<StackTraceElement> stackTrace = null;

  @SerializedName("suppressed")
  private List<Throwable> suppressed = null;

  @SerializedName("nextException")
  private SQLException nextException = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("sqlstate")
  private String sqlstate = null;

  public SQLWarning nextWarning(SQLWarning nextWarning) {
    this.nextWarning = nextWarning;
    return this;
  }

  /**
   * Get nextWarning
   *
   * @return nextWarning
   */
  @Schema(description = "")
  public SQLWarning getNextWarning() {
    return nextWarning;
  }

  public void setNextWarning(SQLWarning nextWarning) {
    this.nextWarning = nextWarning;
  }

  public SQLWarning localizedMessage(String localizedMessage) {
    this.localizedMessage = localizedMessage;
    return this;
  }

  /**
   * Get localizedMessage
   *
   * @return localizedMessage
   */
  @Schema(description = "")
  public String getLocalizedMessage() {
    return localizedMessage;
  }

  public void setLocalizedMessage(String localizedMessage) {
    this.localizedMessage = localizedMessage;
  }

  public SQLWarning cause(Throwable cause) {
    this.cause = cause;
    return this;
  }

  /**
   * Get cause
   *
   * @return cause
   */
  @Schema(description = "")
  public Throwable getCause() {
    return cause;
  }

  public void setCause(Throwable cause) {
    this.cause = cause;
  }

  public SQLWarning errorCode(Integer errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * Get errorCode
   *
   * @return errorCode
   */
  @Schema(description = "")
  public Integer getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(Integer errorCode) {
    this.errorCode = errorCode;
  }

  public SQLWarning stackTrace(List<StackTraceElement> stackTrace) {
    this.stackTrace = stackTrace;
    return this;
  }

  public SQLWarning addStackTraceItem(StackTraceElement stackTraceItem) {
    if (this.stackTrace == null) {
      this.stackTrace = new ArrayList<StackTraceElement>();
    }
    this.stackTrace.add(stackTraceItem);
    return this;
  }

  /**
   * Get stackTrace
   *
   * @return stackTrace
   */
  @Schema(description = "")
  public List<StackTraceElement> getStackTrace() {
    return stackTrace;
  }

  public void setStackTrace(List<StackTraceElement> stackTrace) {
    this.stackTrace = stackTrace;
  }

  public SQLWarning suppressed(List<Throwable> suppressed) {
    this.suppressed = suppressed;
    return this;
  }

  public SQLWarning addSuppressedItem(Throwable suppressedItem) {
    if (this.suppressed == null) {
      this.suppressed = new ArrayList<Throwable>();
    }
    this.suppressed.add(suppressedItem);
    return this;
  }

  /**
   * Get suppressed
   *
   * @return suppressed
   */
  @Schema(description = "")
  public List<Throwable> getSuppressed() {
    return suppressed;
  }

  public void setSuppressed(List<Throwable> suppressed) {
    this.suppressed = suppressed;
  }

  public SQLWarning nextException(SQLException nextException) {
    this.nextException = nextException;
    return this;
  }

  /**
   * Get nextException
   *
   * @return nextException
   */
  @Schema(description = "")
  public SQLException getNextException() {
    return nextException;
  }

  public void setNextException(SQLException nextException) {
    this.nextException = nextException;
  }

  public SQLWarning message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   *
   * @return message
   */
  @Schema(description = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public SQLWarning sqlstate(String sqlstate) {
    this.sqlstate = sqlstate;
    return this;
  }

  /**
   * Get sqlstate
   *
   * @return sqlstate
   */
  @Schema(description = "")
  public String getSqlstate() {
    return sqlstate;
  }

  public void setSqlstate(String sqlstate) {
    this.sqlstate = sqlstate;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SQLWarning sqLWarning = (SQLWarning) o;
    return Objects.equals(this.nextWarning, sqLWarning.nextWarning)
        && Objects.equals(this.localizedMessage, sqLWarning.localizedMessage)
        && Objects.equals(this.cause, sqLWarning.cause)
        && Objects.equals(this.errorCode, sqLWarning.errorCode)
        && Objects.equals(this.stackTrace, sqLWarning.stackTrace)
        && Objects.equals(this.suppressed, sqLWarning.suppressed)
        && Objects.equals(this.nextException, sqLWarning.nextException)
        && Objects.equals(this.message, sqLWarning.message)
        && Objects.equals(this.sqlstate, sqLWarning.sqlstate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        nextWarning,
        localizedMessage,
        cause,
        errorCode,
        stackTrace,
        suppressed,
        nextException,
        message,
        sqlstate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SQLWarning {\n");

    sb.append("    nextWarning: ").append(toIndentedString(nextWarning)).append("\n");
    sb.append("    localizedMessage: ").append(toIndentedString(localizedMessage)).append("\n");
    sb.append("    cause: ").append(toIndentedString(cause)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    stackTrace: ").append(toIndentedString(stackTrace)).append("\n");
    sb.append("    suppressed: ").append(toIndentedString(suppressed)).append("\n");
    sb.append("    nextException: ").append(toIndentedString(nextException)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    sqlstate: ").append(toIndentedString(sqlstate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
