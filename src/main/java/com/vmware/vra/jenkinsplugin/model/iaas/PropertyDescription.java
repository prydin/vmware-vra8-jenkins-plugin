/*
 * Copyright (c) 2020 VMware, Inc
 *
 *  SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.iaas;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** PropertyDescription */
@javax.annotation.Generated(
    value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
    date = "2020-09-09T18:26:35.661905-04:00[America/New_York]")
public class PropertyDescription {
  /** Gets or Sets usageOptions */
  @JsonAdapter(UsageOptionsEnum.Adapter.class)
  public enum UsageOptionsEnum {
    SINGLE_ASSIGNMENT("SINGLE_ASSIGNMENT"),
    OPTIONAL("OPTIONAL"),
    SERVICE_USE("SERVICE_USE"),
    INFRASTRUCTURE("INFRASTRUCTURE"),
    AUTO_MERGE_IF_NOT_NULL("AUTO_MERGE_IF_NOT_NULL"),
    ID("ID"),
    LINK("LINK"),
    LINKS("LINKS"),
    SENSITIVE("SENSITIVE"),
    REQUIRED("REQUIRED");

    private String value;

    UsageOptionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UsageOptionsEnum fromValue(String text) {
      for (UsageOptionsEnum b : UsageOptionsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<UsageOptionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UsageOptionsEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UsageOptionsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return UsageOptionsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("usageOptions")
  private List<UsageOptionsEnum> usageOptions = null;

  @SerializedName("propertyDocumentation")
  private String propertyDocumentation = null;

  @SerializedName("kind")
  private String kind = null;

  /** Gets or Sets typeName */
  @JsonAdapter(TypeNameEnum.Adapter.class)
  public enum TypeNameEnum {
    LONG("LONG"),
    STRING("STRING"),
    BYTES("BYTES"),
    PODO("PODO"),
    COLLECTION("COLLECTION"),
    MAP("MAP"),
    BOOLEAN("BOOLEAN"),
    DOUBLE("DOUBLE"),
    INTERNETADDRESSV4("InternetAddressV4"),
    INTERNETADDRESSV6("InternetAddressV6"),
    DATE("DATE"),
    URI("URI"),
    ENUM("ENUM");

    private String value;

    TypeNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeNameEnum fromValue(String text) {
      for (TypeNameEnum b : TypeNameEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeNameEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeNameEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeNameEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("typeName")
  private TypeNameEnum typeName = null;

  @SerializedName("fieldDescriptions")
  private Map<String, PropertyDescription> fieldDescriptions = null;

  @SerializedName("elementDescription")
  private PropertyDescription elementDescription = null;

  @SerializedName("isPrimitive")
  private Boolean isPrimitive = null;

  /** Gets or Sets indexingOptions */
  @JsonAdapter(IndexingOptionsEnum.Adapter.class)
  public enum IndexingOptionsEnum {
    EXPAND("EXPAND"),
    FIXED_ITEM_NAME("FIXED_ITEM_NAME"),
    STORE_ONLY("STORE_ONLY"),
    TEXT("TEXT"),
    CASE_INSENSITIVE("CASE_INSENSITIVE"),
    EXCLUDE_FROM_SIGNATURE("EXCLUDE_FROM_SIGNATURE"),
    SORT("SORT");

    private String value;

    IndexingOptionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndexingOptionsEnum fromValue(String text) {
      for (IndexingOptionsEnum b : IndexingOptionsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IndexingOptionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndexingOptionsEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndexingOptionsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IndexingOptionsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("indexingOptions")
  private List<IndexingOptionsEnum> indexingOptions = null;

  @SerializedName("exampleValue")
  private Object exampleValue = null;

  @SerializedName("enumValues")
  private List<String> enumValues = null;

  public PropertyDescription usageOptions(List<UsageOptionsEnum> usageOptions) {
    this.usageOptions = usageOptions;
    return this;
  }

  public PropertyDescription addUsageOptionsItem(UsageOptionsEnum usageOptionsItem) {
    if (this.usageOptions == null) {
      this.usageOptions = new ArrayList<UsageOptionsEnum>();
    }
    this.usageOptions.add(usageOptionsItem);
    return this;
  }

  /**
   * Get usageOptions
   *
   * @return usageOptions
   */
  @Schema(description = "")
  public List<UsageOptionsEnum> getUsageOptions() {
    return usageOptions;
  }

  public void setUsageOptions(List<UsageOptionsEnum> usageOptions) {
    this.usageOptions = usageOptions;
  }

  public PropertyDescription propertyDocumentation(String propertyDocumentation) {
    this.propertyDocumentation = propertyDocumentation;
    return this;
  }

  /**
   * Get propertyDocumentation
   *
   * @return propertyDocumentation
   */
  @Schema(description = "")
  public String getPropertyDocumentation() {
    return propertyDocumentation;
  }

  public void setPropertyDocumentation(String propertyDocumentation) {
    this.propertyDocumentation = propertyDocumentation;
  }

  public PropertyDescription kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   *
   * @return kind
   */
  @Schema(description = "")
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }

  public PropertyDescription typeName(TypeNameEnum typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * Get typeName
   *
   * @return typeName
   */
  @Schema(description = "")
  public TypeNameEnum getTypeName() {
    return typeName;
  }

  public void setTypeName(TypeNameEnum typeName) {
    this.typeName = typeName;
  }

  public PropertyDescription fieldDescriptions(Map<String, PropertyDescription> fieldDescriptions) {
    this.fieldDescriptions = fieldDescriptions;
    return this;
  }

  public PropertyDescription putFieldDescriptionsItem(
      String key, PropertyDescription fieldDescriptionsItem) {
    if (this.fieldDescriptions == null) {
      this.fieldDescriptions = new HashMap<String, PropertyDescription>();
    }
    this.fieldDescriptions.put(key, fieldDescriptionsItem);
    return this;
  }

  /**
   * Get fieldDescriptions
   *
   * @return fieldDescriptions
   */
  @Schema(description = "")
  public Map<String, PropertyDescription> getFieldDescriptions() {
    return fieldDescriptions;
  }

  public void setFieldDescriptions(Map<String, PropertyDescription> fieldDescriptions) {
    this.fieldDescriptions = fieldDescriptions;
  }

  public PropertyDescription elementDescription(PropertyDescription elementDescription) {
    this.elementDescription = elementDescription;
    return this;
  }

  /**
   * Get elementDescription
   *
   * @return elementDescription
   */
  @Schema(description = "")
  public PropertyDescription getElementDescription() {
    return elementDescription;
  }

  public void setElementDescription(PropertyDescription elementDescription) {
    this.elementDescription = elementDescription;
  }

  public PropertyDescription isPrimitive(Boolean isPrimitive) {
    this.isPrimitive = isPrimitive;
    return this;
  }

  /**
   * Get isPrimitive
   *
   * @return isPrimitive
   */
  @Schema(description = "")
  public Boolean isIsPrimitive() {
    return isPrimitive;
  }

  public void setIsPrimitive(Boolean isPrimitive) {
    this.isPrimitive = isPrimitive;
  }

  public PropertyDescription indexingOptions(List<IndexingOptionsEnum> indexingOptions) {
    this.indexingOptions = indexingOptions;
    return this;
  }

  public PropertyDescription addIndexingOptionsItem(IndexingOptionsEnum indexingOptionsItem) {
    if (this.indexingOptions == null) {
      this.indexingOptions = new ArrayList<IndexingOptionsEnum>();
    }
    this.indexingOptions.add(indexingOptionsItem);
    return this;
  }

  /**
   * Get indexingOptions
   *
   * @return indexingOptions
   */
  @Schema(description = "")
  public List<IndexingOptionsEnum> getIndexingOptions() {
    return indexingOptions;
  }

  public void setIndexingOptions(List<IndexingOptionsEnum> indexingOptions) {
    this.indexingOptions = indexingOptions;
  }

  public PropertyDescription exampleValue(Object exampleValue) {
    this.exampleValue = exampleValue;
    return this;
  }

  /**
   * Get exampleValue
   *
   * @return exampleValue
   */
  @Schema(description = "")
  public Object getExampleValue() {
    return exampleValue;
  }

  public void setExampleValue(Object exampleValue) {
    this.exampleValue = exampleValue;
  }

  public PropertyDescription enumValues(List<String> enumValues) {
    this.enumValues = enumValues;
    return this;
  }

  public PropertyDescription addEnumValuesItem(String enumValuesItem) {
    if (this.enumValues == null) {
      this.enumValues = new ArrayList<String>();
    }
    this.enumValues.add(enumValuesItem);
    return this;
  }

  /**
   * Get enumValues
   *
   * @return enumValues
   */
  @Schema(description = "")
  public List<String> getEnumValues() {
    return enumValues;
  }

  public void setEnumValues(List<String> enumValues) {
    this.enumValues = enumValues;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyDescription propertyDescription = (PropertyDescription) o;
    return Objects.equals(this.usageOptions, propertyDescription.usageOptions)
        && Objects.equals(this.propertyDocumentation, propertyDescription.propertyDocumentation)
        && Objects.equals(this.kind, propertyDescription.kind)
        && Objects.equals(this.typeName, propertyDescription.typeName)
        && Objects.equals(this.fieldDescriptions, propertyDescription.fieldDescriptions)
        && Objects.equals(this.elementDescription, propertyDescription.elementDescription)
        && Objects.equals(this.isPrimitive, propertyDescription.isPrimitive)
        && Objects.equals(this.indexingOptions, propertyDescription.indexingOptions)
        && Objects.equals(this.exampleValue, propertyDescription.exampleValue)
        && Objects.equals(this.enumValues, propertyDescription.enumValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        usageOptions,
        propertyDocumentation,
        kind,
        typeName,
        fieldDescriptions,
        elementDescription,
        isPrimitive,
        indexingOptions,
        exampleValue,
        enumValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyDescription {\n");

    sb.append("    usageOptions: ").append(toIndentedString(usageOptions)).append("\n");
    sb.append("    propertyDocumentation: ")
        .append(toIndentedString(propertyDocumentation))
        .append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    fieldDescriptions: ").append(toIndentedString(fieldDescriptions)).append("\n");
    sb.append("    elementDescription: ").append(toIndentedString(elementDescription)).append("\n");
    sb.append("    isPrimitive: ").append(toIndentedString(isPrimitive)).append("\n");
    sb.append("    indexingOptions: ").append(toIndentedString(indexingOptions)).append("\n");
    sb.append("    exampleValue: ").append(toIndentedString(exampleValue)).append("\n");
    sb.append("    enumValues: ").append(toIndentedString(enumValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
