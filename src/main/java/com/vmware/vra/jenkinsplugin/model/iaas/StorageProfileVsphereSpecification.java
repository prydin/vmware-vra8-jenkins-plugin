/*
 * Copyright (c) 2020 VMware, Inc
 *
 *  SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.iaas;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Represents a specification of vSphere storage profile. */
@Schema(description = "Represents a specification of vSphere storage profile.")
@javax.annotation.Generated(
    value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
    date = "2020-09-09T18:26:35.661905-04:00[America/New_York]")
public class StorageProfileVsphereSpecification {
  @SerializedName("supportsEncryption")
  private Boolean supportsEncryption = null;

  @SerializedName("sharesLevel")
  private String sharesLevel = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("diskMode")
  private String diskMode = null;

  @SerializedName("storagePolicyId")
  private String storagePolicyId = null;

  @SerializedName("tags")
  private List<Tag> tags = null;

  @SerializedName("shares")
  private String shares = null;

  @SerializedName("provisioningType")
  private String provisioningType = null;

  @SerializedName("regionId")
  private String regionId = null;

  @SerializedName("limitIops")
  private String limitIops = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("defaultItem")
  private Boolean defaultItem = null;

  @SerializedName("diskType")
  private String diskType = null;

  @SerializedName("datastoreId")
  private String datastoreId = null;

  public StorageProfileVsphereSpecification supportsEncryption(Boolean supportsEncryption) {
    this.supportsEncryption = supportsEncryption;
    return this;
  }

  /**
   * Indicates whether this storage profile supports encryption or not.
   *
   * @return supportsEncryption
   */
  @Schema(
      example = "false",
      description = "Indicates whether this storage profile supports encryption or not.")
  public Boolean isSupportsEncryption() {
    return supportsEncryption;
  }

  public void setSupportsEncryption(Boolean supportsEncryption) {
    this.supportsEncryption = supportsEncryption;
  }

  public StorageProfileVsphereSpecification sharesLevel(String sharesLevel) {
    this.sharesLevel = sharesLevel;
    return this;
  }

  /**
   * Shares are specified as High, Normal, Low or Custom and these values specify share values with
   * a 4:2:1 ratio, respectively.
   *
   * @return sharesLevel
   */
  @Schema(
      example = "low / normal / high / custom",
      description =
          "Shares are specified as High, Normal, Low or Custom and these values specify share values with a 4:2:1 ratio, respectively. ")
  public String getSharesLevel() {
    return sharesLevel;
  }

  public void setSharesLevel(String sharesLevel) {
    this.sharesLevel = sharesLevel;
  }

  public StorageProfileVsphereSpecification description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A human-friendly description.
   *
   * @return description
   */
  @Schema(description = "A human-friendly description.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public StorageProfileVsphereSpecification diskMode(String diskMode) {
    this.diskMode = diskMode;
    return this;
  }

  /**
   * Type of mode for the disk
   *
   * @return diskMode
   */
  @Schema(
      example = "undefined / independent-persistent / independent-nonpersistent",
      description = "Type of mode for the disk")
  public String getDiskMode() {
    return diskMode;
  }

  public void setDiskMode(String diskMode) {
    this.diskMode = diskMode;
  }

  public StorageProfileVsphereSpecification storagePolicyId(String storagePolicyId) {
    this.storagePolicyId = storagePolicyId;
    return this;
  }

  /**
   * Id of the vSphere Storage Policy to be applied.
   *
   * @return storagePolicyId
   */
  @Schema(example = "6b59743af31d", description = "Id of the vSphere Storage Policy to be applied.")
  public String getStoragePolicyId() {
    return storagePolicyId;
  }

  public void setStoragePolicyId(String storagePolicyId) {
    this.storagePolicyId = storagePolicyId;
  }

  public StorageProfileVsphereSpecification tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public StorageProfileVsphereSpecification addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<Tag>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of tags that represent the capabilities of this storage profile.
   *
   * @return tags
   */
  @Schema(
      example = "[ { \"key\" : \"tier\", \"value\": \"silver\" } ]",
      description = "A list of tags that represent the capabilities of this storage profile.")
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }

  public StorageProfileVsphereSpecification shares(String shares) {
    this.shares = shares;
    return this;
  }

  /**
   * A specific number of shares assigned to each virtual machine.
   *
   * @return shares
   */
  @Schema(
      example = "2000",
      description = "A specific number of shares assigned to each virtual machine.")
  public String getShares() {
    return shares;
  }

  public void setShares(String shares) {
    this.shares = shares;
  }

  public StorageProfileVsphereSpecification provisioningType(String provisioningType) {
    this.provisioningType = provisioningType;
    return this;
  }

  /**
   * Type of provisioning policy for the disk.
   *
   * @return provisioningType
   */
  @Schema(
      example = "thin / thick / eagerZeroedThick",
      description = "Type of provisioning policy for the disk.")
  public String getProvisioningType() {
    return provisioningType;
  }

  public void setProvisioningType(String provisioningType) {
    this.provisioningType = provisioningType;
  }

  public StorageProfileVsphereSpecification regionId(String regionId) {
    this.regionId = regionId;
    return this;
  }

  /**
   * The Id of the region that is associated with the storage profile.
   *
   * @return regionId
   */
  @Schema(
      example = "31186",
      required = true,
      description = "The Id of the region that is associated with the storage profile.")
  public String getRegionId() {
    return regionId;
  }

  public void setRegionId(String regionId) {
    this.regionId = regionId;
  }

  public StorageProfileVsphereSpecification limitIops(String limitIops) {
    this.limitIops = limitIops;
    return this;
  }

  /**
   * The upper bound for the I/O operations per second allocated for each virtual disk.
   *
   * @return limitIops
   */
  @Schema(
      example = "1000",
      description =
          "The upper bound for the I/O operations per second allocated for each virtual disk.")
  public String getLimitIops() {
    return limitIops;
  }

  public void setLimitIops(String limitIops) {
    this.limitIops = limitIops;
  }

  public StorageProfileVsphereSpecification name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A human-friendly name used as an identifier in APIs that support this option.
   *
   * @return name
   */
  @Schema(
      required = true,
      description = "A human-friendly name used as an identifier in APIs that support this option.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public StorageProfileVsphereSpecification defaultItem(Boolean defaultItem) {
    this.defaultItem = defaultItem;
    return this;
  }

  /**
   * Indicates if a storage profile acts as a default storage profile for a disk.
   *
   * @return defaultItem
   */
  @Schema(
      example = "true",
      required = true,
      description = "Indicates if a storage profile acts as a default storage profile for a disk.")
  public Boolean isDefaultItem() {
    return defaultItem;
  }

  public void setDefaultItem(Boolean defaultItem) {
    this.defaultItem = defaultItem;
  }

  public StorageProfileVsphereSpecification diskType(String diskType) {
    this.diskType = diskType;
    return this;
  }

  /**
   * Disk types are specified as Standard - Simple vSphere virtual disks which cannot be managed
   * independently without an attached VM. First Class - Improved version of standard virtual disks,
   * designed to be fully mananged independent storage objects. Empty value is considered as
   * Standard
   *
   * @return diskType
   */
  @Schema(
      example = "standard / firstClass",
      description =
          "Disk types are specified as     Standard - Simple vSphere virtual disks which cannot be managed independently without an attached VM.  First Class - Improved version of standard virtual disks, designed to be fully mananged independent storage objects.   Empty value is considered as Standard")
  public String getDiskType() {
    return diskType;
  }

  public void setDiskType(String diskType) {
    this.diskType = diskType;
  }

  public StorageProfileVsphereSpecification datastoreId(String datastoreId) {
    this.datastoreId = datastoreId;
    return this;
  }

  /**
   * Id of the vSphere Datastore for placing disk and VM.
   *
   * @return datastoreId
   */
  @Schema(example = "08d28", description = "Id of the vSphere Datastore for placing disk and VM.")
  public String getDatastoreId() {
    return datastoreId;
  }

  public void setDatastoreId(String datastoreId) {
    this.datastoreId = datastoreId;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageProfileVsphereSpecification storageProfileVsphereSpecification =
        (StorageProfileVsphereSpecification) o;
    return Objects.equals(
            this.supportsEncryption, storageProfileVsphereSpecification.supportsEncryption)
        && Objects.equals(this.sharesLevel, storageProfileVsphereSpecification.sharesLevel)
        && Objects.equals(this.description, storageProfileVsphereSpecification.description)
        && Objects.equals(this.diskMode, storageProfileVsphereSpecification.diskMode)
        && Objects.equals(this.storagePolicyId, storageProfileVsphereSpecification.storagePolicyId)
        && Objects.equals(this.tags, storageProfileVsphereSpecification.tags)
        && Objects.equals(this.shares, storageProfileVsphereSpecification.shares)
        && Objects.equals(
            this.provisioningType, storageProfileVsphereSpecification.provisioningType)
        && Objects.equals(this.regionId, storageProfileVsphereSpecification.regionId)
        && Objects.equals(this.limitIops, storageProfileVsphereSpecification.limitIops)
        && Objects.equals(this.name, storageProfileVsphereSpecification.name)
        && Objects.equals(this.defaultItem, storageProfileVsphereSpecification.defaultItem)
        && Objects.equals(this.diskType, storageProfileVsphereSpecification.diskType)
        && Objects.equals(this.datastoreId, storageProfileVsphereSpecification.datastoreId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        supportsEncryption,
        sharesLevel,
        description,
        diskMode,
        storagePolicyId,
        tags,
        shares,
        provisioningType,
        regionId,
        limitIops,
        name,
        defaultItem,
        diskType,
        datastoreId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageProfileVsphereSpecification {\n");

    sb.append("    supportsEncryption: ").append(toIndentedString(supportsEncryption)).append("\n");
    sb.append("    sharesLevel: ").append(toIndentedString(sharesLevel)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    diskMode: ").append(toIndentedString(diskMode)).append("\n");
    sb.append("    storagePolicyId: ").append(toIndentedString(storagePolicyId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    shares: ").append(toIndentedString(shares)).append("\n");
    sb.append("    provisioningType: ").append(toIndentedString(provisioningType)).append("\n");
    sb.append("    regionId: ").append(toIndentedString(regionId)).append("\n");
    sb.append("    limitIops: ").append(toIndentedString(limitIops)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    defaultItem: ").append(toIndentedString(defaultItem)).append("\n");
    sb.append("    diskType: ").append(toIndentedString(diskType)).append("\n");
    sb.append("    datastoreId: ").append(toIndentedString(datastoreId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
