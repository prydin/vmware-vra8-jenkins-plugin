/*
 * Copyright (c) 2020 VMware, Inc
 *
 *  SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.iaas;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** ServiceHostState */
@javax.annotation.Generated(
    value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
    date = "2020-09-09T18:26:35.661905-04:00[America/New_York]")
public class ServiceHostState {
  @SerializedName("isProcessOwner")
  private Boolean isProcessOwner = null;

  @SerializedName("initialPeerNodes")
  private List<String> initialPeerNodes = null;

  @SerializedName("documentTransactionId")
  private String documentTransactionId = null;

  @SerializedName("documentUpdateAction")
  private String documentUpdateAction = null;

  @SerializedName("documentVersion")
  private Long documentVersion = null;

  @SerializedName("privateKeyPassphrase")
  private String privateKeyPassphrase = null;

  @SerializedName("codeProperties")
  private Map<String, String> codeProperties = null;

  /** Gets or Sets sslClientAuthMode */
  @JsonAdapter(SslClientAuthModeEnum.Adapter.class)
  public enum SslClientAuthModeEnum {
    NONE("NONE"),
    WANT("WANT"),
    NEED("NEED");

    private String value;

    SslClientAuthModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SslClientAuthModeEnum fromValue(String text) {
      for (SslClientAuthModeEnum b : SslClientAuthModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SslClientAuthModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SslClientAuthModeEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SslClientAuthModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SslClientAuthModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("sslClientAuthMode")
  private SslClientAuthModeEnum sslClientAuthMode = null;

  @SerializedName("operationTimeoutMicros")
  private Long operationTimeoutMicros = null;

  @SerializedName("isAuthorizationEnabled")
  private Boolean isAuthorizationEnabled = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("isServiceStateCaching")
  private Boolean isServiceStateCaching = null;

  @SerializedName("authProviderHostURI")
  private String authProviderHostURI = null;

  @SerializedName("documentAuthPrincipalLink")
  private String documentAuthPrincipalLink = null;

  @SerializedName("documentExpirationTimeMicros")
  private Long documentExpirationTimeMicros = null;

  @SerializedName("resourceSandboxFileReference")
  private String resourceSandboxFileReference = null;

  @SerializedName("documentDescription")
  private ServiceDocumentDescription documentDescription = null;

  @SerializedName("documentKind")
  private String documentKind = null;

  @SerializedName("privateKeyFileReference")
  private String privateKeyFileReference = null;

  @SerializedName("httpPort")
  private Integer httpPort = null;

  @SerializedName("serviceCacheClearDelayMicros")
  private Long serviceCacheClearDelayMicros = null;

  @SerializedName("storageSandboxFileReference")
  private String storageSandboxFileReference = null;

  @SerializedName("bindAddress")
  private String bindAddress = null;

  @SerializedName("documentUpdateTimeMicros")
  private Long documentUpdateTimeMicros = null;

  @SerializedName("certificateFileReference")
  private String certificateFileReference = null;

  @SerializedName("systemInfo")
  private SystemHostInfo systemInfo = null;

  @SerializedName("autoBackupDirectoryReference")
  private String autoBackupDirectoryReference = null;

  @SerializedName("documentSelfLink")
  private String documentSelfLink = null;

  @SerializedName("documentOwner")
  private String documentOwner = null;

  @SerializedName("location")
  private String location = null;

  @SerializedName("isAutoBackupEnabled")
  private Boolean isAutoBackupEnabled = null;

  @SerializedName("publicUri")
  private String publicUri = null;

  public ServiceHostState isProcessOwner(Boolean isProcessOwner) {
    this.isProcessOwner = isProcessOwner;
    return this;
  }

  /**
   * Get isProcessOwner
   *
   * @return isProcessOwner
   */
  @Schema(description = "")
  public Boolean isIsProcessOwner() {
    return isProcessOwner;
  }

  public void setIsProcessOwner(Boolean isProcessOwner) {
    this.isProcessOwner = isProcessOwner;
  }

  public ServiceHostState initialPeerNodes(List<String> initialPeerNodes) {
    this.initialPeerNodes = initialPeerNodes;
    return this;
  }

  public ServiceHostState addInitialPeerNodesItem(String initialPeerNodesItem) {
    if (this.initialPeerNodes == null) {
      this.initialPeerNodes = new ArrayList<String>();
    }
    this.initialPeerNodes.add(initialPeerNodesItem);
    return this;
  }

  /**
   * Get initialPeerNodes
   *
   * @return initialPeerNodes
   */
  @Schema(description = "")
  public List<String> getInitialPeerNodes() {
    return initialPeerNodes;
  }

  public void setInitialPeerNodes(List<String> initialPeerNodes) {
    this.initialPeerNodes = initialPeerNodes;
  }

  public ServiceHostState documentTransactionId(String documentTransactionId) {
    this.documentTransactionId = documentTransactionId;
    return this;
  }

  /**
   * Get documentTransactionId
   *
   * @return documentTransactionId
   */
  @Schema(description = "")
  public String getDocumentTransactionId() {
    return documentTransactionId;
  }

  public void setDocumentTransactionId(String documentTransactionId) {
    this.documentTransactionId = documentTransactionId;
  }

  public ServiceHostState documentUpdateAction(String documentUpdateAction) {
    this.documentUpdateAction = documentUpdateAction;
    return this;
  }

  /**
   * Get documentUpdateAction
   *
   * @return documentUpdateAction
   */
  @Schema(description = "")
  public String getDocumentUpdateAction() {
    return documentUpdateAction;
  }

  public void setDocumentUpdateAction(String documentUpdateAction) {
    this.documentUpdateAction = documentUpdateAction;
  }

  public ServiceHostState documentVersion(Long documentVersion) {
    this.documentVersion = documentVersion;
    return this;
  }

  /**
   * Get documentVersion
   *
   * @return documentVersion
   */
  @Schema(description = "")
  public Long getDocumentVersion() {
    return documentVersion;
  }

  public void setDocumentVersion(Long documentVersion) {
    this.documentVersion = documentVersion;
  }

  public ServiceHostState privateKeyPassphrase(String privateKeyPassphrase) {
    this.privateKeyPassphrase = privateKeyPassphrase;
    return this;
  }

  /**
   * Get privateKeyPassphrase
   *
   * @return privateKeyPassphrase
   */
  @Schema(description = "")
  public String getPrivateKeyPassphrase() {
    return privateKeyPassphrase;
  }

  public void setPrivateKeyPassphrase(String privateKeyPassphrase) {
    this.privateKeyPassphrase = privateKeyPassphrase;
  }

  public ServiceHostState codeProperties(Map<String, String> codeProperties) {
    this.codeProperties = codeProperties;
    return this;
  }

  public ServiceHostState putCodePropertiesItem(String key, String codePropertiesItem) {
    if (this.codeProperties == null) {
      this.codeProperties = new HashMap<String, String>();
    }
    this.codeProperties.put(key, codePropertiesItem);
    return this;
  }

  /**
   * Get codeProperties
   *
   * @return codeProperties
   */
  @Schema(description = "")
  public Map<String, String> getCodeProperties() {
    return codeProperties;
  }

  public void setCodeProperties(Map<String, String> codeProperties) {
    this.codeProperties = codeProperties;
  }

  public ServiceHostState sslClientAuthMode(SslClientAuthModeEnum sslClientAuthMode) {
    this.sslClientAuthMode = sslClientAuthMode;
    return this;
  }

  /**
   * Get sslClientAuthMode
   *
   * @return sslClientAuthMode
   */
  @Schema(description = "")
  public SslClientAuthModeEnum getSslClientAuthMode() {
    return sslClientAuthMode;
  }

  public void setSslClientAuthMode(SslClientAuthModeEnum sslClientAuthMode) {
    this.sslClientAuthMode = sslClientAuthMode;
  }

  public ServiceHostState operationTimeoutMicros(Long operationTimeoutMicros) {
    this.operationTimeoutMicros = operationTimeoutMicros;
    return this;
  }

  /**
   * Get operationTimeoutMicros
   *
   * @return operationTimeoutMicros
   */
  @Schema(description = "")
  public Long getOperationTimeoutMicros() {
    return operationTimeoutMicros;
  }

  public void setOperationTimeoutMicros(Long operationTimeoutMicros) {
    this.operationTimeoutMicros = operationTimeoutMicros;
  }

  public ServiceHostState isAuthorizationEnabled(Boolean isAuthorizationEnabled) {
    this.isAuthorizationEnabled = isAuthorizationEnabled;
    return this;
  }

  /**
   * Get isAuthorizationEnabled
   *
   * @return isAuthorizationEnabled
   */
  @Schema(description = "")
  public Boolean isIsAuthorizationEnabled() {
    return isAuthorizationEnabled;
  }

  public void setIsAuthorizationEnabled(Boolean isAuthorizationEnabled) {
    this.isAuthorizationEnabled = isAuthorizationEnabled;
  }

  public ServiceHostState id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   */
  @Schema(description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ServiceHostState isServiceStateCaching(Boolean isServiceStateCaching) {
    this.isServiceStateCaching = isServiceStateCaching;
    return this;
  }

  /**
   * Get isServiceStateCaching
   *
   * @return isServiceStateCaching
   */
  @Schema(description = "")
  public Boolean isIsServiceStateCaching() {
    return isServiceStateCaching;
  }

  public void setIsServiceStateCaching(Boolean isServiceStateCaching) {
    this.isServiceStateCaching = isServiceStateCaching;
  }

  public ServiceHostState authProviderHostURI(String authProviderHostURI) {
    this.authProviderHostURI = authProviderHostURI;
    return this;
  }

  /**
   * Get authProviderHostURI
   *
   * @return authProviderHostURI
   */
  @Schema(description = "")
  public String getAuthProviderHostURI() {
    return authProviderHostURI;
  }

  public void setAuthProviderHostURI(String authProviderHostURI) {
    this.authProviderHostURI = authProviderHostURI;
  }

  public ServiceHostState documentAuthPrincipalLink(String documentAuthPrincipalLink) {
    this.documentAuthPrincipalLink = documentAuthPrincipalLink;
    return this;
  }

  /**
   * Get documentAuthPrincipalLink
   *
   * @return documentAuthPrincipalLink
   */
  @Schema(description = "")
  public String getDocumentAuthPrincipalLink() {
    return documentAuthPrincipalLink;
  }

  public void setDocumentAuthPrincipalLink(String documentAuthPrincipalLink) {
    this.documentAuthPrincipalLink = documentAuthPrincipalLink;
  }

  public ServiceHostState documentExpirationTimeMicros(Long documentExpirationTimeMicros) {
    this.documentExpirationTimeMicros = documentExpirationTimeMicros;
    return this;
  }

  /**
   * Get documentExpirationTimeMicros
   *
   * @return documentExpirationTimeMicros
   */
  @Schema(description = "")
  public Long getDocumentExpirationTimeMicros() {
    return documentExpirationTimeMicros;
  }

  public void setDocumentExpirationTimeMicros(Long documentExpirationTimeMicros) {
    this.documentExpirationTimeMicros = documentExpirationTimeMicros;
  }

  public ServiceHostState resourceSandboxFileReference(String resourceSandboxFileReference) {
    this.resourceSandboxFileReference = resourceSandboxFileReference;
    return this;
  }

  /**
   * Get resourceSandboxFileReference
   *
   * @return resourceSandboxFileReference
   */
  @Schema(description = "")
  public String getResourceSandboxFileReference() {
    return resourceSandboxFileReference;
  }

  public void setResourceSandboxFileReference(String resourceSandboxFileReference) {
    this.resourceSandboxFileReference = resourceSandboxFileReference;
  }

  public ServiceHostState documentDescription(ServiceDocumentDescription documentDescription) {
    this.documentDescription = documentDescription;
    return this;
  }

  /**
   * Get documentDescription
   *
   * @return documentDescription
   */
  @Schema(description = "")
  public ServiceDocumentDescription getDocumentDescription() {
    return documentDescription;
  }

  public void setDocumentDescription(ServiceDocumentDescription documentDescription) {
    this.documentDescription = documentDescription;
  }

  public ServiceHostState documentKind(String documentKind) {
    this.documentKind = documentKind;
    return this;
  }

  /**
   * Get documentKind
   *
   * @return documentKind
   */
  @Schema(description = "")
  public String getDocumentKind() {
    return documentKind;
  }

  public void setDocumentKind(String documentKind) {
    this.documentKind = documentKind;
  }

  public ServiceHostState privateKeyFileReference(String privateKeyFileReference) {
    this.privateKeyFileReference = privateKeyFileReference;
    return this;
  }

  /**
   * Get privateKeyFileReference
   *
   * @return privateKeyFileReference
   */
  @Schema(description = "")
  public String getPrivateKeyFileReference() {
    return privateKeyFileReference;
  }

  public void setPrivateKeyFileReference(String privateKeyFileReference) {
    this.privateKeyFileReference = privateKeyFileReference;
  }

  public ServiceHostState httpPort(Integer httpPort) {
    this.httpPort = httpPort;
    return this;
  }

  /**
   * Get httpPort
   *
   * @return httpPort
   */
  @Schema(description = "")
  public Integer getHttpPort() {
    return httpPort;
  }

  public void setHttpPort(Integer httpPort) {
    this.httpPort = httpPort;
  }

  public ServiceHostState serviceCacheClearDelayMicros(Long serviceCacheClearDelayMicros) {
    this.serviceCacheClearDelayMicros = serviceCacheClearDelayMicros;
    return this;
  }

  /**
   * Get serviceCacheClearDelayMicros
   *
   * @return serviceCacheClearDelayMicros
   */
  @Schema(description = "")
  public Long getServiceCacheClearDelayMicros() {
    return serviceCacheClearDelayMicros;
  }

  public void setServiceCacheClearDelayMicros(Long serviceCacheClearDelayMicros) {
    this.serviceCacheClearDelayMicros = serviceCacheClearDelayMicros;
  }

  public ServiceHostState storageSandboxFileReference(String storageSandboxFileReference) {
    this.storageSandboxFileReference = storageSandboxFileReference;
    return this;
  }

  /**
   * Get storageSandboxFileReference
   *
   * @return storageSandboxFileReference
   */
  @Schema(description = "")
  public String getStorageSandboxFileReference() {
    return storageSandboxFileReference;
  }

  public void setStorageSandboxFileReference(String storageSandboxFileReference) {
    this.storageSandboxFileReference = storageSandboxFileReference;
  }

  public ServiceHostState bindAddress(String bindAddress) {
    this.bindAddress = bindAddress;
    return this;
  }

  /**
   * Get bindAddress
   *
   * @return bindAddress
   */
  @Schema(description = "")
  public String getBindAddress() {
    return bindAddress;
  }

  public void setBindAddress(String bindAddress) {
    this.bindAddress = bindAddress;
  }

  public ServiceHostState documentUpdateTimeMicros(Long documentUpdateTimeMicros) {
    this.documentUpdateTimeMicros = documentUpdateTimeMicros;
    return this;
  }

  /**
   * Get documentUpdateTimeMicros
   *
   * @return documentUpdateTimeMicros
   */
  @Schema(description = "")
  public Long getDocumentUpdateTimeMicros() {
    return documentUpdateTimeMicros;
  }

  public void setDocumentUpdateTimeMicros(Long documentUpdateTimeMicros) {
    this.documentUpdateTimeMicros = documentUpdateTimeMicros;
  }

  public ServiceHostState certificateFileReference(String certificateFileReference) {
    this.certificateFileReference = certificateFileReference;
    return this;
  }

  /**
   * Get certificateFileReference
   *
   * @return certificateFileReference
   */
  @Schema(description = "")
  public String getCertificateFileReference() {
    return certificateFileReference;
  }

  public void setCertificateFileReference(String certificateFileReference) {
    this.certificateFileReference = certificateFileReference;
  }

  public ServiceHostState systemInfo(SystemHostInfo systemInfo) {
    this.systemInfo = systemInfo;
    return this;
  }

  /**
   * Get systemInfo
   *
   * @return systemInfo
   */
  @Schema(description = "")
  public SystemHostInfo getSystemInfo() {
    return systemInfo;
  }

  public void setSystemInfo(SystemHostInfo systemInfo) {
    this.systemInfo = systemInfo;
  }

  public ServiceHostState autoBackupDirectoryReference(String autoBackupDirectoryReference) {
    this.autoBackupDirectoryReference = autoBackupDirectoryReference;
    return this;
  }

  /**
   * Get autoBackupDirectoryReference
   *
   * @return autoBackupDirectoryReference
   */
  @Schema(description = "")
  public String getAutoBackupDirectoryReference() {
    return autoBackupDirectoryReference;
  }

  public void setAutoBackupDirectoryReference(String autoBackupDirectoryReference) {
    this.autoBackupDirectoryReference = autoBackupDirectoryReference;
  }

  public ServiceHostState documentSelfLink(String documentSelfLink) {
    this.documentSelfLink = documentSelfLink;
    return this;
  }

  /**
   * Get documentSelfLink
   *
   * @return documentSelfLink
   */
  @Schema(description = "")
  public String getDocumentSelfLink() {
    return documentSelfLink;
  }

  public void setDocumentSelfLink(String documentSelfLink) {
    this.documentSelfLink = documentSelfLink;
  }

  public ServiceHostState documentOwner(String documentOwner) {
    this.documentOwner = documentOwner;
    return this;
  }

  /**
   * Get documentOwner
   *
   * @return documentOwner
   */
  @Schema(description = "")
  public String getDocumentOwner() {
    return documentOwner;
  }

  public void setDocumentOwner(String documentOwner) {
    this.documentOwner = documentOwner;
  }

  public ServiceHostState location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   *
   * @return location
   */
  @Schema(description = "")
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public ServiceHostState isAutoBackupEnabled(Boolean isAutoBackupEnabled) {
    this.isAutoBackupEnabled = isAutoBackupEnabled;
    return this;
  }

  /**
   * Get isAutoBackupEnabled
   *
   * @return isAutoBackupEnabled
   */
  @Schema(description = "")
  public Boolean isIsAutoBackupEnabled() {
    return isAutoBackupEnabled;
  }

  public void setIsAutoBackupEnabled(Boolean isAutoBackupEnabled) {
    this.isAutoBackupEnabled = isAutoBackupEnabled;
  }

  public ServiceHostState publicUri(String publicUri) {
    this.publicUri = publicUri;
    return this;
  }

  /**
   * Get publicUri
   *
   * @return publicUri
   */
  @Schema(description = "")
  public String getPublicUri() {
    return publicUri;
  }

  public void setPublicUri(String publicUri) {
    this.publicUri = publicUri;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceHostState serviceHostState = (ServiceHostState) o;
    return Objects.equals(this.isProcessOwner, serviceHostState.isProcessOwner)
        && Objects.equals(this.initialPeerNodes, serviceHostState.initialPeerNodes)
        && Objects.equals(this.documentTransactionId, serviceHostState.documentTransactionId)
        && Objects.equals(this.documentUpdateAction, serviceHostState.documentUpdateAction)
        && Objects.equals(this.documentVersion, serviceHostState.documentVersion)
        && Objects.equals(this.privateKeyPassphrase, serviceHostState.privateKeyPassphrase)
        && Objects.equals(this.codeProperties, serviceHostState.codeProperties)
        && Objects.equals(this.sslClientAuthMode, serviceHostState.sslClientAuthMode)
        && Objects.equals(this.operationTimeoutMicros, serviceHostState.operationTimeoutMicros)
        && Objects.equals(this.isAuthorizationEnabled, serviceHostState.isAuthorizationEnabled)
        && Objects.equals(this.id, serviceHostState.id)
        && Objects.equals(this.isServiceStateCaching, serviceHostState.isServiceStateCaching)
        && Objects.equals(this.authProviderHostURI, serviceHostState.authProviderHostURI)
        && Objects.equals(
            this.documentAuthPrincipalLink, serviceHostState.documentAuthPrincipalLink)
        && Objects.equals(
            this.documentExpirationTimeMicros, serviceHostState.documentExpirationTimeMicros)
        && Objects.equals(
            this.resourceSandboxFileReference, serviceHostState.resourceSandboxFileReference)
        && Objects.equals(this.documentDescription, serviceHostState.documentDescription)
        && Objects.equals(this.documentKind, serviceHostState.documentKind)
        && Objects.equals(this.privateKeyFileReference, serviceHostState.privateKeyFileReference)
        && Objects.equals(this.httpPort, serviceHostState.httpPort)
        && Objects.equals(
            this.serviceCacheClearDelayMicros, serviceHostState.serviceCacheClearDelayMicros)
        && Objects.equals(
            this.storageSandboxFileReference, serviceHostState.storageSandboxFileReference)
        && Objects.equals(this.bindAddress, serviceHostState.bindAddress)
        && Objects.equals(this.documentUpdateTimeMicros, serviceHostState.documentUpdateTimeMicros)
        && Objects.equals(this.certificateFileReference, serviceHostState.certificateFileReference)
        && Objects.equals(this.systemInfo, serviceHostState.systemInfo)
        && Objects.equals(
            this.autoBackupDirectoryReference, serviceHostState.autoBackupDirectoryReference)
        && Objects.equals(this.documentSelfLink, serviceHostState.documentSelfLink)
        && Objects.equals(this.documentOwner, serviceHostState.documentOwner)
        && Objects.equals(this.location, serviceHostState.location)
        && Objects.equals(this.isAutoBackupEnabled, serviceHostState.isAutoBackupEnabled)
        && Objects.equals(this.publicUri, serviceHostState.publicUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        isProcessOwner,
        initialPeerNodes,
        documentTransactionId,
        documentUpdateAction,
        documentVersion,
        privateKeyPassphrase,
        codeProperties,
        sslClientAuthMode,
        operationTimeoutMicros,
        isAuthorizationEnabled,
        id,
        isServiceStateCaching,
        authProviderHostURI,
        documentAuthPrincipalLink,
        documentExpirationTimeMicros,
        resourceSandboxFileReference,
        documentDescription,
        documentKind,
        privateKeyFileReference,
        httpPort,
        serviceCacheClearDelayMicros,
        storageSandboxFileReference,
        bindAddress,
        documentUpdateTimeMicros,
        certificateFileReference,
        systemInfo,
        autoBackupDirectoryReference,
        documentSelfLink,
        documentOwner,
        location,
        isAutoBackupEnabled,
        publicUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceHostState {\n");

    sb.append("    isProcessOwner: ").append(toIndentedString(isProcessOwner)).append("\n");
    sb.append("    initialPeerNodes: ").append(toIndentedString(initialPeerNodes)).append("\n");
    sb.append("    documentTransactionId: ")
        .append(toIndentedString(documentTransactionId))
        .append("\n");
    sb.append("    documentUpdateAction: ")
        .append(toIndentedString(documentUpdateAction))
        .append("\n");
    sb.append("    documentVersion: ").append(toIndentedString(documentVersion)).append("\n");
    sb.append("    privateKeyPassphrase: ")
        .append(toIndentedString(privateKeyPassphrase))
        .append("\n");
    sb.append("    codeProperties: ").append(toIndentedString(codeProperties)).append("\n");
    sb.append("    sslClientAuthMode: ").append(toIndentedString(sslClientAuthMode)).append("\n");
    sb.append("    operationTimeoutMicros: ")
        .append(toIndentedString(operationTimeoutMicros))
        .append("\n");
    sb.append("    isAuthorizationEnabled: ")
        .append(toIndentedString(isAuthorizationEnabled))
        .append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isServiceStateCaching: ")
        .append(toIndentedString(isServiceStateCaching))
        .append("\n");
    sb.append("    authProviderHostURI: ")
        .append(toIndentedString(authProviderHostURI))
        .append("\n");
    sb.append("    documentAuthPrincipalLink: ")
        .append(toIndentedString(documentAuthPrincipalLink))
        .append("\n");
    sb.append("    documentExpirationTimeMicros: ")
        .append(toIndentedString(documentExpirationTimeMicros))
        .append("\n");
    sb.append("    resourceSandboxFileReference: ")
        .append(toIndentedString(resourceSandboxFileReference))
        .append("\n");
    sb.append("    documentDescription: ")
        .append(toIndentedString(documentDescription))
        .append("\n");
    sb.append("    documentKind: ").append(toIndentedString(documentKind)).append("\n");
    sb.append("    privateKeyFileReference: ")
        .append(toIndentedString(privateKeyFileReference))
        .append("\n");
    sb.append("    httpPort: ").append(toIndentedString(httpPort)).append("\n");
    sb.append("    serviceCacheClearDelayMicros: ")
        .append(toIndentedString(serviceCacheClearDelayMicros))
        .append("\n");
    sb.append("    storageSandboxFileReference: ")
        .append(toIndentedString(storageSandboxFileReference))
        .append("\n");
    sb.append("    bindAddress: ").append(toIndentedString(bindAddress)).append("\n");
    sb.append("    documentUpdateTimeMicros: ")
        .append(toIndentedString(documentUpdateTimeMicros))
        .append("\n");
    sb.append("    certificateFileReference: ")
        .append(toIndentedString(certificateFileReference))
        .append("\n");
    sb.append("    systemInfo: ").append(toIndentedString(systemInfo)).append("\n");
    sb.append("    autoBackupDirectoryReference: ")
        .append(toIndentedString(autoBackupDirectoryReference))
        .append("\n");
    sb.append("    documentSelfLink: ").append(toIndentedString(documentSelfLink)).append("\n");
    sb.append("    documentOwner: ").append(toIndentedString(documentOwner)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    isAutoBackupEnabled: ")
        .append(toIndentedString(isAutoBackupEnabled))
        .append("\n");
    sb.append("    publicUri: ").append(toIndentedString(publicUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
