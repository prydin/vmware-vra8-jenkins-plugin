/*
 * VMware Service Broker API
 * A multi-cloud API for Cloud Automation Services
 *
 * OpenAPI spec version: 2020-08-25
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.catalog;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Date;
import java.util.UUID;
/**
 * Represents deployment requests.
 */
@Schema(description = "Represents deployment requests.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-09T18:27:41.063635-04:00[America/New_York]")
public class Request {
  @SerializedName("actionId")
  private String actionId = null;

  @SerializedName("approvedAt")
  private Date approvedAt = null;

  @SerializedName("blueprintId")
  private String blueprintId = null;

  @SerializedName("cancelable")
  private Boolean cancelable = null;

  @SerializedName("catalogItemId")
  private String catalogItemId = null;

  @SerializedName("completedAt")
  private Date completedAt = null;

  @SerializedName("completedTasks")
  private Integer completedTasks = null;

  @SerializedName("createdAt")
  private Date createdAt = null;

  @SerializedName("details")
  private String details = null;

  @SerializedName("dismissed")
  private Boolean dismissed = null;

  @SerializedName("id")
  private UUID id = null;

  @SerializedName("initializedAt")
  private Date initializedAt = null;

  @SerializedName("inputs")
  private Object inputs = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("outputs")
  private Object outputs = null;

  @SerializedName("requestedBy")
  private String requestedBy = null;

  @SerializedName("resourceName")
  private String resourceName = null;

  /**
   * Request overall execution status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CREATED("CREATED"),
    PENDING("PENDING"),
    INITIALIZATION("INITIALIZATION"),
    CHECKING_APPROVAL("CHECKING_APPROVAL"),
    APPROVAL_PENDING("APPROVAL_PENDING"),
    INPROGRESS("INPROGRESS"),
    COMPLETION("COMPLETION"),
    APPROVAL_REJECTED("APPROVAL_REJECTED"),
    ABORTED("ABORTED"),
    SUCCESSFUL("SUCCESSFUL"),
    FAILED("FAILED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("totalTasks")
  private Integer totalTasks = null;

  @SerializedName("updatedAt")
  private Date updatedAt = null;

  public Request actionId(String actionId) {
    this.actionId = actionId;
    return this;
  }

   /**
   * Identifier of the requested action
   * @return actionId
  **/
  @Schema(description = "Identifier of the requested action")
  public String getActionId() {
    return actionId;
  }

  public void setActionId(String actionId) {
    this.actionId = actionId;
  }

  public Request approvedAt(Date approvedAt) {
    this.approvedAt = approvedAt;
    return this;
  }

   /**
   * Time at which the request was approved.
   * @return approvedAt
  **/
  @Schema(description = "Time at which the request was approved.")
  public Date getApprovedAt() {
    return approvedAt;
  }

  public void setApprovedAt(Date approvedAt) {
    this.approvedAt = approvedAt;
  }

  public Request blueprintId(String blueprintId) {
    this.blueprintId = blueprintId;
    return this;
  }

   /**
   * Identifier of the requested blueprint in the form &#x27;UUID:version&#x27;
   * @return blueprintId
  **/
  @Schema(description = "Identifier of the requested blueprint in the form 'UUID:version'")
  public String getBlueprintId() {
    return blueprintId;
  }

  public void setBlueprintId(String blueprintId) {
    this.blueprintId = blueprintId;
  }

  public Request cancelable(Boolean cancelable) {
    this.cancelable = cancelable;
    return this;
  }

   /**
   * Indicates whether request can be canceled or not.
   * @return cancelable
  **/
  @Schema(description = "Indicates whether request can be canceled or not.")
  public Boolean isCancelable() {
    return cancelable;
  }

  public void setCancelable(Boolean cancelable) {
    this.cancelable = cancelable;
  }

  public Request catalogItemId(String catalogItemId) {
    this.catalogItemId = catalogItemId;
    return this;
  }

   /**
   * Identifier of the requested catalog item in the form &#x27;UUID:version&#x27;
   * @return catalogItemId
  **/
  @Schema(description = "Identifier of the requested catalog item in the form 'UUID:version'")
  public String getCatalogItemId() {
    return catalogItemId;
  }

  public void setCatalogItemId(String catalogItemId) {
    this.catalogItemId = catalogItemId;
  }

  public Request completedAt(Date completedAt) {
    this.completedAt = completedAt;
    return this;
  }

   /**
   * Time at which the request completed.
   * @return completedAt
  **/
  @Schema(description = "Time at which the request completed.")
  public Date getCompletedAt() {
    return completedAt;
  }

  public void setCompletedAt(Date completedAt) {
    this.completedAt = completedAt;
  }

  public Request completedTasks(Integer completedTasks) {
    this.completedTasks = completedTasks;
    return this;
  }

   /**
   * The number of tasks completed while fulfilling this request.
   * @return completedTasks
  **/
  @Schema(required = true, description = "The number of tasks completed while fulfilling this request.")
  public Integer getCompletedTasks() {
    return completedTasks;
  }

  public void setCompletedTasks(Integer completedTasks) {
    this.completedTasks = completedTasks;
  }

  public Request createdAt(Date createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Creation time (e.g. date format &#x27;2019-07-13T23:16:49.310Z&#x27;).
   * @return createdAt
  **/
  @Schema(required = true, description = "Creation time (e.g. date format '2019-07-13T23:16:49.310Z').")
  public Date getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  public Request details(String details) {
    this.details = details;
    return this;
  }

   /**
   * Longer user-friendly details of the request.
   * @return details
  **/
  @Schema(description = "Longer user-friendly details of the request.")
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }

  public Request dismissed(Boolean dismissed) {
    this.dismissed = dismissed;
    return this;
  }

   /**
   * Indicates whether request is in dismissed state.
   * @return dismissed
  **/
  @Schema(description = "Indicates whether request is in dismissed state.")
  public Boolean isDismissed() {
    return dismissed;
  }

  public void setDismissed(Boolean dismissed) {
    this.dismissed = dismissed;
  }

  public Request id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Request identifier
   * @return id
  **/
  @Schema(description = "Request identifier")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public Request initializedAt(Date initializedAt) {
    this.initializedAt = initializedAt;
    return this;
  }

   /**
   * Time at which the request was initialized.
   * @return initializedAt
  **/
  @Schema(description = "Time at which the request was initialized.")
  public Date getInitializedAt() {
    return initializedAt;
  }

  public void setInitializedAt(Date initializedAt) {
    this.initializedAt = initializedAt;
  }

  public Request inputs(Object inputs) {
    this.inputs = inputs;
    return this;
  }

   /**
   * Request inputs
   * @return inputs
  **/
  @Schema(description = "Request inputs")
  public Object getInputs() {
    return inputs;
  }

  public void setInputs(Object inputs) {
    this.inputs = inputs;
  }

  public Request name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Short user-friendly label of the request (e.g. &#x27;shuting down myVM&#x27;)
   * @return name
  **/
  @Schema(required = true, description = "Short user-friendly label of the request (e.g. 'shuting down myVM')")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Request outputs(Object outputs) {
    this.outputs = outputs;
    return this;
  }

   /**
   * Request outputs
   * @return outputs
  **/
  @Schema(description = "Request outputs")
  public Object getOutputs() {
    return outputs;
  }

  public void setOutputs(Object outputs) {
    this.outputs = outputs;
  }

  public Request requestedBy(String requestedBy) {
    this.requestedBy = requestedBy;
    return this;
  }

   /**
   * User that initiated the request
   * @return requestedBy
  **/
  @Schema(required = true, description = "User that initiated the request")
  public String getRequestedBy() {
    return requestedBy;
  }

  public void setRequestedBy(String requestedBy) {
    this.requestedBy = requestedBy;
  }

  public Request resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

   /**
   * Optional resource name to which the request applies to
   * @return resourceName
  **/
  @Schema(description = "Optional resource name to which the request applies to")
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }

  public Request status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Request overall execution status.
   * @return status
  **/
  @Schema(description = "Request overall execution status.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public Request totalTasks(Integer totalTasks) {
    this.totalTasks = totalTasks;
    return this;
  }

   /**
   * The total number of tasks need to be completed to fulfil this request.
   * @return totalTasks
  **/
  @Schema(required = true, description = "The total number of tasks need to be completed to fulfil this request.")
  public Integer getTotalTasks() {
    return totalTasks;
  }

  public void setTotalTasks(Integer totalTasks) {
    this.totalTasks = totalTasks;
  }

  public Request updatedAt(Date updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Last update time (e.g. date format &#x27;2019-07-13T23:16:49.310Z&#x27;).
   * @return updatedAt
  **/
  @Schema(description = "Last update time (e.g. date format '2019-07-13T23:16:49.310Z').")
  public Date getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(Date updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Request request = (Request) o;
    return Objects.equals(this.actionId, request.actionId) &&
        Objects.equals(this.approvedAt, request.approvedAt) &&
        Objects.equals(this.blueprintId, request.blueprintId) &&
        Objects.equals(this.cancelable, request.cancelable) &&
        Objects.equals(this.catalogItemId, request.catalogItemId) &&
        Objects.equals(this.completedAt, request.completedAt) &&
        Objects.equals(this.completedTasks, request.completedTasks) &&
        Objects.equals(this.createdAt, request.createdAt) &&
        Objects.equals(this.details, request.details) &&
        Objects.equals(this.dismissed, request.dismissed) &&
        Objects.equals(this.id, request.id) &&
        Objects.equals(this.initializedAt, request.initializedAt) &&
        Objects.equals(this.inputs, request.inputs) &&
        Objects.equals(this.name, request.name) &&
        Objects.equals(this.outputs, request.outputs) &&
        Objects.equals(this.requestedBy, request.requestedBy) &&
        Objects.equals(this.resourceName, request.resourceName) &&
        Objects.equals(this.status, request.status) &&
        Objects.equals(this.totalTasks, request.totalTasks) &&
        Objects.equals(this.updatedAt, request.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionId, approvedAt, blueprintId, cancelable, catalogItemId, completedAt, completedTasks, createdAt, details, dismissed, id, initializedAt, inputs, name, outputs, requestedBy, resourceName, status, totalTasks, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Request {\n");
    
    sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
    sb.append("    approvedAt: ").append(toIndentedString(approvedAt)).append("\n");
    sb.append("    blueprintId: ").append(toIndentedString(blueprintId)).append("\n");
    sb.append("    cancelable: ").append(toIndentedString(cancelable)).append("\n");
    sb.append("    catalogItemId: ").append(toIndentedString(catalogItemId)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    completedTasks: ").append(toIndentedString(completedTasks)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    dismissed: ").append(toIndentedString(dismissed)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    initializedAt: ").append(toIndentedString(initializedAt)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    requestedBy: ").append(toIndentedString(requestedBy)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totalTasks: ").append(toIndentedString(totalTasks)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
