/*
 * Copyright (c) 2020 VMware, Inc
 *
 *  SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * VMware Service Broker API
 * A multi-cloud API for Cloud Automation Services
 *
 * OpenAPI spec version: 2020-08-25
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.catalog;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

/** Represents a Catalog Item that can eventually be requested by a consumer. */
@Schema(description = "Represents a Catalog Item that can eventually be requested by a consumer.")
@javax.annotation.Generated(
    value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
    date = "2020-09-09T18:27:41.063635-04:00[America/New_York]")
public class CatalogItem {
  @SerializedName("bulkRequestLimit")
  private Integer bulkRequestLimit = null;

  @SerializedName("createdAt")
  private Date createdAt = null;

  @SerializedName("createdBy")
  private String createdBy = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("formId")
  private String formId = null;

  @SerializedName("iconId")
  private UUID iconId = null;

  @SerializedName("id")
  private UUID id = null;

  @SerializedName("lastUpdatedAt")
  private Date lastUpdatedAt = null;

  @SerializedName("lastUpdatedBy")
  private String lastUpdatedBy = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("projectIds")
  private List<String> projectIds = new ArrayList<String>();

  @SerializedName("projects")
  private List<ResourceReference> projects = null;

  @SerializedName("schema")
  private Object schema = null;

  @SerializedName("sourceId")
  private UUID sourceId = null;

  @SerializedName("sourceName")
  private String sourceName = null;

  @SerializedName("type")
  private ResourceReference type = null;

  public CatalogItem bulkRequestLimit(Integer bulkRequestLimit) {
    this.bulkRequestLimit = bulkRequestLimit;
    return this;
  }

  /**
   * Max number of instances that can be requested at a time minimum: -128 maximum: 127
   *
   * @return bulkRequestLimit
   */
  @Schema(description = "Max number of instances that can be requested at a time")
  public Integer getBulkRequestLimit() {
    return bulkRequestLimit;
  }

  public void setBulkRequestLimit(Integer bulkRequestLimit) {
    this.bulkRequestLimit = bulkRequestLimit;
  }

  public CatalogItem createdAt(Date createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Creation time
   *
   * @return createdAt
   */
  @Schema(description = "Creation time")
  public Date getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  public CatalogItem createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Created By
   *
   * @return createdBy
   */
  @Schema(description = "Created By")
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }

  public CatalogItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * CatalogItem description
   *
   * @return description
   */
  @Schema(description = "CatalogItem description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CatalogItem formId(String formId) {
    this.formId = formId;
    return this;
  }

  /**
   * Form ID
   *
   * @return formId
   */
  @Schema(description = "Form ID")
  public String getFormId() {
    return formId;
  }

  public void setFormId(String formId) {
    this.formId = formId;
  }

  public CatalogItem iconId(UUID iconId) {
    this.iconId = iconId;
    return this;
  }

  /**
   * Icon ID
   *
   * @return iconId
   */
  @Schema(description = "Icon ID")
  public UUID getIconId() {
    return iconId;
  }

  public void setIconId(UUID iconId) {
    this.iconId = iconId;
  }

  public CatalogItem id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * CatalogItem id
   *
   * @return id
   */
  @Schema(required = true, description = "CatalogItem id")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public CatalogItem lastUpdatedAt(Date lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Update time
   *
   * @return lastUpdatedAt
   */
  @Schema(description = "Update time")
  public Date getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(Date lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }

  public CatalogItem lastUpdatedBy(String lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
    return this;
  }

  /**
   * Updated By
   *
   * @return lastUpdatedBy
   */
  @Schema(description = "Updated By")
  public String getLastUpdatedBy() {
    return lastUpdatedBy;
  }

  public void setLastUpdatedBy(String lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
  }

  public CatalogItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * CatalogItem name
   *
   * @return name
   */
  @Schema(required = true, description = "CatalogItem name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CatalogItem projectIds(List<String> projectIds) {
    this.projectIds = projectIds;
    return this;
  }

  public CatalogItem addProjectIdsItem(String projectIdsItem) {
    this.projectIds.add(projectIdsItem);
    return this;
  }

  /**
   * Associated project IDs that can be used for requesting
   *
   * @return projectIds
   */
  @Schema(required = true, description = "Associated project IDs that can be used for requesting")
  public List<String> getProjectIds() {
    return projectIds;
  }

  public void setProjectIds(List<String> projectIds) {
    this.projectIds = projectIds;
  }

  public CatalogItem projects(List<ResourceReference> projects) {
    this.projects = projects;
    return this;
  }

  public CatalogItem addProjectsItem(ResourceReference projectsItem) {
    if (this.projects == null) {
      this.projects = new ArrayList<ResourceReference>();
    }
    this.projects.add(projectsItem);
    return this;
  }

  /**
   * Associated projects that can be used for requesting
   *
   * @return projects
   */
  @Schema(description = "Associated projects that can be used for requesting")
  public List<ResourceReference> getProjects() {
    return projects;
  }

  public void setProjects(List<ResourceReference> projects) {
    this.projects = projects;
  }

  public CatalogItem schema(Object schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Json schema describing request parameters, a simplified version of
   * http://json-schema.org/latest/json-schema-validation.html#rfc.section.5
   *
   * @return schema
   */
  @Schema(
      description =
          "Json schema describing request parameters, a simplified version of http://json-schema.org/latest/json-schema-validation.html#rfc.section.5")
  public Object getSchema() {
    return schema;
  }

  public void setSchema(Object schema) {
    this.schema = schema;
  }

  public CatalogItem sourceId(UUID sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  /**
   * LibraryItem source ID.
   *
   * @return sourceId
   */
  @Schema(description = "LibraryItem source ID.")
  public UUID getSourceId() {
    return sourceId;
  }

  public void setSourceId(UUID sourceId) {
    this.sourceId = sourceId;
  }

  public CatalogItem sourceName(String sourceName) {
    this.sourceName = sourceName;
    return this;
  }

  /**
   * LibraryItem source name.
   *
   * @return sourceName
   */
  @Schema(description = "LibraryItem source name.")
  public String getSourceName() {
    return sourceName;
  }

  public void setSourceName(String sourceName) {
    this.sourceName = sourceName;
  }

  public CatalogItem type(ResourceReference type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   *
   * @return type
   */
  @Schema(required = true, description = "")
  public ResourceReference getType() {
    return type;
  }

  public void setType(ResourceReference type) {
    this.type = type;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogItem catalogItem = (CatalogItem) o;
    return Objects.equals(this.bulkRequestLimit, catalogItem.bulkRequestLimit)
        && Objects.equals(this.createdAt, catalogItem.createdAt)
        && Objects.equals(this.createdBy, catalogItem.createdBy)
        && Objects.equals(this.description, catalogItem.description)
        && Objects.equals(this.formId, catalogItem.formId)
        && Objects.equals(this.iconId, catalogItem.iconId)
        && Objects.equals(this.id, catalogItem.id)
        && Objects.equals(this.lastUpdatedAt, catalogItem.lastUpdatedAt)
        && Objects.equals(this.lastUpdatedBy, catalogItem.lastUpdatedBy)
        && Objects.equals(this.name, catalogItem.name)
        && Objects.equals(this.projectIds, catalogItem.projectIds)
        && Objects.equals(this.projects, catalogItem.projects)
        && Objects.equals(this.schema, catalogItem.schema)
        && Objects.equals(this.sourceId, catalogItem.sourceId)
        && Objects.equals(this.sourceName, catalogItem.sourceName)
        && Objects.equals(this.type, catalogItem.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        bulkRequestLimit,
        createdAt,
        createdBy,
        description,
        formId,
        iconId,
        id,
        lastUpdatedAt,
        lastUpdatedBy,
        name,
        projectIds,
        projects,
        schema,
        sourceId,
        sourceName,
        type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogItem {\n");

    sb.append("    bulkRequestLimit: ").append(toIndentedString(bulkRequestLimit)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    iconId: ").append(toIndentedString(iconId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    lastUpdatedBy: ").append(toIndentedString(lastUpdatedBy)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    projectIds: ").append(toIndentedString(projectIds)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    sourceName: ").append(toIndentedString(sourceName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
