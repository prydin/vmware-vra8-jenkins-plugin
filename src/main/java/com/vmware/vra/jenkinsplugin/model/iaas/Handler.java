/*
 * Copyright (c) 2020 VMware, Inc
 *
 *  SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.iaas;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;

/** Handler */
@javax.annotation.Generated(
    value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
    date = "2020-09-09T18:26:35.661905-04:00[America/New_York]")
public class Handler {
  @SerializedName("filter")
  private Filter filter = null;

  @SerializedName("formatter")
  private Formatter formatter = null;

  @SerializedName("errorManager")
  private ErrorManager errorManager = null;

  @SerializedName("level")
  private Level level = null;

  @SerializedName("encoding")
  private String encoding = null;

  public Handler filter(Filter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   *
   * @return filter
   */
  @Schema(description = "")
  public Filter getFilter() {
    return filter;
  }

  public void setFilter(Filter filter) {
    this.filter = filter;
  }

  public Handler formatter(Formatter formatter) {
    this.formatter = formatter;
    return this;
  }

  /**
   * Get formatter
   *
   * @return formatter
   */
  @Schema(description = "")
  public Formatter getFormatter() {
    return formatter;
  }

  public void setFormatter(Formatter formatter) {
    this.formatter = formatter;
  }

  public Handler errorManager(ErrorManager errorManager) {
    this.errorManager = errorManager;
    return this;
  }

  /**
   * Get errorManager
   *
   * @return errorManager
   */
  @Schema(description = "")
  public ErrorManager getErrorManager() {
    return errorManager;
  }

  public void setErrorManager(ErrorManager errorManager) {
    this.errorManager = errorManager;
  }

  public Handler level(Level level) {
    this.level = level;
    return this;
  }

  /**
   * Get level
   *
   * @return level
   */
  @Schema(description = "")
  public Level getLevel() {
    return level;
  }

  public void setLevel(Level level) {
    this.level = level;
  }

  public Handler encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * Get encoding
   *
   * @return encoding
   */
  @Schema(description = "")
  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Handler handler = (Handler) o;
    return Objects.equals(this.filter, handler.filter)
        && Objects.equals(this.formatter, handler.formatter)
        && Objects.equals(this.errorManager, handler.errorManager)
        && Objects.equals(this.level, handler.level)
        && Objects.equals(this.encoding, handler.encoding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, formatter, errorManager, level, encoding);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Handler {\n");

    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    formatter: ").append(toIndentedString(formatter)).append("\n");
    sb.append("    errorManager: ").append(toIndentedString(errorManager)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
