/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.iaas;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Specification for creating or updating a NetworkIPRange */
@Schema(description = "Specification for creating or updating a NetworkIPRange")
@javax.annotation.Generated(
    value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
    date = "2020-09-09T18:26:35.661905-04:00[America/New_York]")
public class NetworkIPRangeSpecification {
  /** IP address version: IPv4 or IPv6. Default: IPv4. */
  @JsonAdapter(IpVersionEnum.Adapter.class)
  public enum IpVersionEnum {
    IPV4("IPv4"),
    IPV6("IPv6");

    private String value;

    IpVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IpVersionEnum fromValue(String text) {
      for (IpVersionEnum b : IpVersionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IpVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IpVersionEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IpVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IpVersionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ipVersion")
  private IpVersionEnum ipVersion = null;

  @SerializedName("fabricNetworkId")
  private String fabricNetworkId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("startIPAddress")
  private String startIPAddress = null;

  @SerializedName("endIPAddress")
  private String endIPAddress = null;

  @SerializedName("tags")
  private List<Tag> tags = null;

  public NetworkIPRangeSpecification ipVersion(IpVersionEnum ipVersion) {
    this.ipVersion = ipVersion;
    return this;
  }

  /**
   * IP address version: IPv4 or IPv6. Default: IPv4.
   *
   * @return ipVersion
   */
  @Schema(description = "IP address version: IPv4 or IPv6. Default: IPv4.")
  public IpVersionEnum getIpVersion() {
    return ipVersion;
  }

  public void setIpVersion(IpVersionEnum ipVersion) {
    this.ipVersion = ipVersion;
  }

  public NetworkIPRangeSpecification fabricNetworkId(String fabricNetworkId) {
    this.fabricNetworkId = fabricNetworkId;
    return this;
  }

  /**
   * The Id of the parent fabric network.
   *
   * @return fabricNetworkId
   */
  @Schema(description = "The Id of the parent fabric network.")
  public String getFabricNetworkId() {
    return fabricNetworkId;
  }

  public void setFabricNetworkId(String fabricNetworkId) {
    this.fabricNetworkId = fabricNetworkId;
  }

  public NetworkIPRangeSpecification name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A human-friendly name used as an identifier in APIs that support this option.
   *
   * @return name
   */
  @Schema(
      required = true,
      description = "A human-friendly name used as an identifier in APIs that support this option.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public NetworkIPRangeSpecification description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A human-friendly description.
   *
   * @return description
   */
  @Schema(description = "A human-friendly description.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public NetworkIPRangeSpecification startIPAddress(String startIPAddress) {
    this.startIPAddress = startIPAddress;
    return this;
  }

  /**
   * Start IP address of the range.
   *
   * @return startIPAddress
   */
  @Schema(required = true, description = "Start IP address of the range.")
  public String getStartIPAddress() {
    return startIPAddress;
  }

  public void setStartIPAddress(String startIPAddress) {
    this.startIPAddress = startIPAddress;
  }

  public NetworkIPRangeSpecification endIPAddress(String endIPAddress) {
    this.endIPAddress = endIPAddress;
    return this;
  }

  /**
   * End IP address of the range.
   *
   * @return endIPAddress
   */
  @Schema(required = true, description = "End IP address of the range.")
  public String getEndIPAddress() {
    return endIPAddress;
  }

  public void setEndIPAddress(String endIPAddress) {
    this.endIPAddress = endIPAddress;
  }

  public NetworkIPRangeSpecification tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public NetworkIPRangeSpecification addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<Tag>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A set of tag keys and optional values that were set on this resource instance.
   *
   * @return tags
   */
  @Schema(
      example = "[ { \"key\" : \"fast-network\", \"value\": \"true\" } ]",
      description =
          "A set of tag keys and optional values that were set on this resource instance.")
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkIPRangeSpecification networkIPRangeSpecification = (NetworkIPRangeSpecification) o;
    return Objects.equals(this.ipVersion, networkIPRangeSpecification.ipVersion)
        && Objects.equals(this.fabricNetworkId, networkIPRangeSpecification.fabricNetworkId)
        && Objects.equals(this.name, networkIPRangeSpecification.name)
        && Objects.equals(this.description, networkIPRangeSpecification.description)
        && Objects.equals(this.startIPAddress, networkIPRangeSpecification.startIPAddress)
        && Objects.equals(this.endIPAddress, networkIPRangeSpecification.endIPAddress)
        && Objects.equals(this.tags, networkIPRangeSpecification.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        ipVersion, fabricNetworkId, name, description, startIPAddress, endIPAddress, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkIPRangeSpecification {\n");

    sb.append("    ipVersion: ").append(toIndentedString(ipVersion)).append("\n");
    sb.append("    fabricNetworkId: ").append(toIndentedString(fabricNetworkId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    startIPAddress: ").append(toIndentedString(startIPAddress)).append("\n");
    sb.append("    endIPAddress: ").append(toIndentedString(endIPAddress)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
