/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.iaas;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * SystemHostInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-09T18:26:35.661905-04:00[America/New_York]")
public class SystemHostInfo {
  /**
   * Gets or Sets osFamily
   */
  @JsonAdapter(OsFamilyEnum.Adapter.class)
  public enum OsFamilyEnum {
    WINDOWS("WINDOWS"),
    LINUX("LINUX"),
    MACOS("MACOS"),
    OTHER("OTHER");

    private String value;

    OsFamilyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OsFamilyEnum fromValue(String text) {
      for (OsFamilyEnum b : OsFamilyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OsFamilyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsFamilyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsFamilyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OsFamilyEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("osFamily")
  private OsFamilyEnum osFamily = null;

  @SerializedName("environmentVariables")
  private Map<String, String> environmentVariables = null;

  @SerializedName("freeMemoryByteCount")
  private Long freeMemoryByteCount = null;

  @SerializedName("maxMemoryByteCount")
  private Long maxMemoryByteCount = null;

  @SerializedName("totalMemoryByteCount")
  private Long totalMemoryByteCount = null;

  @SerializedName("ipAddresses")
  private List<String> ipAddresses = null;

  @SerializedName("availableProcessorCount")
  private Long availableProcessorCount = null;

  @SerializedName("usableDiskByteCount")
  private Long usableDiskByteCount = null;

  @SerializedName("osName")
  private String osName = null;

  @SerializedName("totalDiskByteCount")
  private Long totalDiskByteCount = null;

  @SerializedName("properties")
  private Map<String, String> properties = null;

  @SerializedName("freeDiskByteCount")
  private Long freeDiskByteCount = null;

  public SystemHostInfo osFamily(OsFamilyEnum osFamily) {
    this.osFamily = osFamily;
    return this;
  }

   /**
   * Get osFamily
   * @return osFamily
  **/
  @Schema(description = "")
  public OsFamilyEnum getOsFamily() {
    return osFamily;
  }

  public void setOsFamily(OsFamilyEnum osFamily) {
    this.osFamily = osFamily;
  }

  public SystemHostInfo environmentVariables(Map<String, String> environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  public SystemHostInfo putEnvironmentVariablesItem(String key, String environmentVariablesItem) {
    if (this.environmentVariables == null) {
      this.environmentVariables = new HashMap<String, String>();
    }
    this.environmentVariables.put(key, environmentVariablesItem);
    return this;
  }

   /**
   * Get environmentVariables
   * @return environmentVariables
  **/
  @Schema(description = "")
  public Map<String, String> getEnvironmentVariables() {
    return environmentVariables;
  }

  public void setEnvironmentVariables(Map<String, String> environmentVariables) {
    this.environmentVariables = environmentVariables;
  }

  public SystemHostInfo freeMemoryByteCount(Long freeMemoryByteCount) {
    this.freeMemoryByteCount = freeMemoryByteCount;
    return this;
  }

   /**
   * Get freeMemoryByteCount
   * @return freeMemoryByteCount
  **/
  @Schema(description = "")
  public Long getFreeMemoryByteCount() {
    return freeMemoryByteCount;
  }

  public void setFreeMemoryByteCount(Long freeMemoryByteCount) {
    this.freeMemoryByteCount = freeMemoryByteCount;
  }

  public SystemHostInfo maxMemoryByteCount(Long maxMemoryByteCount) {
    this.maxMemoryByteCount = maxMemoryByteCount;
    return this;
  }

   /**
   * Get maxMemoryByteCount
   * @return maxMemoryByteCount
  **/
  @Schema(description = "")
  public Long getMaxMemoryByteCount() {
    return maxMemoryByteCount;
  }

  public void setMaxMemoryByteCount(Long maxMemoryByteCount) {
    this.maxMemoryByteCount = maxMemoryByteCount;
  }

  public SystemHostInfo totalMemoryByteCount(Long totalMemoryByteCount) {
    this.totalMemoryByteCount = totalMemoryByteCount;
    return this;
  }

   /**
   * Get totalMemoryByteCount
   * @return totalMemoryByteCount
  **/
  @Schema(description = "")
  public Long getTotalMemoryByteCount() {
    return totalMemoryByteCount;
  }

  public void setTotalMemoryByteCount(Long totalMemoryByteCount) {
    this.totalMemoryByteCount = totalMemoryByteCount;
  }

  public SystemHostInfo ipAddresses(List<String> ipAddresses) {
    this.ipAddresses = ipAddresses;
    return this;
  }

  public SystemHostInfo addIpAddressesItem(String ipAddressesItem) {
    if (this.ipAddresses == null) {
      this.ipAddresses = new ArrayList<String>();
    }
    this.ipAddresses.add(ipAddressesItem);
    return this;
  }

   /**
   * Get ipAddresses
   * @return ipAddresses
  **/
  @Schema(description = "")
  public List<String> getIpAddresses() {
    return ipAddresses;
  }

  public void setIpAddresses(List<String> ipAddresses) {
    this.ipAddresses = ipAddresses;
  }

  public SystemHostInfo availableProcessorCount(Long availableProcessorCount) {
    this.availableProcessorCount = availableProcessorCount;
    return this;
  }

   /**
   * Get availableProcessorCount
   * @return availableProcessorCount
  **/
  @Schema(description = "")
  public Long getAvailableProcessorCount() {
    return availableProcessorCount;
  }

  public void setAvailableProcessorCount(Long availableProcessorCount) {
    this.availableProcessorCount = availableProcessorCount;
  }

  public SystemHostInfo usableDiskByteCount(Long usableDiskByteCount) {
    this.usableDiskByteCount = usableDiskByteCount;
    return this;
  }

   /**
   * Get usableDiskByteCount
   * @return usableDiskByteCount
  **/
  @Schema(description = "")
  public Long getUsableDiskByteCount() {
    return usableDiskByteCount;
  }

  public void setUsableDiskByteCount(Long usableDiskByteCount) {
    this.usableDiskByteCount = usableDiskByteCount;
  }

  public SystemHostInfo osName(String osName) {
    this.osName = osName;
    return this;
  }

   /**
   * Get osName
   * @return osName
  **/
  @Schema(description = "")
  public String getOsName() {
    return osName;
  }

  public void setOsName(String osName) {
    this.osName = osName;
  }

  public SystemHostInfo totalDiskByteCount(Long totalDiskByteCount) {
    this.totalDiskByteCount = totalDiskByteCount;
    return this;
  }

   /**
   * Get totalDiskByteCount
   * @return totalDiskByteCount
  **/
  @Schema(description = "")
  public Long getTotalDiskByteCount() {
    return totalDiskByteCount;
  }

  public void setTotalDiskByteCount(Long totalDiskByteCount) {
    this.totalDiskByteCount = totalDiskByteCount;
  }

  public SystemHostInfo properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public SystemHostInfo putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<String, String>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @Schema(description = "")
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }

  public SystemHostInfo freeDiskByteCount(Long freeDiskByteCount) {
    this.freeDiskByteCount = freeDiskByteCount;
    return this;
  }

   /**
   * Get freeDiskByteCount
   * @return freeDiskByteCount
  **/
  @Schema(description = "")
  public Long getFreeDiskByteCount() {
    return freeDiskByteCount;
  }

  public void setFreeDiskByteCount(Long freeDiskByteCount) {
    this.freeDiskByteCount = freeDiskByteCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemHostInfo systemHostInfo = (SystemHostInfo) o;
    return Objects.equals(this.osFamily, systemHostInfo.osFamily) &&
        Objects.equals(this.environmentVariables, systemHostInfo.environmentVariables) &&
        Objects.equals(this.freeMemoryByteCount, systemHostInfo.freeMemoryByteCount) &&
        Objects.equals(this.maxMemoryByteCount, systemHostInfo.maxMemoryByteCount) &&
        Objects.equals(this.totalMemoryByteCount, systemHostInfo.totalMemoryByteCount) &&
        Objects.equals(this.ipAddresses, systemHostInfo.ipAddresses) &&
        Objects.equals(this.availableProcessorCount, systemHostInfo.availableProcessorCount) &&
        Objects.equals(this.usableDiskByteCount, systemHostInfo.usableDiskByteCount) &&
        Objects.equals(this.osName, systemHostInfo.osName) &&
        Objects.equals(this.totalDiskByteCount, systemHostInfo.totalDiskByteCount) &&
        Objects.equals(this.properties, systemHostInfo.properties) &&
        Objects.equals(this.freeDiskByteCount, systemHostInfo.freeDiskByteCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(osFamily, environmentVariables, freeMemoryByteCount, maxMemoryByteCount, totalMemoryByteCount, ipAddresses, availableProcessorCount, usableDiskByteCount, osName, totalDiskByteCount, properties, freeDiskByteCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemHostInfo {\n");
    
    sb.append("    osFamily: ").append(toIndentedString(osFamily)).append("\n");
    sb.append("    environmentVariables: ").append(toIndentedString(environmentVariables)).append("\n");
    sb.append("    freeMemoryByteCount: ").append(toIndentedString(freeMemoryByteCount)).append("\n");
    sb.append("    maxMemoryByteCount: ").append(toIndentedString(maxMemoryByteCount)).append("\n");
    sb.append("    totalMemoryByteCount: ").append(toIndentedString(totalMemoryByteCount)).append("\n");
    sb.append("    ipAddresses: ").append(toIndentedString(ipAddresses)).append("\n");
    sb.append("    availableProcessorCount: ").append(toIndentedString(availableProcessorCount)).append("\n");
    sb.append("    usableDiskByteCount: ").append(toIndentedString(usableDiskByteCount)).append("\n");
    sb.append("    osName: ").append(toIndentedString(osName)).append("\n");
    sb.append("    totalDiskByteCount: ").append(toIndentedString(totalDiskByteCount)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    freeDiskByteCount: ").append(toIndentedString(freeDiskByteCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
