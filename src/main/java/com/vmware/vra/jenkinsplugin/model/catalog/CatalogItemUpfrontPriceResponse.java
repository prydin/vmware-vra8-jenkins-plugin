/*
 * VMware Service Broker API
 * A multi-cloud API for Cloud Automation Services
 *
 * OpenAPI spec version: 2020-08-25
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.catalog;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.vmware.vra.jenkinsplugin.model.catalog.CatalogItemResourceUpfrontPriceResponse;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
/**
 * The response to a catalog item upfront price request
 */
@Schema(description = "The response to a catalog item upfront price request")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-09T18:27:41.063635-04:00[America/New_York]")
public class CatalogItemUpfrontPriceResponse {
  @SerializedName("dailyAdditionalPrice")
  private BigDecimal dailyAdditionalPrice = null;

  @SerializedName("dailyComputePrice")
  private BigDecimal dailyComputePrice = null;

  @SerializedName("dailyNetworkPrice")
  private BigDecimal dailyNetworkPrice = null;

  @SerializedName("dailyStoragePrice")
  private BigDecimal dailyStoragePrice = null;

  @SerializedName("dailyTotalPrice")
  private BigDecimal dailyTotalPrice = null;

  @SerializedName("resourcePriceDetails")
  private List<CatalogItemResourceUpfrontPriceResponse> resourcePriceDetails = null;

  /**
   * Upfront price sync status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    STARTED("STARTED"),
    PREPARING_COST_ESTIMATION("PREPARING_COST_ESTIMATION"),
    IN_PROGRESS("IN_PROGRESS"),
    SUCCESS("SUCCESS"),
    ERROR("ERROR"),
    DATA_NOT_AVAILABLE("DATA_NOT_AVAILABLE"),
    CURRENCY_NOT_SET("CURRENCY_NOT_SET"),
    PUBLIC_CLOUD_NOT_SUPPORTED("PUBLIC_CLOUD_NOT_SUPPORTED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("statusDetails")
  private String statusDetails = null;

  @SerializedName("unit")
  private String unit = null;

  @SerializedName("upfrontPriceId")
  private String upfrontPriceId = null;

   /**
   * Additional Price incurred for the catalog.
   * @return dailyAdditionalPrice
  **/
  @Schema(description = "Additional Price incurred for the catalog.")
  public BigDecimal getDailyAdditionalPrice() {
    return dailyAdditionalPrice;
  }

   /**
   * Compute Price of the catalog.
   * @return dailyComputePrice
  **/
  @Schema(description = "Compute Price of the catalog.")
  public BigDecimal getDailyComputePrice() {
    return dailyComputePrice;
  }

   /**
   * Network Price of the catalog.
   * @return dailyNetworkPrice
  **/
  @Schema(description = "Network Price of the catalog.")
  public BigDecimal getDailyNetworkPrice() {
    return dailyNetworkPrice;
  }

   /**
   * Storage Price of the catalog.
   * @return dailyStoragePrice
  **/
  @Schema(description = "Storage Price of the catalog.")
  public BigDecimal getDailyStoragePrice() {
    return dailyStoragePrice;
  }

   /**
   * Total Price of the catalog.
   * @return dailyTotalPrice
  **/
  @Schema(description = "Total Price of the catalog.")
  public BigDecimal getDailyTotalPrice() {
    return dailyTotalPrice;
  }

  public CatalogItemUpfrontPriceResponse resourcePriceDetails(List<CatalogItemResourceUpfrontPriceResponse> resourcePriceDetails) {
    this.resourcePriceDetails = resourcePriceDetails;
    return this;
  }

  public CatalogItemUpfrontPriceResponse addResourcePriceDetailsItem(CatalogItemResourceUpfrontPriceResponse resourcePriceDetailsItem) {
    if (this.resourcePriceDetails == null) {
      this.resourcePriceDetails = new ArrayList<CatalogItemResourceUpfrontPriceResponse>();
    }
    this.resourcePriceDetails.add(resourcePriceDetailsItem);
    return this;
  }

   /**
   * Get resourcePriceDetails
   * @return resourcePriceDetails
  **/
  @Schema(description = "")
  public List<CatalogItemResourceUpfrontPriceResponse> getResourcePriceDetails() {
    return resourcePriceDetails;
  }

  public void setResourcePriceDetails(List<CatalogItemResourceUpfrontPriceResponse> resourcePriceDetails) {
    this.resourcePriceDetails = resourcePriceDetails;
  }

   /**
   * Upfront price sync status
   * @return status
  **/
  @Schema(description = "Upfront price sync status")
  public StatusEnum getStatus() {
    return status;
  }

   /**
   * Upfront price status detail.
   * @return statusDetails
  **/
  @Schema(description = "Upfront price status detail.")
  public String getStatusDetails() {
    return statusDetails;
  }

   /**
   * Monetary unit.
   * @return unit
  **/
  @Schema(description = "Monetary unit.")
  public String getUnit() {
    return unit;
  }

   /**
   * Id
   * @return upfrontPriceId
  **/
  @Schema(description = "Id")
  public String getUpfrontPriceId() {
    return upfrontPriceId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogItemUpfrontPriceResponse catalogItemUpfrontPriceResponse = (CatalogItemUpfrontPriceResponse) o;
    return Objects.equals(this.dailyAdditionalPrice, catalogItemUpfrontPriceResponse.dailyAdditionalPrice) &&
        Objects.equals(this.dailyComputePrice, catalogItemUpfrontPriceResponse.dailyComputePrice) &&
        Objects.equals(this.dailyNetworkPrice, catalogItemUpfrontPriceResponse.dailyNetworkPrice) &&
        Objects.equals(this.dailyStoragePrice, catalogItemUpfrontPriceResponse.dailyStoragePrice) &&
        Objects.equals(this.dailyTotalPrice, catalogItemUpfrontPriceResponse.dailyTotalPrice) &&
        Objects.equals(this.resourcePriceDetails, catalogItemUpfrontPriceResponse.resourcePriceDetails) &&
        Objects.equals(this.status, catalogItemUpfrontPriceResponse.status) &&
        Objects.equals(this.statusDetails, catalogItemUpfrontPriceResponse.statusDetails) &&
        Objects.equals(this.unit, catalogItemUpfrontPriceResponse.unit) &&
        Objects.equals(this.upfrontPriceId, catalogItemUpfrontPriceResponse.upfrontPriceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dailyAdditionalPrice, dailyComputePrice, dailyNetworkPrice, dailyStoragePrice, dailyTotalPrice, resourcePriceDetails, status, statusDetails, unit, upfrontPriceId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogItemUpfrontPriceResponse {\n");
    
    sb.append("    dailyAdditionalPrice: ").append(toIndentedString(dailyAdditionalPrice)).append("\n");
    sb.append("    dailyComputePrice: ").append(toIndentedString(dailyComputePrice)).append("\n");
    sb.append("    dailyNetworkPrice: ").append(toIndentedString(dailyNetworkPrice)).append("\n");
    sb.append("    dailyStoragePrice: ").append(toIndentedString(dailyStoragePrice)).append("\n");
    sb.append("    dailyTotalPrice: ").append(toIndentedString(dailyTotalPrice)).append("\n");
    sb.append("    resourcePriceDetails: ").append(toIndentedString(resourcePriceDetails)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDetails: ").append(toIndentedString(statusDetails)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    upfrontPriceId: ").append(toIndentedString(upfrontPriceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
