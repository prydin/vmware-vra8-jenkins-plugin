/*
 * Copyright (c) 2020 VMware, Inc
 *
 *  SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * VMware Service Broker API
 * A multi-cloud API for Cloud Automation Services
 *
 * OpenAPI spec version: 2020-08-25
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.catalog;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Objects;

/** Metering */
@javax.annotation.Generated(
    value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
    date = "2020-09-09T18:27:41.063635-04:00[America/New_York]")
public class Metering {
  @SerializedName("baseRate")
  private Double baseRate = null;

  /** Gets or Sets chargeBasedOn */
  @JsonAdapter(ChargeBasedOnEnum.Adapter.class)
  public enum ChargeBasedOnEnum {
    USAGE("USAGE");

    private String value;

    ChargeBasedOnEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChargeBasedOnEnum fromValue(String text) {
      for (ChargeBasedOnEnum b : ChargeBasedOnEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChargeBasedOnEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargeBasedOnEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChargeBasedOnEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChargeBasedOnEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("chargeBasedOn")
  private ChargeBasedOnEnum chargeBasedOn = null;

  /** Gets or Sets chargeOnPowerState */
  @JsonAdapter(ChargeOnPowerStateEnum.Adapter.class)
  public enum ChargeOnPowerStateEnum {
    ALWAYS("ALWAYS"),
    ONLY_WHEN_POWERED_ON("ONLY_WHEN_POWERED_ON"),
    POWERED_ON_AT_LEAST_ONCE("POWERED_ON_AT_LEAST_ONCE");

    private String value;

    ChargeOnPowerStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChargeOnPowerStateEnum fromValue(String text) {
      for (ChargeOnPowerStateEnum b : ChargeOnPowerStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChargeOnPowerStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargeOnPowerStateEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChargeOnPowerStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChargeOnPowerStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("chargeOnPowerState")
  private ChargeOnPowerStateEnum chargeOnPowerState = null;

  /** Gets or Sets chargePeriod */
  @JsonAdapter(ChargePeriodEnum.Adapter.class)
  public enum ChargePeriodEnum {
    HOURLY("HOURLY"),
    DAILY("DAILY"),
    WEEKLY("WEEKLY"),
    MONTHLY("MONTHLY");

    private String value;

    ChargePeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChargePeriodEnum fromValue(String text) {
      for (ChargePeriodEnum b : ChargePeriodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChargePeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargePeriodEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChargePeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChargePeriodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("chargePeriod")
  private ChargePeriodEnum chargePeriod = null;

  @SerializedName("fixedPrice")
  private Double fixedPrice = null;

  @SerializedName("unit")
  private String unit = null;

  public Metering baseRate(Double baseRate) {
    this.baseRate = baseRate;
    return this;
  }

  /**
   * Get baseRate
   *
   * @return baseRate
   */
  @Schema(description = "")
  public Double getBaseRate() {
    return baseRate;
  }

  public void setBaseRate(Double baseRate) {
    this.baseRate = baseRate;
  }

  public Metering chargeBasedOn(ChargeBasedOnEnum chargeBasedOn) {
    this.chargeBasedOn = chargeBasedOn;
    return this;
  }

  /**
   * Get chargeBasedOn
   *
   * @return chargeBasedOn
   */
  @Schema(description = "")
  public ChargeBasedOnEnum getChargeBasedOn() {
    return chargeBasedOn;
  }

  public void setChargeBasedOn(ChargeBasedOnEnum chargeBasedOn) {
    this.chargeBasedOn = chargeBasedOn;
  }

  public Metering chargeOnPowerState(ChargeOnPowerStateEnum chargeOnPowerState) {
    this.chargeOnPowerState = chargeOnPowerState;
    return this;
  }

  /**
   * Get chargeOnPowerState
   *
   * @return chargeOnPowerState
   */
  @Schema(description = "")
  public ChargeOnPowerStateEnum getChargeOnPowerState() {
    return chargeOnPowerState;
  }

  public void setChargeOnPowerState(ChargeOnPowerStateEnum chargeOnPowerState) {
    this.chargeOnPowerState = chargeOnPowerState;
  }

  public Metering chargePeriod(ChargePeriodEnum chargePeriod) {
    this.chargePeriod = chargePeriod;
    return this;
  }

  /**
   * Get chargePeriod
   *
   * @return chargePeriod
   */
  @Schema(description = "")
  public ChargePeriodEnum getChargePeriod() {
    return chargePeriod;
  }

  public void setChargePeriod(ChargePeriodEnum chargePeriod) {
    this.chargePeriod = chargePeriod;
  }

  public Metering fixedPrice(Double fixedPrice) {
    this.fixedPrice = fixedPrice;
    return this;
  }

  /**
   * Get fixedPrice
   *
   * @return fixedPrice
   */
  @Schema(description = "")
  public Double getFixedPrice() {
    return fixedPrice;
  }

  public void setFixedPrice(Double fixedPrice) {
    this.fixedPrice = fixedPrice;
  }

  public Metering unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   *
   * @return unit
   */
  @Schema(description = "")
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metering metering = (Metering) o;
    return Objects.equals(this.baseRate, metering.baseRate)
        && Objects.equals(this.chargeBasedOn, metering.chargeBasedOn)
        && Objects.equals(this.chargeOnPowerState, metering.chargeOnPowerState)
        && Objects.equals(this.chargePeriod, metering.chargePeriod)
        && Objects.equals(this.fixedPrice, metering.fixedPrice)
        && Objects.equals(this.unit, metering.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        baseRate, chargeBasedOn, chargeOnPowerState, chargePeriod, fixedPrice, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metering {\n");

    sb.append("    baseRate: ").append(toIndentedString(baseRate)).append("\n");
    sb.append("    chargeBasedOn: ").append(toIndentedString(chargeBasedOn)).append("\n");
    sb.append("    chargeOnPowerState: ").append(toIndentedString(chargeOnPowerState)).append("\n");
    sb.append("    chargePeriod: ").append(toIndentedString(chargePeriod)).append("\n");
    sb.append("    fixedPrice: ").append(toIndentedString(fixedPrice)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
