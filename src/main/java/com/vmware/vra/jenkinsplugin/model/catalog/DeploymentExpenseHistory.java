/*
 * VMware Service Broker API
 * A multi-cloud API for Cloud Automation Services
 *
 * OpenAPI spec version: 2020-08-25
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.catalog;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.vmware.vra.jenkinsplugin.model.catalog.TimeSeriesValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Expense history of a deployment.
 */
@Schema(description = "Expense history of a deployment.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-09T18:27:41.063635-04:00[America/New_York]")
public class DeploymentExpenseHistory {
  @SerializedName("currency")
  private String currency = null;

  @SerializedName("data")
  private List<TimeSeriesValue> data = null;

  /**
   * The requested interval type.
   */
  @JsonAdapter(IntervalEnum.Adapter.class)
  public enum IntervalEnum {
    DAILY("daily"),
    WEEKLY("weekly"),
    MONTHLY("monthly");

    private String value;

    IntervalEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static IntervalEnum fromValue(String text) {
      for (IntervalEnum b : IntervalEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<IntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntervalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntervalEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IntervalEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("interval")
  private IntervalEnum interval = null;

   /**
   * The currency code of the expense history.
   * @return currency
  **/
  @Schema(description = "The currency code of the expense history.")
  public String getCurrency() {
    return currency;
  }

   /**
   * The list of expense history metric.
   * @return data
  **/
  @Schema(description = "The list of expense history metric.")
  public List<TimeSeriesValue> getData() {
    return data;
  }

   /**
   * The requested interval type.
   * @return interval
  **/
  @Schema(description = "The requested interval type.")
  public IntervalEnum getInterval() {
    return interval;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeploymentExpenseHistory deploymentExpenseHistory = (DeploymentExpenseHistory) o;
    return Objects.equals(this.currency, deploymentExpenseHistory.currency) &&
        Objects.equals(this.data, deploymentExpenseHistory.data) &&
        Objects.equals(this.interval, deploymentExpenseHistory.interval);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, data, interval);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeploymentExpenseHistory {\n");
    
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
