/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.iaas;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.vmware.vra.jenkinsplugin.model.iaas.Connection;
import com.vmware.vra.jenkinsplugin.model.iaas.Logger;
import com.vmware.vra.jenkinsplugin.model.iaas.PrintWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * DataSource
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-09T18:26:35.661905-04:00[America/New_York]")
public class DataSource {
  @SerializedName("logWriter")
  private PrintWriter logWriter = null;

  @SerializedName("loginTimeout")
  private Integer loginTimeout = null;

  @SerializedName("connection")
  private Connection connection = null;

  @SerializedName("parentLogger")
  private Logger parentLogger = null;

  public DataSource logWriter(PrintWriter logWriter) {
    this.logWriter = logWriter;
    return this;
  }

   /**
   * Get logWriter
   * @return logWriter
  **/
  @Schema(description = "")
  public PrintWriter getLogWriter() {
    return logWriter;
  }

  public void setLogWriter(PrintWriter logWriter) {
    this.logWriter = logWriter;
  }

  public DataSource loginTimeout(Integer loginTimeout) {
    this.loginTimeout = loginTimeout;
    return this;
  }

   /**
   * Get loginTimeout
   * @return loginTimeout
  **/
  @Schema(description = "")
  public Integer getLoginTimeout() {
    return loginTimeout;
  }

  public void setLoginTimeout(Integer loginTimeout) {
    this.loginTimeout = loginTimeout;
  }

  public DataSource connection(Connection connection) {
    this.connection = connection;
    return this;
  }

   /**
   * Get connection
   * @return connection
  **/
  @Schema(description = "")
  public Connection getConnection() {
    return connection;
  }

  public void setConnection(Connection connection) {
    this.connection = connection;
  }

  public DataSource parentLogger(Logger parentLogger) {
    this.parentLogger = parentLogger;
    return this;
  }

   /**
   * Get parentLogger
   * @return parentLogger
  **/
  @Schema(description = "")
  public Logger getParentLogger() {
    return parentLogger;
  }

  public void setParentLogger(Logger parentLogger) {
    this.parentLogger = parentLogger;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSource dataSource = (DataSource) o;
    return Objects.equals(this.logWriter, dataSource.logWriter) &&
        Objects.equals(this.loginTimeout, dataSource.loginTimeout) &&
        Objects.equals(this.connection, dataSource.connection) &&
        Objects.equals(this.parentLogger, dataSource.parentLogger);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logWriter, loginTimeout, connection, parentLogger);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSource {\n");
    
    sb.append("    logWriter: ").append(toIndentedString(logWriter)).append("\n");
    sb.append("    loginTimeout: ").append(toIndentedString(loginTimeout)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    parentLogger: ").append(toIndentedString(parentLogger)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
