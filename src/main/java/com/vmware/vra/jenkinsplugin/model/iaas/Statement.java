/*
 * Copyright (c) 2020 VMware, Inc
 *
 *  SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * VMware Cloud Assembly IaaS API
 * A multi-cloud IaaS API for Cloud Automation Services
 *
 * OpenAPI spec version: 2019-01-15
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.vra.jenkinsplugin.model.iaas;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;

/** Statement */
@javax.annotation.Generated(
    value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
    date = "2020-09-09T18:26:35.661905-04:00[America/New_York]")
public class Statement {
  @SerializedName("queryTimeout")
  private Integer queryTimeout = null;

  @SerializedName("updateCount")
  private Integer updateCount = null;

  @SerializedName("maxFieldSize")
  private Integer maxFieldSize = null;

  @SerializedName("resultSetConcurrency")
  private Integer resultSetConcurrency = null;

  @SerializedName("closeOnCompletion")
  private Boolean closeOnCompletion = null;

  @SerializedName("fetchSize")
  private Integer fetchSize = null;

  @SerializedName("largeUpdateCount")
  private Long largeUpdateCount = null;

  @SerializedName("warnings")
  private SQLWarning warnings = null;

  @SerializedName("generatedKeys")
  private ResultSet generatedKeys = null;

  @SerializedName("moreResults")
  private Boolean moreResults = null;

  @SerializedName("fetchDirection")
  private Integer fetchDirection = null;

  @SerializedName("resultSet")
  private ResultSet resultSet = null;

  @SerializedName("maxRows")
  private Integer maxRows = null;

  @SerializedName("resultSetHoldability")
  private Integer resultSetHoldability = null;

  @SerializedName("resultSetType")
  private Integer resultSetType = null;

  @SerializedName("poolable")
  private Boolean poolable = null;

  @SerializedName("largeMaxRows")
  private Long largeMaxRows = null;

  @SerializedName("closed")
  private Boolean closed = null;

  @SerializedName("connection")
  private Connection connection = null;

  public Statement queryTimeout(Integer queryTimeout) {
    this.queryTimeout = queryTimeout;
    return this;
  }

  /**
   * Get queryTimeout
   *
   * @return queryTimeout
   */
  @Schema(description = "")
  public Integer getQueryTimeout() {
    return queryTimeout;
  }

  public void setQueryTimeout(Integer queryTimeout) {
    this.queryTimeout = queryTimeout;
  }

  public Statement updateCount(Integer updateCount) {
    this.updateCount = updateCount;
    return this;
  }

  /**
   * Get updateCount
   *
   * @return updateCount
   */
  @Schema(description = "")
  public Integer getUpdateCount() {
    return updateCount;
  }

  public void setUpdateCount(Integer updateCount) {
    this.updateCount = updateCount;
  }

  public Statement maxFieldSize(Integer maxFieldSize) {
    this.maxFieldSize = maxFieldSize;
    return this;
  }

  /**
   * Get maxFieldSize
   *
   * @return maxFieldSize
   */
  @Schema(description = "")
  public Integer getMaxFieldSize() {
    return maxFieldSize;
  }

  public void setMaxFieldSize(Integer maxFieldSize) {
    this.maxFieldSize = maxFieldSize;
  }

  public Statement resultSetConcurrency(Integer resultSetConcurrency) {
    this.resultSetConcurrency = resultSetConcurrency;
    return this;
  }

  /**
   * Get resultSetConcurrency
   *
   * @return resultSetConcurrency
   */
  @Schema(description = "")
  public Integer getResultSetConcurrency() {
    return resultSetConcurrency;
  }

  public void setResultSetConcurrency(Integer resultSetConcurrency) {
    this.resultSetConcurrency = resultSetConcurrency;
  }

  public Statement closeOnCompletion(Boolean closeOnCompletion) {
    this.closeOnCompletion = closeOnCompletion;
    return this;
  }

  /**
   * Get closeOnCompletion
   *
   * @return closeOnCompletion
   */
  @Schema(description = "")
  public Boolean isCloseOnCompletion() {
    return closeOnCompletion;
  }

  public void setCloseOnCompletion(Boolean closeOnCompletion) {
    this.closeOnCompletion = closeOnCompletion;
  }

  public Statement fetchSize(Integer fetchSize) {
    this.fetchSize = fetchSize;
    return this;
  }

  /**
   * Get fetchSize
   *
   * @return fetchSize
   */
  @Schema(description = "")
  public Integer getFetchSize() {
    return fetchSize;
  }

  public void setFetchSize(Integer fetchSize) {
    this.fetchSize = fetchSize;
  }

  public Statement largeUpdateCount(Long largeUpdateCount) {
    this.largeUpdateCount = largeUpdateCount;
    return this;
  }

  /**
   * Get largeUpdateCount
   *
   * @return largeUpdateCount
   */
  @Schema(description = "")
  public Long getLargeUpdateCount() {
    return largeUpdateCount;
  }

  public void setLargeUpdateCount(Long largeUpdateCount) {
    this.largeUpdateCount = largeUpdateCount;
  }

  public Statement warnings(SQLWarning warnings) {
    this.warnings = warnings;
    return this;
  }

  /**
   * Get warnings
   *
   * @return warnings
   */
  @Schema(description = "")
  public SQLWarning getWarnings() {
    return warnings;
  }

  public void setWarnings(SQLWarning warnings) {
    this.warnings = warnings;
  }

  public Statement generatedKeys(ResultSet generatedKeys) {
    this.generatedKeys = generatedKeys;
    return this;
  }

  /**
   * Get generatedKeys
   *
   * @return generatedKeys
   */
  @Schema(description = "")
  public ResultSet getGeneratedKeys() {
    return generatedKeys;
  }

  public void setGeneratedKeys(ResultSet generatedKeys) {
    this.generatedKeys = generatedKeys;
  }

  public Statement moreResults(Boolean moreResults) {
    this.moreResults = moreResults;
    return this;
  }

  /**
   * Get moreResults
   *
   * @return moreResults
   */
  @Schema(description = "")
  public Boolean isMoreResults() {
    return moreResults;
  }

  public void setMoreResults(Boolean moreResults) {
    this.moreResults = moreResults;
  }

  public Statement fetchDirection(Integer fetchDirection) {
    this.fetchDirection = fetchDirection;
    return this;
  }

  /**
   * Get fetchDirection
   *
   * @return fetchDirection
   */
  @Schema(description = "")
  public Integer getFetchDirection() {
    return fetchDirection;
  }

  public void setFetchDirection(Integer fetchDirection) {
    this.fetchDirection = fetchDirection;
  }

  public Statement resultSet(ResultSet resultSet) {
    this.resultSet = resultSet;
    return this;
  }

  /**
   * Get resultSet
   *
   * @return resultSet
   */
  @Schema(description = "")
  public ResultSet getResultSet() {
    return resultSet;
  }

  public void setResultSet(ResultSet resultSet) {
    this.resultSet = resultSet;
  }

  public Statement maxRows(Integer maxRows) {
    this.maxRows = maxRows;
    return this;
  }

  /**
   * Get maxRows
   *
   * @return maxRows
   */
  @Schema(description = "")
  public Integer getMaxRows() {
    return maxRows;
  }

  public void setMaxRows(Integer maxRows) {
    this.maxRows = maxRows;
  }

  public Statement resultSetHoldability(Integer resultSetHoldability) {
    this.resultSetHoldability = resultSetHoldability;
    return this;
  }

  /**
   * Get resultSetHoldability
   *
   * @return resultSetHoldability
   */
  @Schema(description = "")
  public Integer getResultSetHoldability() {
    return resultSetHoldability;
  }

  public void setResultSetHoldability(Integer resultSetHoldability) {
    this.resultSetHoldability = resultSetHoldability;
  }

  public Statement resultSetType(Integer resultSetType) {
    this.resultSetType = resultSetType;
    return this;
  }

  /**
   * Get resultSetType
   *
   * @return resultSetType
   */
  @Schema(description = "")
  public Integer getResultSetType() {
    return resultSetType;
  }

  public void setResultSetType(Integer resultSetType) {
    this.resultSetType = resultSetType;
  }

  public Statement poolable(Boolean poolable) {
    this.poolable = poolable;
    return this;
  }

  /**
   * Get poolable
   *
   * @return poolable
   */
  @Schema(description = "")
  public Boolean isPoolable() {
    return poolable;
  }

  public void setPoolable(Boolean poolable) {
    this.poolable = poolable;
  }

  public Statement largeMaxRows(Long largeMaxRows) {
    this.largeMaxRows = largeMaxRows;
    return this;
  }

  /**
   * Get largeMaxRows
   *
   * @return largeMaxRows
   */
  @Schema(description = "")
  public Long getLargeMaxRows() {
    return largeMaxRows;
  }

  public void setLargeMaxRows(Long largeMaxRows) {
    this.largeMaxRows = largeMaxRows;
  }

  public Statement closed(Boolean closed) {
    this.closed = closed;
    return this;
  }

  /**
   * Get closed
   *
   * @return closed
   */
  @Schema(description = "")
  public Boolean isClosed() {
    return closed;
  }

  public void setClosed(Boolean closed) {
    this.closed = closed;
  }

  public Statement connection(Connection connection) {
    this.connection = connection;
    return this;
  }

  /**
   * Get connection
   *
   * @return connection
   */
  @Schema(description = "")
  public Connection getConnection() {
    return connection;
  }

  public void setConnection(Connection connection) {
    this.connection = connection;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Statement statement = (Statement) o;
    return Objects.equals(this.queryTimeout, statement.queryTimeout)
        && Objects.equals(this.updateCount, statement.updateCount)
        && Objects.equals(this.maxFieldSize, statement.maxFieldSize)
        && Objects.equals(this.resultSetConcurrency, statement.resultSetConcurrency)
        && Objects.equals(this.closeOnCompletion, statement.closeOnCompletion)
        && Objects.equals(this.fetchSize, statement.fetchSize)
        && Objects.equals(this.largeUpdateCount, statement.largeUpdateCount)
        && Objects.equals(this.warnings, statement.warnings)
        && Objects.equals(this.generatedKeys, statement.generatedKeys)
        && Objects.equals(this.moreResults, statement.moreResults)
        && Objects.equals(this.fetchDirection, statement.fetchDirection)
        && Objects.equals(this.resultSet, statement.resultSet)
        && Objects.equals(this.maxRows, statement.maxRows)
        && Objects.equals(this.resultSetHoldability, statement.resultSetHoldability)
        && Objects.equals(this.resultSetType, statement.resultSetType)
        && Objects.equals(this.poolable, statement.poolable)
        && Objects.equals(this.largeMaxRows, statement.largeMaxRows)
        && Objects.equals(this.closed, statement.closed)
        && Objects.equals(this.connection, statement.connection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        queryTimeout,
        updateCount,
        maxFieldSize,
        resultSetConcurrency,
        closeOnCompletion,
        fetchSize,
        largeUpdateCount,
        warnings,
        generatedKeys,
        moreResults,
        fetchDirection,
        resultSet,
        maxRows,
        resultSetHoldability,
        resultSetType,
        poolable,
        largeMaxRows,
        closed,
        connection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Statement {\n");

    sb.append("    queryTimeout: ").append(toIndentedString(queryTimeout)).append("\n");
    sb.append("    updateCount: ").append(toIndentedString(updateCount)).append("\n");
    sb.append("    maxFieldSize: ").append(toIndentedString(maxFieldSize)).append("\n");
    sb.append("    resultSetConcurrency: ")
        .append(toIndentedString(resultSetConcurrency))
        .append("\n");
    sb.append("    closeOnCompletion: ").append(toIndentedString(closeOnCompletion)).append("\n");
    sb.append("    fetchSize: ").append(toIndentedString(fetchSize)).append("\n");
    sb.append("    largeUpdateCount: ").append(toIndentedString(largeUpdateCount)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    generatedKeys: ").append(toIndentedString(generatedKeys)).append("\n");
    sb.append("    moreResults: ").append(toIndentedString(moreResults)).append("\n");
    sb.append("    fetchDirection: ").append(toIndentedString(fetchDirection)).append("\n");
    sb.append("    resultSet: ").append(toIndentedString(resultSet)).append("\n");
    sb.append("    maxRows: ").append(toIndentedString(maxRows)).append("\n");
    sb.append("    resultSetHoldability: ")
        .append(toIndentedString(resultSetHoldability))
        .append("\n");
    sb.append("    resultSetType: ").append(toIndentedString(resultSetType)).append("\n");
    sb.append("    poolable: ").append(toIndentedString(poolable)).append("\n");
    sb.append("    largeMaxRows: ").append(toIndentedString(largeMaxRows)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
